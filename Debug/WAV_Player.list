
WAV_Player.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fd8c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000528  0800ff14  0800ff14  0001ff14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801043c  0801043c  000300b8  2**0
                  CONTENTS
  4 .ARM          00000008  0801043c  0801043c  0002043c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010444  08010444  000300b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010444  08010444  00020444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010448  08010448  00020448  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  20000000  0801044c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000300b8  2**0
                  CONTENTS
 10 .bss          00002550  200000b8  200000b8  000300b8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002608  20002608  000300b8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000300b8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000300e8  2**0
                  CONTENTS, READONLY
 14 .debug_info   00023170  00000000  00000000  0003012b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00005cc9  00000000  00000000  0005329b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001b38  00000000  00000000  00058f68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000014da  00000000  00000000  0005aaa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000282ba  00000000  00000000  0005bf7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00029a6d  00000000  00000000  00084234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d4c3f  00000000  00000000  000adca1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007378  00000000  00000000  001828e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  00189c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000b8 	.word	0x200000b8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800fefc 	.word	0x0800fefc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000bc 	.word	0x200000bc
 80001c4:	0800fefc 	.word	0x0800fefc

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <AUDIO_OUT_Init>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  AudioFreq: Audio frequency used to play the audio stream.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Init(uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{    
 80004c4:	b590      	push	{r4, r7, lr}
 80004c6:	b085      	sub	sp, #20
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	4603      	mov	r3, r0
 80004cc:	603a      	str	r2, [r7, #0]
 80004ce:	80fb      	strh	r3, [r7, #6]
 80004d0:	460b      	mov	r3, r1
 80004d2:	717b      	strb	r3, [r7, #5]
  uint8_t ret = AUDIO_OK;
 80004d4:	2300      	movs	r3, #0
 80004d6:	73fb      	strb	r3, [r7, #15]
  
  /* PLL clock is set depending by the AudioFreq (44.1khz vs 48khz groups) */ 
  AUDIO_OUT_ClockConfig(&hAudioOutI2s, AudioFreq, NULL);
 80004d8:	2200      	movs	r2, #0
 80004da:	6839      	ldr	r1, [r7, #0]
 80004dc:	481c      	ldr	r0, [pc, #112]	; (8000550 <AUDIO_OUT_Init+0x8c>)
 80004de:	f000 f8f9 	bl	80006d4 <AUDIO_OUT_ClockConfig>
  
  /* I2S data transfer preparation:
  Prepare the Media to be used for the audio transfer from memory to I2S peripheral */
  hAudioOutI2s.Instance = I2S3;
 80004e2:	4b1b      	ldr	r3, [pc, #108]	; (8000550 <AUDIO_OUT_Init+0x8c>)
 80004e4:	4a1b      	ldr	r2, [pc, #108]	; (8000554 <AUDIO_OUT_Init+0x90>)
 80004e6:	601a      	str	r2, [r3, #0]
  if(HAL_I2S_GetState(&hAudioOutI2s) == HAL_I2S_STATE_RESET)
 80004e8:	4819      	ldr	r0, [pc, #100]	; (8000550 <AUDIO_OUT_Init+0x8c>)
 80004ea:	f005 ff91 	bl	8006410 <HAL_I2S_GetState>
 80004ee:	4603      	mov	r3, r0
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d103      	bne.n	80004fc <AUDIO_OUT_Init+0x38>
  {
    /* Init the I2S MSP: this __weak function can be redefined by the application*/
    AUDIO_OUT_MspInit(&hAudioOutI2s, NULL);
 80004f4:	2100      	movs	r1, #0
 80004f6:	4816      	ldr	r0, [pc, #88]	; (8000550 <AUDIO_OUT_Init+0x8c>)
 80004f8:	f000 f946 	bl	8000788 <AUDIO_OUT_MspInit>
  }

  /* I2S data transfer preparation:
  Prepare the Media to be used for the audio transfer from memory to I2S peripheral */
  /* Configure the I2S peripheral */
  if(I2S3_Init(AudioFreq) != AUDIO_OK)
 80004fc:	6838      	ldr	r0, [r7, #0]
 80004fe:	f000 fa0b 	bl	8000918 <I2S3_Init>
 8000502:	4603      	mov	r3, r0
 8000504:	2b00      	cmp	r3, #0
 8000506:	d001      	beq.n	800050c <AUDIO_OUT_Init+0x48>
  {
    ret = AUDIO_ERROR;
 8000508:	2301      	movs	r3, #1
 800050a:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == AUDIO_OK)
 800050c:	7bfb      	ldrb	r3, [r7, #15]
 800050e:	2b00      	cmp	r3, #0
 8000510:	d10e      	bne.n	8000530 <AUDIO_OUT_Init+0x6c>
  {
    /* Retieve audio codec identifier */
    if(((cs43l22_drv.ReadID(AUDIO_I2C_ADDRESS)) & CS43L22_ID_MASK) == CS43L22_ID)
 8000512:	4b11      	ldr	r3, [pc, #68]	; (8000558 <AUDIO_OUT_Init+0x94>)
 8000514:	689b      	ldr	r3, [r3, #8]
 8000516:	2094      	movs	r0, #148	; 0x94
 8000518:	4798      	blx	r3
 800051a:	4603      	mov	r3, r0
 800051c:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8000520:	2be0      	cmp	r3, #224	; 0xe0
 8000522:	d103      	bne.n	800052c <AUDIO_OUT_Init+0x68>
    {  
      /* Initialize the audio driver structure */
      pAudioDrv = &cs43l22_drv; 
 8000524:	4b0d      	ldr	r3, [pc, #52]	; (800055c <AUDIO_OUT_Init+0x98>)
 8000526:	4a0c      	ldr	r2, [pc, #48]	; (8000558 <AUDIO_OUT_Init+0x94>)
 8000528:	601a      	str	r2, [r3, #0]
 800052a:	e001      	b.n	8000530 <AUDIO_OUT_Init+0x6c>
    }
    else
    {
      ret = AUDIO_ERROR;
 800052c:	2301      	movs	r3, #1
 800052e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  if(ret == AUDIO_OK)
 8000530:	7bfb      	ldrb	r3, [r7, #15]
 8000532:	2b00      	cmp	r3, #0
 8000534:	d107      	bne.n	8000546 <AUDIO_OUT_Init+0x82>
  {
    pAudioDrv->Init(AUDIO_I2C_ADDRESS, OutputDevice, Volume, AudioFreq);
 8000536:	4b09      	ldr	r3, [pc, #36]	; (800055c <AUDIO_OUT_Init+0x98>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	681c      	ldr	r4, [r3, #0]
 800053c:	797a      	ldrb	r2, [r7, #5]
 800053e:	88f9      	ldrh	r1, [r7, #6]
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	2094      	movs	r0, #148	; 0x94
 8000544:	47a0      	blx	r4
  }
  
  return ret;
 8000546:	7bfb      	ldrb	r3, [r7, #15]
}
 8000548:	4618      	mov	r0, r3
 800054a:	3714      	adds	r7, #20
 800054c:	46bd      	mov	sp, r7
 800054e:	bd90      	pop	{r4, r7, pc}
 8000550:	200000d8 	.word	0x200000d8
 8000554:	40003c00 	.word	0x40003c00
 8000558:	20000004 	.word	0x20000004
 800055c:	200000d4 	.word	0x200000d4

08000560 <AUDIO_OUT_Play>:
  * @param  pBuffer: Pointer to the buffer 
  * @param  Size: Number of audio data BYTES.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Play(uint16_t* pBuffer, uint32_t Size)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
 8000568:	6039      	str	r1, [r7, #0]
  /* Call the audio Codec Play function */
  if(pAudioDrv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0)
 800056a:	4b10      	ldr	r3, [pc, #64]	; (80005ac <AUDIO_OUT_Play+0x4c>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	68db      	ldr	r3, [r3, #12]
 8000570:	683a      	ldr	r2, [r7, #0]
 8000572:	b292      	uxth	r2, r2
 8000574:	6879      	ldr	r1, [r7, #4]
 8000576:	2094      	movs	r0, #148	; 0x94
 8000578:	4798      	blx	r3
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d001      	beq.n	8000584 <AUDIO_OUT_Play+0x24>
  {
    return AUDIO_ERROR;
 8000580:	2301      	movs	r3, #1
 8000582:	e00f      	b.n	80005a4 <AUDIO_OUT_Play+0x44>
  }
  else 
  {
    /* Update the Media layer and enable it for play */  
    HAL_I2S_Transmit_DMA(&hAudioOutI2s, pBuffer, DMA_MAX(Size/AUDIODATA_SIZE)); 
 8000584:	683b      	ldr	r3, [r7, #0]
 8000586:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800058a:	d203      	bcs.n	8000594 <AUDIO_OUT_Play+0x34>
 800058c:	683b      	ldr	r3, [r7, #0]
 800058e:	085b      	lsrs	r3, r3, #1
 8000590:	b29b      	uxth	r3, r3
 8000592:	e001      	b.n	8000598 <AUDIO_OUT_Play+0x38>
 8000594:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000598:	461a      	mov	r2, r3
 800059a:	6879      	ldr	r1, [r7, #4]
 800059c:	4804      	ldr	r0, [pc, #16]	; (80005b0 <AUDIO_OUT_Play+0x50>)
 800059e:	f005 fbb5 	bl	8005d0c <HAL_I2S_Transmit_DMA>
    
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 80005a2:	2300      	movs	r3, #0
  }
}
 80005a4:	4618      	mov	r0, r3
 80005a6:	3708      	adds	r7, #8
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	200000d4 	.word	0x200000d4
 80005b0:	200000d8 	.word	0x200000d8

080005b4 <AUDIO_OUT_Pause>:
  *          BSP_AUDIO_OUT_Resume() function should be called for resume (use of BSP_AUDIO_OUT_Play() 
  *          function for resume could lead to unexpected behavior).
  * @retval  AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Pause(void)
{    
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  /* Call the Audio Codec Pause/Resume function */
  if(pAudioDrv->Pause(AUDIO_I2C_ADDRESS) != 0)
 80005b8:	4b07      	ldr	r3, [pc, #28]	; (80005d8 <AUDIO_OUT_Pause+0x24>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	691b      	ldr	r3, [r3, #16]
 80005be:	2094      	movs	r0, #148	; 0x94
 80005c0:	4798      	blx	r3
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <AUDIO_OUT_Pause+0x18>
  {
    return AUDIO_ERROR;
 80005c8:	2301      	movs	r3, #1
 80005ca:	e003      	b.n	80005d4 <AUDIO_OUT_Pause+0x20>
  }
  else
  {
    /* Call the Media layer pause function */
    HAL_I2S_DMAPause(&hAudioOutI2s);
 80005cc:	4803      	ldr	r0, [pc, #12]	; (80005dc <AUDIO_OUT_Pause+0x28>)
 80005ce:	f005 fc45 	bl	8005e5c <HAL_I2S_DMAPause>
    
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 80005d2:	2300      	movs	r3, #0
  }
}
 80005d4:	4618      	mov	r0, r3
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	200000d4 	.word	0x200000d4
 80005dc:	200000d8 	.word	0x200000d8

080005e0 <AUDIO_OUT_Resume>:
  *          BSP_AUDIO_OUT_Resume() function should be called for resume (use of BSP_AUDIO_OUT_Play() 
  *          function for resume could lead to unexpected behavior).
  * @retval  AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Resume(void)
{    
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  /* Call the Audio Codec Pause/Resume function */
  if(pAudioDrv->Resume(AUDIO_I2C_ADDRESS) != 0)
 80005e4:	4b07      	ldr	r3, [pc, #28]	; (8000604 <AUDIO_OUT_Resume+0x24>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	695b      	ldr	r3, [r3, #20]
 80005ea:	2094      	movs	r0, #148	; 0x94
 80005ec:	4798      	blx	r3
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <AUDIO_OUT_Resume+0x18>
  {
    return AUDIO_ERROR;
 80005f4:	2301      	movs	r3, #1
 80005f6:	e003      	b.n	8000600 <AUDIO_OUT_Resume+0x20>
  }
  else
  {
    /* Call the Media layer resume function */
    HAL_I2S_DMAResume(&hAudioOutI2s);
 80005f8:	4803      	ldr	r0, [pc, #12]	; (8000608 <AUDIO_OUT_Resume+0x28>)
 80005fa:	f005 fc91 	bl	8005f20 <HAL_I2S_DMAResume>
    
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 80005fe:	2300      	movs	r3, #0
  }
}
 8000600:	4618      	mov	r0, r3
 8000602:	bd80      	pop	{r7, pc}
 8000604:	200000d4 	.word	0x200000d4
 8000608:	200000d8 	.word	0x200000d8

0800060c <AUDIO_OUT_Stop>:
  *           - CODEC_PDWN_HW: completely shut down the codec (physically). 
  *                            Then need to reconfigure the Codec after power on.  
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Stop(uint32_t Option)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  /* Call DMA Stop to disable DMA stream before stopping codec */
  HAL_I2S_DMAStop(&hAudioOutI2s);
 8000614:	480e      	ldr	r0, [pc, #56]	; (8000650 <AUDIO_OUT_Stop+0x44>)
 8000616:	f005 fd17 	bl	8006048 <HAL_I2S_DMAStop>
  
  /* Call Audio Codec Stop function */
  if(pAudioDrv->Stop(AUDIO_I2C_ADDRESS, Option) != 0)
 800061a:	4b0e      	ldr	r3, [pc, #56]	; (8000654 <AUDIO_OUT_Stop+0x48>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	699b      	ldr	r3, [r3, #24]
 8000620:	6879      	ldr	r1, [r7, #4]
 8000622:	2094      	movs	r0, #148	; 0x94
 8000624:	4798      	blx	r3
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <AUDIO_OUT_Stop+0x24>
  {
    return AUDIO_ERROR;
 800062c:	2301      	movs	r3, #1
 800062e:	e00b      	b.n	8000648 <AUDIO_OUT_Stop+0x3c>
  }
  else
  {
    if(Option == CODEC_PDWN_HW)
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	2b01      	cmp	r3, #1
 8000634:	d107      	bne.n	8000646 <AUDIO_OUT_Stop+0x3a>
    { 
      /* Wait at least 1ms */
      HAL_Delay(1);
 8000636:	2001      	movs	r0, #1
 8000638:	f001 fe12 	bl	8002260 <HAL_Delay>
      
      /* Reset the pin */
      HAL_GPIO_WritePin(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, GPIO_PIN_RESET);
 800063c:	2200      	movs	r2, #0
 800063e:	2110      	movs	r1, #16
 8000640:	4805      	ldr	r0, [pc, #20]	; (8000658 <AUDIO_OUT_Stop+0x4c>)
 8000642:	f002 fde9 	bl	8003218 <HAL_GPIO_WritePin>
    }
    
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 8000646:	2300      	movs	r3, #0
  }
}
 8000648:	4618      	mov	r0, r3
 800064a:	3708      	adds	r7, #8
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	200000d8 	.word	0x200000d8
 8000654:	200000d4 	.word	0x200000d4
 8000658:	40020c00 	.word	0x40020c00

0800065c <AUDIO_OUT_SetVolume>:
  * @param  Volume: Volume level to be set in percentage from 0% to 100% (0 for 
  *         Mute and 100 for Max volume level).
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_SetVolume(uint8_t Volume)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	4603      	mov	r3, r0
 8000664:	71fb      	strb	r3, [r7, #7]
  /* Call the codec volume control function with converted volume value */
  if(pAudioDrv->SetVolume(AUDIO_I2C_ADDRESS, Volume) != 0)
 8000666:	4b08      	ldr	r3, [pc, #32]	; (8000688 <AUDIO_OUT_SetVolume+0x2c>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	6a1b      	ldr	r3, [r3, #32]
 800066c:	79fa      	ldrb	r2, [r7, #7]
 800066e:	4611      	mov	r1, r2
 8000670:	2094      	movs	r0, #148	; 0x94
 8000672:	4798      	blx	r3
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <AUDIO_OUT_SetVolume+0x22>
  {
    return AUDIO_ERROR;
 800067a:	2301      	movs	r3, #1
 800067c:	e000      	b.n	8000680 <AUDIO_OUT_SetVolume+0x24>
  }
  else
  {
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 800067e:	2300      	movs	r3, #0
  }
}
 8000680:	4618      	mov	r0, r3
 8000682:	3708      	adds	r7, #8
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	200000d4 	.word	0x200000d4

0800068c <HAL_I2S_TxCpltCallback>:
/**
  * @brief  Tx Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == I2S3)
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a04      	ldr	r2, [pc, #16]	; (80006ac <HAL_I2S_TxCpltCallback+0x20>)
 800069a:	4293      	cmp	r3, r2
 800069c:	d101      	bne.n	80006a2 <HAL_I2S_TxCpltCallback+0x16>
  {
    /* Call the user function which will manage directly transfer complete */  
    AUDIO_OUT_TransferComplete_CallBack();
 800069e:	f001 fd4b 	bl	8002138 <AUDIO_OUT_TransferComplete_CallBack>
  }
}
 80006a2:	bf00      	nop
 80006a4:	3708      	adds	r7, #8
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	40003c00 	.word	0x40003c00

080006b0 <HAL_I2S_TxHalfCpltCallback>:
/**
  * @brief  Tx Half Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == I2S3)
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a04      	ldr	r2, [pc, #16]	; (80006d0 <HAL_I2S_TxHalfCpltCallback+0x20>)
 80006be:	4293      	cmp	r3, r2
 80006c0:	d101      	bne.n	80006c6 <HAL_I2S_TxHalfCpltCallback+0x16>
  {
    /* Manage the remaining file size and new address offset: This function should
       be coded by user (its prototype is already declared in stm32f4_discovery_audio.h) */  
    AUDIO_OUT_HalfTransfer_CallBack();
 80006c2:	f001 fd4d 	bl	8002160 <AUDIO_OUT_HalfTransfer_CallBack>
  }
}
 80006c6:	bf00      	nop
 80006c8:	3708      	adds	r7, #8
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40003c00 	.word	0x40003c00

080006d4 <AUDIO_OUT_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application     
  * @param  Params : pointer on additional configuration parameters, can be NULL.
  */
__weak void AUDIO_OUT_ClockConfig(I2S_HandleTypeDef *hi2s, uint32_t AudioFreq, void *Params)
{ 
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b08a      	sub	sp, #40	; 0x28
 80006d8:	af00      	add	r7, sp, #0
 80006da:	60f8      	str	r0, [r7, #12]
 80006dc:	60b9      	str	r1, [r7, #8]
 80006de:	607a      	str	r2, [r7, #4]
  RCC_PeriphCLKInitTypeDef rccclkinit;
  uint8_t index = 0, freqindex = 0xFF;
 80006e0:	2300      	movs	r3, #0
 80006e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80006e6:	23ff      	movs	r3, #255	; 0xff
 80006e8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  
  for(index = 0; index < 8; index++)
 80006ec:	2300      	movs	r3, #0
 80006ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80006f2:	e010      	b.n	8000716 <AUDIO_OUT_ClockConfig+0x42>
  {
    if(I2SFreq[index] == AudioFreq)
 80006f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80006f8:	4a20      	ldr	r2, [pc, #128]	; (800077c <AUDIO_OUT_ClockConfig+0xa8>)
 80006fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006fe:	68ba      	ldr	r2, [r7, #8]
 8000700:	429a      	cmp	r2, r3
 8000702:	d103      	bne.n	800070c <AUDIO_OUT_ClockConfig+0x38>
    {
      freqindex = index;
 8000704:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000708:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  for(index = 0; index < 8; index++)
 800070c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000710:	3301      	adds	r3, #1
 8000712:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000716:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800071a:	2b07      	cmp	r3, #7
 800071c:	d9ea      	bls.n	80006f4 <AUDIO_OUT_ClockConfig+0x20>
    }
  }
  /* Enable PLLI2S clock */
  HAL_RCCEx_GetPeriphCLKConfig(&rccclkinit);
 800071e:	f107 0314 	add.w	r3, r7, #20
 8000722:	4618      	mov	r0, r3
 8000724:	f006 fffe 	bl	8007724 <HAL_RCCEx_GetPeriphCLKConfig>
  /* PLLI2S_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  if ((freqindex & 0x7) == 0)
 8000728:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800072c:	f003 0307 	and.w	r3, r3, #7
 8000730:	2b00      	cmp	r3, #0
 8000732:	d113      	bne.n	800075c <AUDIO_OUT_ClockConfig+0x88>
  {
    /* I2S clock config 
    PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) � (PLLI2SN/PLLM)
    I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000734:	2301      	movs	r3, #1
 8000736:	617b      	str	r3, [r7, #20]
    //rccclkinit.PLLI2S.PLLI2SM = 8;
    rccclkinit.PLLI2S.PLLI2SN = I2SPLLN[freqindex];
 8000738:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800073c:	4a10      	ldr	r2, [pc, #64]	; (8000780 <AUDIO_OUT_ClockConfig+0xac>)
 800073e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000742:	61bb      	str	r3, [r7, #24]
    rccclkinit.PLLI2S.PLLI2SR = I2SPLLR[freqindex];
 8000744:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000748:	4a0e      	ldr	r2, [pc, #56]	; (8000784 <AUDIO_OUT_ClockConfig+0xb0>)
 800074a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800074e:	61fb      	str	r3, [r7, #28]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8000750:	f107 0314 	add.w	r3, r7, #20
 8000754:	4618      	mov	r0, r3
 8000756:	f006 ff03 	bl	8007560 <HAL_RCCEx_PeriphCLKConfig>
   // rccclkinit.PLLI2S.PLLI2SM = 8;
    rccclkinit.PLLI2S.PLLI2SN = 258;
    rccclkinit.PLLI2S.PLLI2SR = 3;
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
  }
}
 800075a:	e00b      	b.n	8000774 <AUDIO_OUT_ClockConfig+0xa0>
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800075c:	2301      	movs	r3, #1
 800075e:	617b      	str	r3, [r7, #20]
    rccclkinit.PLLI2S.PLLI2SN = 258;
 8000760:	f44f 7381 	mov.w	r3, #258	; 0x102
 8000764:	61bb      	str	r3, [r7, #24]
    rccclkinit.PLLI2S.PLLI2SR = 3;
 8000766:	2303      	movs	r3, #3
 8000768:	61fb      	str	r3, [r7, #28]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 800076a:	f107 0314 	add.w	r3, r7, #20
 800076e:	4618      	mov	r0, r3
 8000770:	f006 fef6 	bl	8007560 <HAL_RCCEx_PeriphCLKConfig>
}
 8000774:	bf00      	nop
 8000776:	3728      	adds	r7, #40	; 0x28
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	0800ff68 	.word	0x0800ff68
 8000780:	0800ff88 	.word	0x0800ff88
 8000784:	0800ffa8 	.word	0x0800ffa8

08000788 <AUDIO_OUT_MspInit>:
  * @brief  AUDIO OUT I2S MSP Init.
  * @param  hi2s: might be required to set audio peripheral predivider if any.
  * @param  Params : pointer on additional configuration parameters, can be NULL.
  */
__weak void AUDIO_OUT_MspInit(I2S_HandleTypeDef *hi2s, void *Params)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b08c      	sub	sp, #48	; 0x30
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
 8000790:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_i2sTx;
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable I2S3 clock */
  I2S3_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	61bb      	str	r3, [r7, #24]
 8000796:	4b56      	ldr	r3, [pc, #344]	; (80008f0 <AUDIO_OUT_MspInit+0x168>)
 8000798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800079a:	4a55      	ldr	r2, [pc, #340]	; (80008f0 <AUDIO_OUT_MspInit+0x168>)
 800079c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007a0:	6413      	str	r3, [r2, #64]	; 0x40
 80007a2:	4b53      	ldr	r3, [pc, #332]	; (80008f0 <AUDIO_OUT_MspInit+0x168>)
 80007a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007aa:	61bb      	str	r3, [r7, #24]
 80007ac:	69bb      	ldr	r3, [r7, #24]

  /*** Configure the GPIOs ***/  
  /* Enable I2S GPIO clocks */
  I2S3_SCK_SD_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	617b      	str	r3, [r7, #20]
 80007b2:	4b4f      	ldr	r3, [pc, #316]	; (80008f0 <AUDIO_OUT_MspInit+0x168>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	4a4e      	ldr	r2, [pc, #312]	; (80008f0 <AUDIO_OUT_MspInit+0x168>)
 80007b8:	f043 0304 	orr.w	r3, r3, #4
 80007bc:	6313      	str	r3, [r2, #48]	; 0x30
 80007be:	4b4c      	ldr	r3, [pc, #304]	; (80008f0 <AUDIO_OUT_MspInit+0x168>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	f003 0304 	and.w	r3, r3, #4
 80007c6:	617b      	str	r3, [r7, #20]
 80007c8:	697b      	ldr	r3, [r7, #20]
  I2S3_WS_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	613b      	str	r3, [r7, #16]
 80007ce:	4b48      	ldr	r3, [pc, #288]	; (80008f0 <AUDIO_OUT_MspInit+0x168>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a47      	ldr	r2, [pc, #284]	; (80008f0 <AUDIO_OUT_MspInit+0x168>)
 80007d4:	f043 0301 	orr.w	r3, r3, #1
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b45      	ldr	r3, [pc, #276]	; (80008f0 <AUDIO_OUT_MspInit+0x168>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0301 	and.w	r3, r3, #1
 80007e2:	613b      	str	r3, [r7, #16]
 80007e4:	693b      	ldr	r3, [r7, #16]

  /* I2S3 pins configuration: WS, SCK and SD pins ----------------------------*/
  GPIO_InitStruct.Pin         = I2S3_SCK_PIN | I2S3_SD_PIN; 
 80007e6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode        = GPIO_MODE_AF_PP;
 80007ec:	2302      	movs	r3, #2
 80007ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull        = GPIO_NOPULL;
 80007f0:	2300      	movs	r3, #0
 80007f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed       = GPIO_SPEED_FAST;
 80007f4:	2302      	movs	r3, #2
 80007f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate   = I2S3_SCK_SD_WS_AF;
 80007f8:	2306      	movs	r3, #6
 80007fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_SCK_SD_GPIO_PORT, &GPIO_InitStruct);
 80007fc:	f107 031c 	add.w	r3, r7, #28
 8000800:	4619      	mov	r1, r3
 8000802:	483c      	ldr	r0, [pc, #240]	; (80008f4 <AUDIO_OUT_MspInit+0x16c>)
 8000804:	f002 fa70 	bl	8002ce8 <HAL_GPIO_Init>
  
  GPIO_InitStruct.Pin         = I2S3_WS_PIN ;
 8000808:	2310      	movs	r3, #16
 800080a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(I2S3_WS_GPIO_PORT, &GPIO_InitStruct); 
 800080c:	f107 031c 	add.w	r3, r7, #28
 8000810:	4619      	mov	r1, r3
 8000812:	4839      	ldr	r0, [pc, #228]	; (80008f8 <AUDIO_OUT_MspInit+0x170>)
 8000814:	f002 fa68 	bl	8002ce8 <HAL_GPIO_Init>

  /* I2S3 pins configuration: MCK pin */
  I2S3_MCK_CLK_ENABLE();
 8000818:	2300      	movs	r3, #0
 800081a:	60fb      	str	r3, [r7, #12]
 800081c:	4b34      	ldr	r3, [pc, #208]	; (80008f0 <AUDIO_OUT_MspInit+0x168>)
 800081e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000820:	4a33      	ldr	r2, [pc, #204]	; (80008f0 <AUDIO_OUT_MspInit+0x168>)
 8000822:	f043 0304 	orr.w	r3, r3, #4
 8000826:	6313      	str	r3, [r2, #48]	; 0x30
 8000828:	4b31      	ldr	r3, [pc, #196]	; (80008f0 <AUDIO_OUT_MspInit+0x168>)
 800082a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082c:	f003 0304 	and.w	r3, r3, #4
 8000830:	60fb      	str	r3, [r7, #12]
 8000832:	68fb      	ldr	r3, [r7, #12]
  GPIO_InitStruct.Pin         = I2S3_MCK_PIN; 
 8000834:	2380      	movs	r3, #128	; 0x80
 8000836:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(I2S3_MCK_GPIO_PORT, &GPIO_InitStruct);   
 8000838:	f107 031c 	add.w	r3, r7, #28
 800083c:	4619      	mov	r1, r3
 800083e:	482d      	ldr	r0, [pc, #180]	; (80008f4 <AUDIO_OUT_MspInit+0x16c>)
 8000840:	f002 fa52 	bl	8002ce8 <HAL_GPIO_Init>

  /* Enable the I2S DMA clock */
  I2S3_DMAx_CLK_ENABLE(); 
 8000844:	2300      	movs	r3, #0
 8000846:	60bb      	str	r3, [r7, #8]
 8000848:	4b29      	ldr	r3, [pc, #164]	; (80008f0 <AUDIO_OUT_MspInit+0x168>)
 800084a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084c:	4a28      	ldr	r2, [pc, #160]	; (80008f0 <AUDIO_OUT_MspInit+0x168>)
 800084e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000852:	6313      	str	r3, [r2, #48]	; 0x30
 8000854:	4b26      	ldr	r3, [pc, #152]	; (80008f0 <AUDIO_OUT_MspInit+0x168>)
 8000856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000858:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800085c:	60bb      	str	r3, [r7, #8]
 800085e:	68bb      	ldr	r3, [r7, #8]
  
  if(hi2s->Instance == I2S3)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a25      	ldr	r2, [pc, #148]	; (80008fc <AUDIO_OUT_MspInit+0x174>)
 8000866:	4293      	cmp	r3, r2
 8000868:	d136      	bne.n	80008d8 <AUDIO_OUT_MspInit+0x150>
  {
    /* Configure the hdma_i2sTx handle parameters */   
    hdma_i2sTx.Init.Channel             = I2S3_DMAx_CHANNEL;  
 800086a:	4b25      	ldr	r3, [pc, #148]	; (8000900 <AUDIO_OUT_MspInit+0x178>)
 800086c:	2200      	movs	r2, #0
 800086e:	605a      	str	r2, [r3, #4]
    hdma_i2sTx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8000870:	4b23      	ldr	r3, [pc, #140]	; (8000900 <AUDIO_OUT_MspInit+0x178>)
 8000872:	2240      	movs	r2, #64	; 0x40
 8000874:	609a      	str	r2, [r3, #8]
    hdma_i2sTx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8000876:	4b22      	ldr	r3, [pc, #136]	; (8000900 <AUDIO_OUT_MspInit+0x178>)
 8000878:	2200      	movs	r2, #0
 800087a:	60da      	str	r2, [r3, #12]
    hdma_i2sTx.Init.MemInc              = DMA_MINC_ENABLE;
 800087c:	4b20      	ldr	r3, [pc, #128]	; (8000900 <AUDIO_OUT_MspInit+0x178>)
 800087e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000882:	611a      	str	r2, [r3, #16]
    hdma_i2sTx.Init.PeriphDataAlignment = I2S3_DMAx_PERIPH_DATA_SIZE;
 8000884:	4b1e      	ldr	r3, [pc, #120]	; (8000900 <AUDIO_OUT_MspInit+0x178>)
 8000886:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800088a:	615a      	str	r2, [r3, #20]
    hdma_i2sTx.Init.MemDataAlignment    = I2S3_DMAx_MEM_DATA_SIZE;
 800088c:	4b1c      	ldr	r3, [pc, #112]	; (8000900 <AUDIO_OUT_MspInit+0x178>)
 800088e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000892:	619a      	str	r2, [r3, #24]
    hdma_i2sTx.Init.Mode                = DMA_NORMAL;
 8000894:	4b1a      	ldr	r3, [pc, #104]	; (8000900 <AUDIO_OUT_MspInit+0x178>)
 8000896:	2200      	movs	r2, #0
 8000898:	61da      	str	r2, [r3, #28]
    hdma_i2sTx.Init.Priority            = DMA_PRIORITY_HIGH;
 800089a:	4b19      	ldr	r3, [pc, #100]	; (8000900 <AUDIO_OUT_MspInit+0x178>)
 800089c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80008a0:	621a      	str	r2, [r3, #32]
    hdma_i2sTx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 80008a2:	4b17      	ldr	r3, [pc, #92]	; (8000900 <AUDIO_OUT_MspInit+0x178>)
 80008a4:	2204      	movs	r2, #4
 80008a6:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_i2sTx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80008a8:	4b15      	ldr	r3, [pc, #84]	; (8000900 <AUDIO_OUT_MspInit+0x178>)
 80008aa:	2203      	movs	r2, #3
 80008ac:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_i2sTx.Init.MemBurst            = DMA_MBURST_SINGLE;
 80008ae:	4b14      	ldr	r3, [pc, #80]	; (8000900 <AUDIO_OUT_MspInit+0x178>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_i2sTx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80008b4:	4b12      	ldr	r3, [pc, #72]	; (8000900 <AUDIO_OUT_MspInit+0x178>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	631a      	str	r2, [r3, #48]	; 0x30

    hdma_i2sTx.Instance                 = I2S3_DMAx_STREAM;
 80008ba:	4b11      	ldr	r3, [pc, #68]	; (8000900 <AUDIO_OUT_MspInit+0x178>)
 80008bc:	4a11      	ldr	r2, [pc, #68]	; (8000904 <AUDIO_OUT_MspInit+0x17c>)
 80008be:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hi2s, hdmatx, hdma_i2sTx);
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	4a0f      	ldr	r2, [pc, #60]	; (8000900 <AUDIO_OUT_MspInit+0x178>)
 80008c4:	639a      	str	r2, [r3, #56]	; 0x38
 80008c6:	4a0e      	ldr	r2, [pc, #56]	; (8000900 <AUDIO_OUT_MspInit+0x178>)
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	6393      	str	r3, [r2, #56]	; 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_i2sTx);
 80008cc:	480c      	ldr	r0, [pc, #48]	; (8000900 <AUDIO_OUT_MspInit+0x178>)
 80008ce:	f001 fe7b 	bl	80025c8 <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_i2sTx);
 80008d2:	480b      	ldr	r0, [pc, #44]	; (8000900 <AUDIO_OUT_MspInit+0x178>)
 80008d4:	f001 fdca 	bl	800246c <HAL_DMA_Init>
  }
  
  /* I2S DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(I2S3_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 80008d8:	2200      	movs	r2, #0
 80008da:	210e      	movs	r1, #14
 80008dc:	202f      	movs	r0, #47	; 0x2f
 80008de:	f001 fd9b 	bl	8002418 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2S3_DMAx_IRQ);  
 80008e2:	202f      	movs	r0, #47	; 0x2f
 80008e4:	f001 fdb4 	bl	8002450 <HAL_NVIC_EnableIRQ>
}
 80008e8:	bf00      	nop
 80008ea:	3730      	adds	r7, #48	; 0x30
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	40023800 	.word	0x40023800
 80008f4:	40020800 	.word	0x40020800
 80008f8:	40020000 	.word	0x40020000
 80008fc:	40003c00 	.word	0x40003c00
 8000900:	20000120 	.word	0x20000120
 8000904:	400260b8 	.word	0x400260b8

08000908 <AUDIO_OUT_Error_CallBack>:

/**
  * @brief  Manages the DMA FIFO error event.
  */
__weak void AUDIO_OUT_Error_CallBack(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
}
 800090c:	bf00      	nop
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr
	...

08000918 <I2S3_Init>:
/**
  * @brief  Initializes the Audio Codec audio interface (I2S).
  * @param  AudioFreq: Audio frequency to be configured for the I2S peripheral. 
  */
static uint8_t I2S3_Init(uint32_t AudioFreq)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  /* Initialize the hAudioOutI2s Instance parameter */
  hAudioOutI2s.Instance         = I2S3;
 8000920:	4b17      	ldr	r3, [pc, #92]	; (8000980 <I2S3_Init+0x68>)
 8000922:	4a18      	ldr	r2, [pc, #96]	; (8000984 <I2S3_Init+0x6c>)
 8000924:	601a      	str	r2, [r3, #0]
  
  /* Disable I2S block */
  __HAL_I2S_DISABLE(&hAudioOutI2s);
 8000926:	4b16      	ldr	r3, [pc, #88]	; (8000980 <I2S3_Init+0x68>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	69da      	ldr	r2, [r3, #28]
 800092c:	4b14      	ldr	r3, [pc, #80]	; (8000980 <I2S3_Init+0x68>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000934:	61da      	str	r2, [r3, #28]
  
  /* I2S3 peripheral configuration */
  hAudioOutI2s.Init.AudioFreq   = AudioFreq;
 8000936:	4a12      	ldr	r2, [pc, #72]	; (8000980 <I2S3_Init+0x68>)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	6153      	str	r3, [r2, #20]
  hAudioOutI2s.Init.ClockSource = I2S_CLOCK_PLL;
 800093c:	4b10      	ldr	r3, [pc, #64]	; (8000980 <I2S3_Init+0x68>)
 800093e:	2200      	movs	r2, #0
 8000940:	61da      	str	r2, [r3, #28]
  hAudioOutI2s.Init.CPOL        = I2S_CPOL_LOW;
 8000942:	4b0f      	ldr	r3, [pc, #60]	; (8000980 <I2S3_Init+0x68>)
 8000944:	2200      	movs	r2, #0
 8000946:	619a      	str	r2, [r3, #24]
  hAudioOutI2s.Init.DataFormat  = I2S_DATAFORMAT_16B;
 8000948:	4b0d      	ldr	r3, [pc, #52]	; (8000980 <I2S3_Init+0x68>)
 800094a:	2200      	movs	r2, #0
 800094c:	60da      	str	r2, [r3, #12]
  hAudioOutI2s.Init.MCLKOutput  = I2S_MCLKOUTPUT_ENABLE;
 800094e:	4b0c      	ldr	r3, [pc, #48]	; (8000980 <I2S3_Init+0x68>)
 8000950:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000954:	611a      	str	r2, [r3, #16]
  hAudioOutI2s.Init.Mode        = I2S_MODE_MASTER_TX;
 8000956:	4b0a      	ldr	r3, [pc, #40]	; (8000980 <I2S3_Init+0x68>)
 8000958:	f44f 7200 	mov.w	r2, #512	; 0x200
 800095c:	605a      	str	r2, [r3, #4]
  hAudioOutI2s.Init.Standard    = I2S_STANDARD;
 800095e:	4b08      	ldr	r3, [pc, #32]	; (8000980 <I2S3_Init+0x68>)
 8000960:	2200      	movs	r2, #0
 8000962:	609a      	str	r2, [r3, #8]

  /* Initialize the I2S peripheral with the structure above */
  if(HAL_I2S_Init(&hAudioOutI2s) != HAL_OK)
 8000964:	4806      	ldr	r0, [pc, #24]	; (8000980 <I2S3_Init+0x68>)
 8000966:	f005 f891 	bl	8005a8c <HAL_I2S_Init>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <I2S3_Init+0x5c>
  {
    return AUDIO_ERROR;
 8000970:	2301      	movs	r3, #1
 8000972:	e000      	b.n	8000976 <I2S3_Init+0x5e>
  }
  else
  {
    return AUDIO_OK;
 8000974:	2300      	movs	r3, #0
  }
}
 8000976:	4618      	mov	r0, r3
 8000978:	3708      	adds	r7, #8
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	200000d8 	.word	0x200000d8
 8000984:	40003c00 	.word	0x40003c00

08000988 <HAL_I2S_ErrorCallback>:
/**
  * @brief  I2S error callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  /* Manage the error generated on DMA FIFO: This function 
     should be coded by user (its prototype is already declared in stm32f411e_discovery_audio.h) */ 
  if(hi2s->Instance == I2S3)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a04      	ldr	r2, [pc, #16]	; (80009a8 <HAL_I2S_ErrorCallback+0x20>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d101      	bne.n	800099e <HAL_I2S_ErrorCallback+0x16>
  {
    AUDIO_OUT_Error_CallBack();
 800099a:	f7ff ffb5 	bl	8000908 <AUDIO_OUT_Error_CallBack>
  }
}
 800099e:	bf00      	nop
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	40003c00 	.word	0x40003c00

080009ac <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 80009b0:	4814      	ldr	r0, [pc, #80]	; (8000a04 <I2Cx_Init+0x58>)
 80009b2:	f004 fd01 	bl	80053b8 <HAL_I2C_GetState>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d121      	bne.n	8000a00 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance = AUDIO_I2Cx;
 80009bc:	4b11      	ldr	r3, [pc, #68]	; (8000a04 <I2Cx_Init+0x58>)
 80009be:	4a12      	ldr	r2, [pc, #72]	; (8000a08 <I2Cx_Init+0x5c>)
 80009c0:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.OwnAddress1 =  0x43;
 80009c2:	4b10      	ldr	r3, [pc, #64]	; (8000a04 <I2Cx_Init+0x58>)
 80009c4:	2243      	movs	r2, #67	; 0x43
 80009c6:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.ClockSpeed = I2Cx_MAX_COMMUNICATION_FREQ;
 80009c8:	4b0e      	ldr	r3, [pc, #56]	; (8000a04 <I2Cx_Init+0x58>)
 80009ca:	4a10      	ldr	r2, [pc, #64]	; (8000a0c <I2Cx_Init+0x60>)
 80009cc:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009ce:	4b0d      	ldr	r3, [pc, #52]	; (8000a04 <I2Cx_Init+0x58>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009d4:	4b0b      	ldr	r3, [pc, #44]	; (8000a04 <I2Cx_Init+0x58>)
 80009d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009da:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 80009dc:	4b09      	ldr	r3, [pc, #36]	; (8000a04 <I2Cx_Init+0x58>)
 80009de:	2200      	movs	r2, #0
 80009e0:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2 = 0x00;
 80009e2:	4b08      	ldr	r3, [pc, #32]	; (8000a04 <I2Cx_Init+0x58>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 80009e8:	4b06      	ldr	r3, [pc, #24]	; (8000a04 <I2Cx_Init+0x58>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;
 80009ee:	4b05      	ldr	r3, [pc, #20]	; (8000a04 <I2Cx_Init+0x58>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 80009f4:	4803      	ldr	r0, [pc, #12]	; (8000a04 <I2Cx_Init+0x58>)
 80009f6:	f000 f86b 	bl	8000ad0 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 80009fa:	4802      	ldr	r0, [pc, #8]	; (8000a04 <I2Cx_Init+0x58>)
 80009fc:	f004 f848 	bl	8004a90 <HAL_I2C_Init>
  }
}
 8000a00:	bf00      	nop
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	20000180 	.word	0x20000180
 8000a08:	40005400 	.word	0x40005400
 8000a0c:	000186a0 	.word	0x000186a0

08000a10 <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b088      	sub	sp, #32
 8000a14:	af04      	add	r7, sp, #16
 8000a16:	4603      	mov	r3, r0
 8000a18:	80fb      	strh	r3, [r7, #6]
 8000a1a:	460b      	mov	r3, r1
 8000a1c:	717b      	strb	r3, [r7, #5]
 8000a1e:	4613      	mov	r3, r2
 8000a20:	713b      	strb	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a22:	2300      	movs	r3, #0
 8000a24:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 8000a26:	797b      	ldrb	r3, [r7, #5]
 8000a28:	b29a      	uxth	r2, r3
 8000a2a:	4b0b      	ldr	r3, [pc, #44]	; (8000a58 <I2Cx_WriteData+0x48>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	88f9      	ldrh	r1, [r7, #6]
 8000a30:	9302      	str	r3, [sp, #8]
 8000a32:	2301      	movs	r3, #1
 8000a34:	9301      	str	r3, [sp, #4]
 8000a36:	1d3b      	adds	r3, r7, #4
 8000a38:	9300      	str	r3, [sp, #0]
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	4807      	ldr	r0, [pc, #28]	; (8000a5c <I2Cx_WriteData+0x4c>)
 8000a3e:	f004 f99b 	bl	8004d78 <HAL_I2C_Mem_Write>
 8000a42:	4603      	mov	r3, r0
 8000a44:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8000a46:	7bfb      	ldrb	r3, [r7, #15]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <I2Cx_WriteData+0x40>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 8000a4c:	f000 f834 	bl	8000ab8 <I2Cx_Error>
  }
}
 8000a50:	bf00      	nop
 8000a52:	3710      	adds	r7, #16
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	20000000 	.word	0x20000000
 8000a5c:	20000180 	.word	0x20000180

08000a60 <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b088      	sub	sp, #32
 8000a64:	af04      	add	r7, sp, #16
 8000a66:	4603      	mov	r3, r0
 8000a68:	460a      	mov	r2, r1
 8000a6a:	80fb      	strh	r3, [r7, #6]
 8000a6c:	4613      	mov	r3, r2
 8000a6e:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8000a70:	2300      	movs	r3, #0
 8000a72:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8000a74:	2300      	movs	r3, #0
 8000a76:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8000a78:	797b      	ldrb	r3, [r7, #5]
 8000a7a:	b29a      	uxth	r2, r3
 8000a7c:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <I2Cx_ReadData+0x50>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	88f9      	ldrh	r1, [r7, #6]
 8000a82:	9302      	str	r3, [sp, #8]
 8000a84:	2301      	movs	r3, #1
 8000a86:	9301      	str	r3, [sp, #4]
 8000a88:	f107 030e 	add.w	r3, r7, #14
 8000a8c:	9300      	str	r3, [sp, #0]
 8000a8e:	2301      	movs	r3, #1
 8000a90:	4808      	ldr	r0, [pc, #32]	; (8000ab4 <I2Cx_ReadData+0x54>)
 8000a92:	f004 fa6b 	bl	8004f6c <HAL_I2C_Mem_Read>
 8000a96:	4603      	mov	r3, r0
 8000a98:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8000a9a:	7bfb      	ldrb	r3, [r7, #15]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <I2Cx_ReadData+0x44>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 8000aa0:	f000 f80a 	bl	8000ab8 <I2Cx_Error>
  }
  return value;
 8000aa4:	7bbb      	ldrb	r3, [r7, #14]
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	3710      	adds	r7, #16
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	20000000 	.word	0x20000000
 8000ab4:	20000180 	.word	0x20000180

08000ab8 <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function.
  */
static void I2Cx_Error(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* De-initialize the I2C comunication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8000abc:	4803      	ldr	r0, [pc, #12]	; (8000acc <I2Cx_Error+0x14>)
 8000abe:	f004 f92b 	bl	8004d18 <HAL_I2C_DeInit>
  
  /* Re- Initiaize the I2C comunication BUS */
  I2Cx_Init();
 8000ac2:	f7ff ff73 	bl	80009ac <I2Cx_Init>
}
 8000ac6:	bf00      	nop
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	20000180 	.word	0x20000180

08000ad0 <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Init.
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b08a      	sub	sp, #40	; 0x28
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the I2C peripheral */
  AUDIO_I2Cx_CLOCK_ENABLE();
 8000ad8:	2300      	movs	r3, #0
 8000ada:	613b      	str	r3, [r7, #16]
 8000adc:	4b25      	ldr	r3, [pc, #148]	; (8000b74 <I2Cx_MspInit+0xa4>)
 8000ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae0:	4a24      	ldr	r2, [pc, #144]	; (8000b74 <I2Cx_MspInit+0xa4>)
 8000ae2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ae6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ae8:	4b22      	ldr	r3, [pc, #136]	; (8000b74 <I2Cx_MspInit+0xa4>)
 8000aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000af0:	613b      	str	r3, [r7, #16]
 8000af2:	693b      	ldr	r3, [r7, #16]

  /* Enable SCK and SDA GPIO clocks */
  AUDIO_I2Cx_GPIO_CLK_ENABLE();
 8000af4:	2300      	movs	r3, #0
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	4b1e      	ldr	r3, [pc, #120]	; (8000b74 <I2Cx_MspInit+0xa4>)
 8000afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afc:	4a1d      	ldr	r2, [pc, #116]	; (8000b74 <I2Cx_MspInit+0xa4>)
 8000afe:	f043 0302 	orr.w	r3, r3, #2
 8000b02:	6313      	str	r3, [r2, #48]	; 0x30
 8000b04:	4b1b      	ldr	r3, [pc, #108]	; (8000b74 <I2Cx_MspInit+0xa4>)
 8000b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b08:	f003 0302 	and.w	r3, r3, #2
 8000b0c:	60fb      	str	r3, [r7, #12]
 8000b0e:	68fb      	ldr	r3, [r7, #12]

  /* I2Cx SD1 & SCK pin configuration */
  GPIO_InitStructure.Pin = AUDIO_I2Cx_SDA_PIN | AUDIO_I2Cx_SCL_PIN;
 8000b10:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b14:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 8000b16:	2312      	movs	r3, #18
 8000b18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = AUDIO_I2Cx_AF;
 8000b22:	2304      	movs	r3, #4
 8000b24:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(AUDIO_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 8000b26:	f107 0314 	add.w	r3, r7, #20
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4812      	ldr	r0, [pc, #72]	; (8000b78 <I2Cx_MspInit+0xa8>)
 8000b2e:	f002 f8db 	bl	8002ce8 <HAL_GPIO_Init>

  /* Force the I2C peripheral clock reset */
  AUDIO_I2Cx_FORCE_RESET();
 8000b32:	4b10      	ldr	r3, [pc, #64]	; (8000b74 <I2Cx_MspInit+0xa4>)
 8000b34:	6a1b      	ldr	r3, [r3, #32]
 8000b36:	4a0f      	ldr	r2, [pc, #60]	; (8000b74 <I2Cx_MspInit+0xa4>)
 8000b38:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b3c:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  AUDIO_I2Cx_RELEASE_RESET();
 8000b3e:	4b0d      	ldr	r3, [pc, #52]	; (8000b74 <I2Cx_MspInit+0xa4>)
 8000b40:	6a1b      	ldr	r3, [r3, #32]
 8000b42:	4a0c      	ldr	r2, [pc, #48]	; (8000b74 <I2Cx_MspInit+0xa4>)
 8000b44:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000b48:	6213      	str	r3, [r2, #32]

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	210f      	movs	r1, #15
 8000b4e:	201f      	movs	r0, #31
 8000b50:	f001 fc62 	bl	8002418 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_I2Cx_EV_IRQn);
 8000b54:	201f      	movs	r0, #31
 8000b56:	f001 fc7b 	bl	8002450 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	210f      	movs	r1, #15
 8000b5e:	2020      	movs	r0, #32
 8000b60:	f001 fc5a 	bl	8002418 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_I2Cx_ER_IRQn);
 8000b64:	2020      	movs	r0, #32
 8000b66:	f001 fc73 	bl	8002450 <HAL_NVIC_EnableIRQ>
}
 8000b6a:	bf00      	nop
 8000b6c:	3728      	adds	r7, #40	; 0x28
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	40023800 	.word	0x40023800
 8000b78:	40020400 	.word	0x40020400

08000b7c <AUDIO_IO_Init>:

/**
  * @brief  Initializes Audio low level.
  */
void AUDIO_IO_Init(void) 
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b086      	sub	sp, #24
 8000b80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable Reset GPIO Clock */
  AUDIO_RESET_GPIO_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	603b      	str	r3, [r7, #0]
 8000b86:	4b17      	ldr	r3, [pc, #92]	; (8000be4 <AUDIO_IO_Init+0x68>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	4a16      	ldr	r2, [pc, #88]	; (8000be4 <AUDIO_IO_Init+0x68>)
 8000b8c:	f043 0308 	orr.w	r3, r3, #8
 8000b90:	6313      	str	r3, [r2, #48]	; 0x30
 8000b92:	4b14      	ldr	r3, [pc, #80]	; (8000be4 <AUDIO_IO_Init+0x68>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	f003 0308 	and.w	r3, r3, #8
 8000b9a:	603b      	str	r3, [r7, #0]
 8000b9c:	683b      	ldr	r3, [r7, #0]
  
  /* Audio reset pin configuration -------------------------------------------*/
  GPIO_InitStruct.Pin = AUDIO_RESET_PIN;
 8000b9e:	2310      	movs	r3, #16
 8000ba0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStruct);
 8000bae:	1d3b      	adds	r3, r7, #4
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	480d      	ldr	r0, [pc, #52]	; (8000be8 <AUDIO_IO_Init+0x6c>)
 8000bb4:	f002 f898 	bl	8002ce8 <HAL_GPIO_Init>
  
  I2Cx_Init();
 8000bb8:	f7ff fef8 	bl	80009ac <I2Cx_Init>
  
  /* Power Down the codec */
  CODEC_AUDIO_POWER_OFF();
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	2110      	movs	r1, #16
 8000bc0:	4809      	ldr	r0, [pc, #36]	; (8000be8 <AUDIO_IO_Init+0x6c>)
 8000bc2:	f002 fb29 	bl	8003218 <HAL_GPIO_WritePin>
  
  /* Wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 8000bc6:	2005      	movs	r0, #5
 8000bc8:	f001 fb4a 	bl	8002260 <HAL_Delay>
  
  /* Power on the codec */
  CODEC_AUDIO_POWER_ON();
 8000bcc:	2201      	movs	r2, #1
 8000bce:	2110      	movs	r1, #16
 8000bd0:	4805      	ldr	r0, [pc, #20]	; (8000be8 <AUDIO_IO_Init+0x6c>)
 8000bd2:	f002 fb21 	bl	8003218 <HAL_GPIO_WritePin>
  
  /* Wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 8000bd6:	2005      	movs	r0, #5
 8000bd8:	f001 fb42 	bl	8002260 <HAL_Delay>
}
 8000bdc:	bf00      	nop
 8000bde:	3718      	adds	r7, #24
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	40023800 	.word	0x40023800
 8000be8:	40020c00 	.word	0x40020c00

08000bec <AUDIO_IO_DeInit>:

/**
  * @brief  DeInitializes Audio low level.
  */
void AUDIO_IO_DeInit(void) 
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  
}
 8000bf0:	bf00      	nop
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr

08000bfa <AUDIO_IO_Write>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  */
void AUDIO_IO_Write (uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	b082      	sub	sp, #8
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	4603      	mov	r3, r0
 8000c02:	71fb      	strb	r3, [r7, #7]
 8000c04:	460b      	mov	r3, r1
 8000c06:	71bb      	strb	r3, [r7, #6]
 8000c08:	4613      	mov	r3, r2
 8000c0a:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 8000c0c:	79fb      	ldrb	r3, [r7, #7]
 8000c0e:	b29b      	uxth	r3, r3
 8000c10:	797a      	ldrb	r2, [r7, #5]
 8000c12:	79b9      	ldrb	r1, [r7, #6]
 8000c14:	4618      	mov	r0, r3
 8000c16:	f7ff fefb 	bl	8000a10 <I2Cx_WriteData>
}
 8000c1a:	bf00      	nop
 8000c1c:	3708      	adds	r7, #8
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}

08000c22 <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint8_t AUDIO_IO_Read (uint8_t Addr, uint8_t Reg)
{
 8000c22:	b580      	push	{r7, lr}
 8000c24:	b082      	sub	sp, #8
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	4603      	mov	r3, r0
 8000c2a:	460a      	mov	r2, r1
 8000c2c:	71fb      	strb	r3, [r7, #7]
 8000c2e:	4613      	mov	r3, r2
 8000c30:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 8000c32:	79fb      	ldrb	r3, [r7, #7]
 8000c34:	b29b      	uxth	r3, r3
 8000c36:	79ba      	ldrb	r2, [r7, #6]
 8000c38:	4611      	mov	r1, r2
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f7ff ff10 	bl	8000a60 <I2Cx_ReadData>
 8000c40:	4603      	mov	r3, r0
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
	...

08000c4c <AUDIO_StorageParse>:

USBH_HandleTypeDef hUSBHost;
uint16_t NumObs = 0;

FRESULT AUDIO_StorageParse(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b0d6      	sub	sp, #344	; 0x158
 8000c50:	af00      	add	r7, sp, #0
  FRESULT res = FR_OK;
 8000c52:	2300      	movs	r3, #0
 8000c54:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
  FILINFO fno;
  DIR dir;
  char *fn;


  res = f_opendir(&dir, USBHPath);
 8000c58:	1d3b      	adds	r3, r7, #4
 8000c5a:	4945      	ldr	r1, [pc, #276]	; (8000d70 <AUDIO_StorageParse+0x124>)
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f00e fa99 	bl	800f194 <f_opendir>
 8000c62:	4603      	mov	r3, r0
 8000c64:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
  FileList.ptr = 0;
 8000c68:	4b42      	ldr	r3, [pc, #264]	; (8000d74 <AUDIO_StorageParse+0x128>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	f8a3 23d8 	strh.w	r2, [r3, #984]	; 0x3d8

  if(res == FR_OK)
 8000c70:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d16b      	bne.n	8000d50 <AUDIO_StorageParse+0x104>
  {
    while(Appli_state == APPLICATION_READY)
 8000c78:	e066      	b.n	8000d48 <AUDIO_StorageParse+0xfc>
    {
      res = f_readdir(&dir, &fno);
 8000c7a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000c7e:	1d3b      	adds	r3, r7, #4
 8000c80:	4611      	mov	r1, r2
 8000c82:	4618      	mov	r0, r3
 8000c84:	f00e fb1f 	bl	800f2c6 <f_readdir>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
      if(res != FR_OK || fno.fname[0] == 0)
 8000c8e:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d15c      	bne.n	8000d50 <AUDIO_StorageParse+0x104>
 8000c96:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8000c9a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000c9e:	7d9b      	ldrb	r3, [r3, #22]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d055      	beq.n	8000d50 <AUDIO_StorageParse+0x104>
      {
        break;
      }
      if(fno.fname[0] == '.')
 8000ca4:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8000ca8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000cac:	7d9b      	ldrb	r3, [r3, #22]
 8000cae:	2b2e      	cmp	r3, #46	; 0x2e
 8000cb0:	d100      	bne.n	8000cb4 <AUDIO_StorageParse+0x68>
      {
        continue;
 8000cb2:	e049      	b.n	8000d48 <AUDIO_StorageParse+0xfc>
      }

      fn = fno.fname;
 8000cb4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000cb8:	3316      	adds	r3, #22
 8000cba:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150

      if(FileList.ptr < FILEMGR_LIST_DEPDTH)
 8000cbe:	4b2d      	ldr	r3, [pc, #180]	; (8000d74 <AUDIO_StorageParse+0x128>)
 8000cc0:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	; 0x3d8
 8000cc4:	2b17      	cmp	r3, #23
 8000cc6:	d83f      	bhi.n	8000d48 <AUDIO_StorageParse+0xfc>
      {
        if((fno.fattrib & AM_DIR) == 0)
 8000cc8:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8000ccc:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000cd0:	7a1b      	ldrb	r3, [r3, #8]
 8000cd2:	f003 0310 	and.w	r3, r3, #16
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d136      	bne.n	8000d48 <AUDIO_StorageParse+0xfc>
        {
          if((strstr(fn, "wav")) || (strstr(fn, "WAV")))
 8000cda:	4927      	ldr	r1, [pc, #156]	; (8000d78 <AUDIO_StorageParse+0x12c>)
 8000cdc:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 8000ce0:	f00f f85f 	bl	800fda2 <strstr>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d107      	bne.n	8000cfa <AUDIO_StorageParse+0xae>
 8000cea:	4924      	ldr	r1, [pc, #144]	; (8000d7c <AUDIO_StorageParse+0x130>)
 8000cec:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 8000cf0:	f00f f857 	bl	800fda2 <strstr>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d026      	beq.n	8000d48 <AUDIO_StorageParse+0xfc>
          {
            strncpy((char *)FileList.file[FileList.ptr].name, (char *)fn, FILEMGR_FILE_NAME_SIZE);
 8000cfa:	4b1e      	ldr	r3, [pc, #120]	; (8000d74 <AUDIO_StorageParse+0x128>)
 8000cfc:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	; 0x3d8
 8000d00:	461a      	mov	r2, r3
 8000d02:	4613      	mov	r3, r2
 8000d04:	009b      	lsls	r3, r3, #2
 8000d06:	4413      	add	r3, r2
 8000d08:	00db      	lsls	r3, r3, #3
 8000d0a:	4413      	add	r3, r2
 8000d0c:	4a19      	ldr	r2, [pc, #100]	; (8000d74 <AUDIO_StorageParse+0x128>)
 8000d0e:	4413      	add	r3, r2
 8000d10:	3301      	adds	r3, #1
 8000d12:	2228      	movs	r2, #40	; 0x28
 8000d14:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f00f f82f 	bl	800fd7c <strncpy>
            FileList.file[FileList.ptr].type = FILETYPE_FILE;
 8000d1e:	4b15      	ldr	r3, [pc, #84]	; (8000d74 <AUDIO_StorageParse+0x128>)
 8000d20:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	; 0x3d8
 8000d24:	461a      	mov	r2, r3
 8000d26:	4913      	ldr	r1, [pc, #76]	; (8000d74 <AUDIO_StorageParse+0x128>)
 8000d28:	4613      	mov	r3, r2
 8000d2a:	009b      	lsls	r3, r3, #2
 8000d2c:	4413      	add	r3, r2
 8000d2e:	00db      	lsls	r3, r3, #3
 8000d30:	4413      	add	r3, r2
 8000d32:	440b      	add	r3, r1
 8000d34:	2201      	movs	r2, #1
 8000d36:	701a      	strb	r2, [r3, #0]
            FileList.ptr++;
 8000d38:	4b0e      	ldr	r3, [pc, #56]	; (8000d74 <AUDIO_StorageParse+0x128>)
 8000d3a:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	; 0x3d8
 8000d3e:	3301      	adds	r3, #1
 8000d40:	b29a      	uxth	r2, r3
 8000d42:	4b0c      	ldr	r3, [pc, #48]	; (8000d74 <AUDIO_StorageParse+0x128>)
 8000d44:	f8a3 23d8 	strh.w	r2, [r3, #984]	; 0x3d8
    while(Appli_state == APPLICATION_READY)
 8000d48:	4b0d      	ldr	r3, [pc, #52]	; (8000d80 <AUDIO_StorageParse+0x134>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	2b02      	cmp	r3, #2
 8000d4e:	d094      	beq.n	8000c7a <AUDIO_StorageParse+0x2e>
          }
        }
      }
    }
  }
  NumObs = FileList.ptr;
 8000d50:	4b08      	ldr	r3, [pc, #32]	; (8000d74 <AUDIO_StorageParse+0x128>)
 8000d52:	f8b3 23d8 	ldrh.w	r2, [r3, #984]	; 0x3d8
 8000d56:	4b0b      	ldr	r3, [pc, #44]	; (8000d84 <AUDIO_StorageParse+0x138>)
 8000d58:	801a      	strh	r2, [r3, #0]
  f_closedir(&dir);
 8000d5a:	1d3b      	adds	r3, r7, #4
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f00e fa8c 	bl	800f27a <f_closedir>
  return res;
 8000d62:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	20001974 	.word	0x20001974
 8000d74:	20001334 	.word	0x20001334
 8000d78:	0800ff14 	.word	0x0800ff14
 8000d7c:	0800ff18 	.word	0x0800ff18
 8000d80:	200021b8 	.word	0x200021b8
 8000d84:	200001d6 	.word	0x200001d6

08000d88 <AUDIO_GetWavObjectNumber>:

uint16_t AUDIO_GetWavObjectNumber(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
	if (AUDIO_StorageParse() == FR_OK) return NumObs;
 8000d8c:	f7ff ff5e 	bl	8000c4c <AUDIO_StorageParse>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d102      	bne.n	8000d9c <AUDIO_GetWavObjectNumber+0x14>
 8000d96:	4b02      	ldr	r3, [pc, #8]	; (8000da0 <AUDIO_GetWavObjectNumber+0x18>)
 8000d98:	881b      	ldrh	r3, [r3, #0]
 8000d9a:	e7ff      	b.n	8000d9c <AUDIO_GetWavObjectNumber+0x14>
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	200001d6 	.word	0x200001d6

08000da4 <Mount_USB>:

void Mount_USB (void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
	fresult = f_mount(&USBHFatFS, USBHPath, 1);
 8000da8:	2201      	movs	r2, #1
 8000daa:	4905      	ldr	r1, [pc, #20]	; (8000dc0 <Mount_USB+0x1c>)
 8000dac:	4805      	ldr	r0, [pc, #20]	; (8000dc4 <Mount_USB+0x20>)
 8000dae:	f00d fbfd 	bl	800e5ac <f_mount>
 8000db2:	4603      	mov	r3, r0
 8000db4:	461a      	mov	r2, r3
 8000db6:	4b04      	ldr	r3, [pc, #16]	; (8000dc8 <Mount_USB+0x24>)
 8000db8:	701a      	strb	r2, [r3, #0]
}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	20001974 	.word	0x20001974
 8000dc4:	20001978 	.word	0x20001978
 8000dc8:	200001d4 	.word	0x200001d4

08000dcc <cs43l22_Init>:
  *                       OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO .
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Init(uint16_t DeviceAddr, uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b086      	sub	sp, #24
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	607b      	str	r3, [r7, #4]
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	81fb      	strh	r3, [r7, #14]
 8000dd8:	460b      	mov	r3, r1
 8000dda:	81bb      	strh	r3, [r7, #12]
 8000ddc:	4613      	mov	r3, r2
 8000dde:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 8000de0:	2300      	movs	r3, #0
 8000de2:	617b      	str	r3, [r7, #20]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();     
 8000de4:	f7ff feca 	bl	8000b7c <AUDIO_IO_Init>
    
  /* Keep Codec powered OFF */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);  
 8000de8:	89fb      	ldrh	r3, [r7, #14]
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	2201      	movs	r2, #1
 8000dee:	2102      	movs	r1, #2
 8000df0:	4618      	mov	r0, r3
 8000df2:	f000 fb01 	bl	80013f8 <CODEC_IO_Write>
 8000df6:	4603      	mov	r3, r0
 8000df8:	461a      	mov	r2, r3
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	4413      	add	r3, r2
 8000dfe:	617b      	str	r3, [r7, #20]
  
  /*Save Output device for mute ON/OFF procedure*/
  switch (OutputDevice)
 8000e00:	89bb      	ldrh	r3, [r7, #12]
 8000e02:	3b01      	subs	r3, #1
 8000e04:	2b03      	cmp	r3, #3
 8000e06:	d81b      	bhi.n	8000e40 <cs43l22_Init+0x74>
 8000e08:	a201      	add	r2, pc, #4	; (adr r2, 8000e10 <cs43l22_Init+0x44>)
 8000e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e0e:	bf00      	nop
 8000e10:	08000e21 	.word	0x08000e21
 8000e14:	08000e29 	.word	0x08000e29
 8000e18:	08000e31 	.word	0x08000e31
 8000e1c:	08000e39 	.word	0x08000e39
  {
  case OUTPUT_DEVICE_SPEAKER:
    OutputDev = 0xFA;
 8000e20:	4b5b      	ldr	r3, [pc, #364]	; (8000f90 <cs43l22_Init+0x1c4>)
 8000e22:	22fa      	movs	r2, #250	; 0xfa
 8000e24:	701a      	strb	r2, [r3, #0]
    break;
 8000e26:	e00f      	b.n	8000e48 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_HEADPHONE:
    OutputDev = 0xAF;
 8000e28:	4b59      	ldr	r3, [pc, #356]	; (8000f90 <cs43l22_Init+0x1c4>)
 8000e2a:	22af      	movs	r2, #175	; 0xaf
 8000e2c:	701a      	strb	r2, [r3, #0]
    break;
 8000e2e:	e00b      	b.n	8000e48 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_BOTH:
    OutputDev = 0xAA;
 8000e30:	4b57      	ldr	r3, [pc, #348]	; (8000f90 <cs43l22_Init+0x1c4>)
 8000e32:	22aa      	movs	r2, #170	; 0xaa
 8000e34:	701a      	strb	r2, [r3, #0]
    break;
 8000e36:	e007      	b.n	8000e48 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_AUTO:
    OutputDev = 0x05;
 8000e38:	4b55      	ldr	r3, [pc, #340]	; (8000f90 <cs43l22_Init+0x1c4>)
 8000e3a:	2205      	movs	r2, #5
 8000e3c:	701a      	strb	r2, [r3, #0]
    break;    
 8000e3e:	e003      	b.n	8000e48 <cs43l22_Init+0x7c>
    
  default:
    OutputDev = 0x05;
 8000e40:	4b53      	ldr	r3, [pc, #332]	; (8000f90 <cs43l22_Init+0x1c4>)
 8000e42:	2205      	movs	r2, #5
 8000e44:	701a      	strb	r2, [r3, #0]
    break;    
 8000e46:	bf00      	nop
  }
  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8000e48:	89fb      	ldrh	r3, [r7, #14]
 8000e4a:	b2db      	uxtb	r3, r3
 8000e4c:	4a50      	ldr	r2, [pc, #320]	; (8000f90 <cs43l22_Init+0x1c4>)
 8000e4e:	7812      	ldrb	r2, [r2, #0]
 8000e50:	b2d2      	uxtb	r2, r2
 8000e52:	2104      	movs	r1, #4
 8000e54:	4618      	mov	r0, r3
 8000e56:	f000 facf 	bl	80013f8 <CODEC_IO_Write>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	4413      	add	r3, r2
 8000e62:	617b      	str	r3, [r7, #20]
  
  /* Clock configuration: Auto detection */  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_CLOCKING_CTL, 0x81);
 8000e64:	89fb      	ldrh	r3, [r7, #14]
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	2281      	movs	r2, #129	; 0x81
 8000e6a:	2105      	movs	r1, #5
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f000 fac3 	bl	80013f8 <CODEC_IO_Write>
 8000e72:	4603      	mov	r3, r0
 8000e74:	461a      	mov	r2, r3
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	4413      	add	r3, r2
 8000e7a:	617b      	str	r3, [r7, #20]
  
  /* Set the Slave Mode and the audio Standard */  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_INTERFACE_CTL1, CODEC_STANDARD);
 8000e7c:	89fb      	ldrh	r3, [r7, #14]
 8000e7e:	b2db      	uxtb	r3, r3
 8000e80:	2204      	movs	r2, #4
 8000e82:	2106      	movs	r1, #6
 8000e84:	4618      	mov	r0, r3
 8000e86:	f000 fab7 	bl	80013f8 <CODEC_IO_Write>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	4413      	add	r3, r2
 8000e92:	617b      	str	r3, [r7, #20]
  
  /* Set the Master volume */
  counter += cs43l22_SetVolume(DeviceAddr, Volume);
 8000e94:	7afa      	ldrb	r2, [r7, #11]
 8000e96:	89fb      	ldrh	r3, [r7, #14]
 8000e98:	4611      	mov	r1, r2
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f000 f964 	bl	8001168 <cs43l22_SetVolume>
 8000ea0:	4602      	mov	r2, r0
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	4413      	add	r3, r2
 8000ea6:	617b      	str	r3, [r7, #20]
  
  /* If the Speaker is enabled, set the Mono mode and volume attenuation level */
  if(OutputDevice != OUTPUT_DEVICE_HEADPHONE)
 8000ea8:	89bb      	ldrh	r3, [r7, #12]
 8000eaa:	2b02      	cmp	r3, #2
 8000eac:	d023      	beq.n	8000ef6 <cs43l22_Init+0x12a>
  {
    /* Set the Speaker Mono mode */  
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PLAYBACK_CTL2, 0x06);
 8000eae:	89fb      	ldrh	r3, [r7, #14]
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	2206      	movs	r2, #6
 8000eb4:	210f      	movs	r1, #15
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f000 fa9e 	bl	80013f8 <CODEC_IO_Write>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	461a      	mov	r2, r3
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	4413      	add	r3, r2
 8000ec4:	617b      	str	r3, [r7, #20]
    
    /* Set the Speaker attenuation level */  
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_A_VOL, 0x00);
 8000ec6:	89fb      	ldrh	r3, [r7, #14]
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	2200      	movs	r2, #0
 8000ecc:	2124      	movs	r1, #36	; 0x24
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f000 fa92 	bl	80013f8 <CODEC_IO_Write>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	461a      	mov	r2, r3
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	4413      	add	r3, r2
 8000edc:	617b      	str	r3, [r7, #20]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_B_VOL, 0x00);
 8000ede:	89fb      	ldrh	r3, [r7, #14]
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	2125      	movs	r1, #37	; 0x25
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f000 fa86 	bl	80013f8 <CODEC_IO_Write>
 8000eec:	4603      	mov	r3, r0
 8000eee:	461a      	mov	r2, r3
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	4413      	add	r3, r2
 8000ef4:	617b      	str	r3, [r7, #20]
  off the I2S peripheral MCLK clock (which is the operating clock for Codec).
  If this delay is not inserted, then the codec will not shut down properly and
  it results in high noise after shut down. */
  
  /* Disable the analog soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_ANALOG_ZC_SR_SETT, 0x00);
 8000ef6:	89fb      	ldrh	r3, [r7, #14]
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	2200      	movs	r2, #0
 8000efc:	210a      	movs	r1, #10
 8000efe:	4618      	mov	r0, r3
 8000f00:	f000 fa7a 	bl	80013f8 <CODEC_IO_Write>
 8000f04:	4603      	mov	r3, r0
 8000f06:	461a      	mov	r2, r3
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	617b      	str	r3, [r7, #20]
  /* Disable the digital soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 8000f0e:	89fb      	ldrh	r3, [r7, #14]
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	2204      	movs	r2, #4
 8000f14:	210e      	movs	r1, #14
 8000f16:	4618      	mov	r0, r3
 8000f18:	f000 fa6e 	bl	80013f8 <CODEC_IO_Write>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	461a      	mov	r2, r3
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	4413      	add	r3, r2
 8000f24:	617b      	str	r3, [r7, #20]
  /* Disable the limiter attack level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_LIMIT_CTL1, 0x00);
 8000f26:	89fb      	ldrh	r3, [r7, #14]
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	2127      	movs	r1, #39	; 0x27
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f000 fa62 	bl	80013f8 <CODEC_IO_Write>
 8000f34:	4603      	mov	r3, r0
 8000f36:	461a      	mov	r2, r3
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	617b      	str	r3, [r7, #20]
  /* Adjust Bass and Treble levels */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_TONE_CTL, 0x0F);
 8000f3e:	89fb      	ldrh	r3, [r7, #14]
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	220f      	movs	r2, #15
 8000f44:	211f      	movs	r1, #31
 8000f46:	4618      	mov	r0, r3
 8000f48:	f000 fa56 	bl	80013f8 <CODEC_IO_Write>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	461a      	mov	r2, r3
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	4413      	add	r3, r2
 8000f54:	617b      	str	r3, [r7, #20]
  /* Adjust PCM volume level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMA_VOL, 0x0A);
 8000f56:	89fb      	ldrh	r3, [r7, #14]
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	220a      	movs	r2, #10
 8000f5c:	211a      	movs	r1, #26
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f000 fa4a 	bl	80013f8 <CODEC_IO_Write>
 8000f64:	4603      	mov	r3, r0
 8000f66:	461a      	mov	r2, r3
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	4413      	add	r3, r2
 8000f6c:	617b      	str	r3, [r7, #20]
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMB_VOL, 0x0A);
 8000f6e:	89fb      	ldrh	r3, [r7, #14]
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	220a      	movs	r2, #10
 8000f74:	211b      	movs	r1, #27
 8000f76:	4618      	mov	r0, r3
 8000f78:	f000 fa3e 	bl	80013f8 <CODEC_IO_Write>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	461a      	mov	r2, r3
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	4413      	add	r3, r2
 8000f84:	617b      	str	r3, [r7, #20]
  
  /* Return communication control value */
  return counter;  
 8000f86:	697b      	ldr	r3, [r7, #20]
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3718      	adds	r7, #24
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	200001d8 	.word	0x200001d8

08000f94 <cs43l22_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  None
  * @retval  None
  */
void cs43l22_DeInit(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 8000f98:	f7ff fe28 	bl	8000bec <AUDIO_IO_DeInit>
}
 8000f9c:	bf00      	nop
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <cs43l22_ReadID>:
  * @brief  Get the CS43L22 ID.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval The CS43L22 ID 
  */
uint32_t cs43l22_ReadID(uint16_t DeviceAddr)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	80fb      	strh	r3, [r7, #6]
  uint8_t Value;
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init(); 
 8000faa:	f7ff fde7 	bl	8000b7c <AUDIO_IO_Init>
  
  Value = AUDIO_IO_Read(DeviceAddr, CS43L22_CHIPID_ADDR);
 8000fae:	88fb      	ldrh	r3, [r7, #6]
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	2101      	movs	r1, #1
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff fe34 	bl	8000c22 <AUDIO_IO_Read>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	73fb      	strb	r3, [r7, #15]
  Value = (Value & CS43L22_ID_MASK);
 8000fbe:	7bfb      	ldrb	r3, [r7, #15]
 8000fc0:	f023 0307 	bic.w	r3, r3, #7
 8000fc4:	73fb      	strb	r3, [r7, #15]
  
  return((uint32_t) Value);
 8000fc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3710      	adds	r7, #16
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <cs43l22_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	6039      	str	r1, [r7, #0]
 8000fda:	80fb      	strh	r3, [r7, #6]
 8000fdc:	4613      	mov	r3, r2
 8000fde:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	60fb      	str	r3, [r7, #12]
  
  if(Is_cs43l22_Stop == 1)
 8000fe4:	4b16      	ldr	r3, [pc, #88]	; (8001040 <cs43l22_Play+0x70>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	d123      	bne.n	8001034 <cs43l22_Play+0x64>
  {
    /* Enable the digital soft ramp */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x06);
 8000fec:	88fb      	ldrh	r3, [r7, #6]
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	2206      	movs	r2, #6
 8000ff2:	210e      	movs	r1, #14
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f000 f9ff 	bl	80013f8 <CODEC_IO_Write>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	4413      	add	r3, r2
 8001002:	60fb      	str	r3, [r7, #12]
  
    /* Enable Output device */  
    counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8001004:	88fb      	ldrh	r3, [r7, #6]
 8001006:	2100      	movs	r1, #0
 8001008:	4618      	mov	r0, r3
 800100a:	f000 f919 	bl	8001240 <cs43l22_SetMute>
 800100e:	4602      	mov	r2, r0
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	4413      	add	r3, r2
 8001014:	60fb      	str	r3, [r7, #12]
    
    /* Power on the Codec */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E);  
 8001016:	88fb      	ldrh	r3, [r7, #6]
 8001018:	b2db      	uxtb	r3, r3
 800101a:	229e      	movs	r2, #158	; 0x9e
 800101c:	2102      	movs	r1, #2
 800101e:	4618      	mov	r0, r3
 8001020:	f000 f9ea 	bl	80013f8 <CODEC_IO_Write>
 8001024:	4603      	mov	r3, r0
 8001026:	461a      	mov	r2, r3
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	4413      	add	r3, r2
 800102c:	60fb      	str	r3, [r7, #12]
    Is_cs43l22_Stop = 0;
 800102e:	4b04      	ldr	r3, [pc, #16]	; (8001040 <cs43l22_Play+0x70>)
 8001030:	2200      	movs	r2, #0
 8001032:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return communication control value */
  return counter;  
 8001034:	68fb      	ldr	r3, [r7, #12]
}
 8001036:	4618      	mov	r0, r3
 8001038:	3710      	adds	r7, #16
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	20000034 	.word	0x20000034

08001044 <cs43l22_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Pause(uint16_t DeviceAddr)
{  
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800104e:	2300      	movs	r3, #0
 8001050:	60fb      	str	r3, [r7, #12]
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8001052:	88fb      	ldrh	r3, [r7, #6]
 8001054:	2101      	movs	r1, #1
 8001056:	4618      	mov	r0, r3
 8001058:	f000 f8f2 	bl	8001240 <cs43l22_SetMute>
 800105c:	4602      	mov	r2, r0
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	4413      	add	r3, r2
 8001062:	60fb      	str	r3, [r7, #12]
  
  /* Put the Codec in Power save mode */    
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);
 8001064:	88fb      	ldrh	r3, [r7, #6]
 8001066:	b2db      	uxtb	r3, r3
 8001068:	2201      	movs	r2, #1
 800106a:	2102      	movs	r1, #2
 800106c:	4618      	mov	r0, r3
 800106e:	f000 f9c3 	bl	80013f8 <CODEC_IO_Write>
 8001072:	4603      	mov	r3, r0
 8001074:	461a      	mov	r2, r3
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	4413      	add	r3, r2
 800107a:	60fb      	str	r3, [r7, #12]
 
  return counter;
 800107c:	68fb      	ldr	r3, [r7, #12]
}
 800107e:	4618      	mov	r0, r3
 8001080:	3710      	adds	r7, #16
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
	...

08001088 <cs43l22_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Resume(uint16_t DeviceAddr)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8001092:	2300      	movs	r3, #0
 8001094:	60fb      	str	r3, [r7, #12]
  volatile uint32_t index = 0x00;
 8001096:	2300      	movs	r3, #0
 8001098:	60bb      	str	r3, [r7, #8]
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 800109a:	88fb      	ldrh	r3, [r7, #6]
 800109c:	2100      	movs	r1, #0
 800109e:	4618      	mov	r0, r3
 80010a0:	f000 f8ce 	bl	8001240 <cs43l22_SetMute>
 80010a4:	4602      	mov	r2, r0
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	4413      	add	r3, r2
 80010aa:	60fb      	str	r3, [r7, #12]

  for(index = 0x00; index < 0xFF; index++);
 80010ac:	2300      	movs	r3, #0
 80010ae:	60bb      	str	r3, [r7, #8]
 80010b0:	e002      	b.n	80010b8 <cs43l22_Resume+0x30>
 80010b2:	68bb      	ldr	r3, [r7, #8]
 80010b4:	3301      	adds	r3, #1
 80010b6:	60bb      	str	r3, [r7, #8]
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	2bfe      	cmp	r3, #254	; 0xfe
 80010bc:	d9f9      	bls.n	80010b2 <cs43l22_Resume+0x2a>
  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 80010be:	88fb      	ldrh	r3, [r7, #6]
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	4a0e      	ldr	r2, [pc, #56]	; (80010fc <cs43l22_Resume+0x74>)
 80010c4:	7812      	ldrb	r2, [r2, #0]
 80010c6:	b2d2      	uxtb	r2, r2
 80010c8:	2104      	movs	r1, #4
 80010ca:	4618      	mov	r0, r3
 80010cc:	f000 f994 	bl	80013f8 <CODEC_IO_Write>
 80010d0:	4603      	mov	r3, r0
 80010d2:	461a      	mov	r2, r3
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	4413      	add	r3, r2
 80010d8:	60fb      	str	r3, [r7, #12]

  /* Exit the Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E); 
 80010da:	88fb      	ldrh	r3, [r7, #6]
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	229e      	movs	r2, #158	; 0x9e
 80010e0:	2102      	movs	r1, #2
 80010e2:	4618      	mov	r0, r3
 80010e4:	f000 f988 	bl	80013f8 <CODEC_IO_Write>
 80010e8:	4603      	mov	r3, r0
 80010ea:	461a      	mov	r2, r3
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	4413      	add	r3, r2
 80010f0:	60fb      	str	r3, [r7, #12]
  
  return counter;
 80010f2:	68fb      	ldr	r3, [r7, #12]
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3710      	adds	r7, #16
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	200001d8 	.word	0x200001d8

08001100 <cs43l22_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	6039      	str	r1, [r7, #0]
 800110a:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800110c:	2300      	movs	r3, #0
 800110e:	60fb      	str	r3, [r7, #12]
  
  /* Mute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8001110:	88fb      	ldrh	r3, [r7, #6]
 8001112:	2101      	movs	r1, #1
 8001114:	4618      	mov	r0, r3
 8001116:	f000 f893 	bl	8001240 <cs43l22_SetMute>
 800111a:	4602      	mov	r2, r0
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	4413      	add	r3, r2
 8001120:	60fb      	str	r3, [r7, #12]

  /* Disable the digital soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 8001122:	88fb      	ldrh	r3, [r7, #6]
 8001124:	b2db      	uxtb	r3, r3
 8001126:	2204      	movs	r2, #4
 8001128:	210e      	movs	r1, #14
 800112a:	4618      	mov	r0, r3
 800112c:	f000 f964 	bl	80013f8 <CODEC_IO_Write>
 8001130:	4603      	mov	r3, r0
 8001132:	461a      	mov	r2, r3
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	4413      	add	r3, r2
 8001138:	60fb      	str	r3, [r7, #12]
  
  /* Power down the DAC and the speaker (PMDAC and PMSPK bits)*/
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9F);
 800113a:	88fb      	ldrh	r3, [r7, #6]
 800113c:	b2db      	uxtb	r3, r3
 800113e:	229f      	movs	r2, #159	; 0x9f
 8001140:	2102      	movs	r1, #2
 8001142:	4618      	mov	r0, r3
 8001144:	f000 f958 	bl	80013f8 <CODEC_IO_Write>
 8001148:	4603      	mov	r3, r0
 800114a:	461a      	mov	r2, r3
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	4413      	add	r3, r2
 8001150:	60fb      	str	r3, [r7, #12]
  
  Is_cs43l22_Stop = 1;
 8001152:	4b04      	ldr	r3, [pc, #16]	; (8001164 <cs43l22_Stop+0x64>)
 8001154:	2201      	movs	r2, #1
 8001156:	701a      	strb	r2, [r3, #0]
  return counter;    
 8001158:	68fb      	ldr	r3, [r7, #12]
}
 800115a:	4618      	mov	r0, r3
 800115c:	3710      	adds	r7, #16
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	20000034 	.word	0x20000034

08001168 <cs43l22_SetVolume>:
  *                description for more details).
  *         
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	4603      	mov	r3, r0
 8001170:	460a      	mov	r2, r1
 8001172:	80fb      	strh	r3, [r7, #6]
 8001174:	4613      	mov	r3, r2
 8001176:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8001178:	2300      	movs	r3, #0
 800117a:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 800117c:	797b      	ldrb	r3, [r7, #5]
 800117e:	2b64      	cmp	r3, #100	; 0x64
 8001180:	d80b      	bhi.n	800119a <cs43l22_SetVolume+0x32>
 8001182:	797a      	ldrb	r2, [r7, #5]
 8001184:	4613      	mov	r3, r2
 8001186:	021b      	lsls	r3, r3, #8
 8001188:	1a9b      	subs	r3, r3, r2
 800118a:	4a25      	ldr	r2, [pc, #148]	; (8001220 <cs43l22_SetVolume+0xb8>)
 800118c:	fb82 1203 	smull	r1, r2, r2, r3
 8001190:	1152      	asrs	r2, r2, #5
 8001192:	17db      	asrs	r3, r3, #31
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	b2db      	uxtb	r3, r3
 8001198:	e000      	b.n	800119c <cs43l22_SetVolume+0x34>
 800119a:	23ff      	movs	r3, #255	; 0xff
 800119c:	72fb      	strb	r3, [r7, #11]

  if(convertedvol > 0xE6)
 800119e:	7afb      	ldrb	r3, [r7, #11]
 80011a0:	2be6      	cmp	r3, #230	; 0xe6
 80011a2:	d91c      	bls.n	80011de <cs43l22_SetVolume+0x76>
  {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol - 0xE7); 
 80011a4:	88fb      	ldrh	r3, [r7, #6]
 80011a6:	b2d8      	uxtb	r0, r3
 80011a8:	7afb      	ldrb	r3, [r7, #11]
 80011aa:	3319      	adds	r3, #25
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	461a      	mov	r2, r3
 80011b0:	2120      	movs	r1, #32
 80011b2:	f000 f921 	bl	80013f8 <CODEC_IO_Write>
 80011b6:	4603      	mov	r3, r0
 80011b8:	461a      	mov	r2, r3
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	4413      	add	r3, r2
 80011be:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol - 0xE7);     
 80011c0:	88fb      	ldrh	r3, [r7, #6]
 80011c2:	b2d8      	uxtb	r0, r3
 80011c4:	7afb      	ldrb	r3, [r7, #11]
 80011c6:	3319      	adds	r3, #25
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	461a      	mov	r2, r3
 80011cc:	2121      	movs	r1, #33	; 0x21
 80011ce:	f000 f913 	bl	80013f8 <CODEC_IO_Write>
 80011d2:	4603      	mov	r3, r0
 80011d4:	461a      	mov	r2, r3
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	4413      	add	r3, r2
 80011da:	60fb      	str	r3, [r7, #12]
 80011dc:	e01b      	b.n	8001216 <cs43l22_SetVolume+0xae>
  }
  else
  {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol + 0x19); 
 80011de:	88fb      	ldrh	r3, [r7, #6]
 80011e0:	b2d8      	uxtb	r0, r3
 80011e2:	7afb      	ldrb	r3, [r7, #11]
 80011e4:	3319      	adds	r3, #25
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	461a      	mov	r2, r3
 80011ea:	2120      	movs	r1, #32
 80011ec:	f000 f904 	bl	80013f8 <CODEC_IO_Write>
 80011f0:	4603      	mov	r3, r0
 80011f2:	461a      	mov	r2, r3
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	4413      	add	r3, r2
 80011f8:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol + 0x19); 
 80011fa:	88fb      	ldrh	r3, [r7, #6]
 80011fc:	b2d8      	uxtb	r0, r3
 80011fe:	7afb      	ldrb	r3, [r7, #11]
 8001200:	3319      	adds	r3, #25
 8001202:	b2db      	uxtb	r3, r3
 8001204:	461a      	mov	r2, r3
 8001206:	2121      	movs	r1, #33	; 0x21
 8001208:	f000 f8f6 	bl	80013f8 <CODEC_IO_Write>
 800120c:	4603      	mov	r3, r0
 800120e:	461a      	mov	r2, r3
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	4413      	add	r3, r2
 8001214:	60fb      	str	r3, [r7, #12]
  }

  return counter;
 8001216:	68fb      	ldr	r3, [r7, #12]
}
 8001218:	4618      	mov	r0, r3
 800121a:	3710      	adds	r7, #16
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	51eb851f 	.word	0x51eb851f

08001224 <cs43l22_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.   
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	6039      	str	r1, [r7, #0]
 800122e:	80fb      	strh	r3, [r7, #6]
  return 0;
 8001230:	2300      	movs	r3, #0
}
 8001232:	4618      	mov	r0, r3
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
	...

08001240 <cs43l22_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	4603      	mov	r3, r0
 8001248:	6039      	str	r1, [r7, #0]
 800124a:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800124c:	2300      	movs	r3, #0
 800124e:	60fb      	str	r3, [r7, #12]
  
  /* Set the Mute mode */
  if(Cmd == AUDIO_MUTE_ON)
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	2b01      	cmp	r3, #1
 8001254:	d124      	bne.n	80012a0 <cs43l22_SetMute+0x60>
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFF);
 8001256:	88fb      	ldrh	r3, [r7, #6]
 8001258:	b2db      	uxtb	r3, r3
 800125a:	22ff      	movs	r2, #255	; 0xff
 800125c:	2104      	movs	r1, #4
 800125e:	4618      	mov	r0, r3
 8001260:	f000 f8ca 	bl	80013f8 <CODEC_IO_Write>
 8001264:	4603      	mov	r3, r0
 8001266:	461a      	mov	r2, r3
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	4413      	add	r3, r2
 800126c:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x01);
 800126e:	88fb      	ldrh	r3, [r7, #6]
 8001270:	b2db      	uxtb	r3, r3
 8001272:	2201      	movs	r2, #1
 8001274:	2122      	movs	r1, #34	; 0x22
 8001276:	4618      	mov	r0, r3
 8001278:	f000 f8be 	bl	80013f8 <CODEC_IO_Write>
 800127c:	4603      	mov	r3, r0
 800127e:	461a      	mov	r2, r3
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	4413      	add	r3, r2
 8001284:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x01);
 8001286:	88fb      	ldrh	r3, [r7, #6]
 8001288:	b2db      	uxtb	r3, r3
 800128a:	2201      	movs	r2, #1
 800128c:	2123      	movs	r1, #35	; 0x23
 800128e:	4618      	mov	r0, r3
 8001290:	f000 f8b2 	bl	80013f8 <CODEC_IO_Write>
 8001294:	4603      	mov	r3, r0
 8001296:	461a      	mov	r2, r3
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	4413      	add	r3, r2
 800129c:	60fb      	str	r3, [r7, #12]
 800129e:	e025      	b.n	80012ec <cs43l22_SetMute+0xac>
  }
  else /* AUDIO_MUTE_OFF Disable the Mute */
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x00);
 80012a0:	88fb      	ldrh	r3, [r7, #6]
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	2200      	movs	r2, #0
 80012a6:	2122      	movs	r1, #34	; 0x22
 80012a8:	4618      	mov	r0, r3
 80012aa:	f000 f8a5 	bl	80013f8 <CODEC_IO_Write>
 80012ae:	4603      	mov	r3, r0
 80012b0:	461a      	mov	r2, r3
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	4413      	add	r3, r2
 80012b6:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x00);
 80012b8:	88fb      	ldrh	r3, [r7, #6]
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	2200      	movs	r2, #0
 80012be:	2123      	movs	r1, #35	; 0x23
 80012c0:	4618      	mov	r0, r3
 80012c2:	f000 f899 	bl	80013f8 <CODEC_IO_Write>
 80012c6:	4603      	mov	r3, r0
 80012c8:	461a      	mov	r2, r3
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	4413      	add	r3, r2
 80012ce:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 80012d0:	88fb      	ldrh	r3, [r7, #6]
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	4a08      	ldr	r2, [pc, #32]	; (80012f8 <cs43l22_SetMute+0xb8>)
 80012d6:	7812      	ldrb	r2, [r2, #0]
 80012d8:	b2d2      	uxtb	r2, r2
 80012da:	2104      	movs	r1, #4
 80012dc:	4618      	mov	r0, r3
 80012de:	f000 f88b 	bl	80013f8 <CODEC_IO_Write>
 80012e2:	4603      	mov	r3, r0
 80012e4:	461a      	mov	r2, r3
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	4413      	add	r3, r2
 80012ea:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 80012ec:	68fb      	ldr	r3, [r7, #12]
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3710      	adds	r7, #16
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	200001d8 	.word	0x200001d8

080012fc <cs43l22_SetOutputMode>:
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	460a      	mov	r2, r1
 8001306:	80fb      	strh	r3, [r7, #6]
 8001308:	4613      	mov	r3, r2
 800130a:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 800130c:	2300      	movs	r3, #0
 800130e:	60fb      	str	r3, [r7, #12]
  
  switch (Output) 
 8001310:	797b      	ldrb	r3, [r7, #5]
 8001312:	3b01      	subs	r3, #1
 8001314:	2b03      	cmp	r3, #3
 8001316:	d84b      	bhi.n	80013b0 <cs43l22_SetOutputMode+0xb4>
 8001318:	a201      	add	r2, pc, #4	; (adr r2, 8001320 <cs43l22_SetOutputMode+0x24>)
 800131a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800131e:	bf00      	nop
 8001320:	08001331 	.word	0x08001331
 8001324:	08001351 	.word	0x08001351
 8001328:	08001371 	.word	0x08001371
 800132c:	08001391 	.word	0x08001391
  {
    case OUTPUT_DEVICE_SPEAKER:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFA); /* SPK always ON & HP always OFF */
 8001330:	88fb      	ldrh	r3, [r7, #6]
 8001332:	b2db      	uxtb	r3, r3
 8001334:	22fa      	movs	r2, #250	; 0xfa
 8001336:	2104      	movs	r1, #4
 8001338:	4618      	mov	r0, r3
 800133a:	f000 f85d 	bl	80013f8 <CODEC_IO_Write>
 800133e:	4603      	mov	r3, r0
 8001340:	461a      	mov	r2, r3
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	4413      	add	r3, r2
 8001346:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xFA;
 8001348:	4b24      	ldr	r3, [pc, #144]	; (80013dc <cs43l22_SetOutputMode+0xe0>)
 800134a:	22fa      	movs	r2, #250	; 0xfa
 800134c:	701a      	strb	r2, [r3, #0]
      break;
 800134e:	e03f      	b.n	80013d0 <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_HEADPHONE:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xAF); /* SPK always OFF & HP always ON */
 8001350:	88fb      	ldrh	r3, [r7, #6]
 8001352:	b2db      	uxtb	r3, r3
 8001354:	22af      	movs	r2, #175	; 0xaf
 8001356:	2104      	movs	r1, #4
 8001358:	4618      	mov	r0, r3
 800135a:	f000 f84d 	bl	80013f8 <CODEC_IO_Write>
 800135e:	4603      	mov	r3, r0
 8001360:	461a      	mov	r2, r3
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	4413      	add	r3, r2
 8001366:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xAF;
 8001368:	4b1c      	ldr	r3, [pc, #112]	; (80013dc <cs43l22_SetOutputMode+0xe0>)
 800136a:	22af      	movs	r2, #175	; 0xaf
 800136c:	701a      	strb	r2, [r3, #0]
      break;
 800136e:	e02f      	b.n	80013d0 <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_BOTH:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xAA); /* SPK always ON & HP always ON */
 8001370:	88fb      	ldrh	r3, [r7, #6]
 8001372:	b2db      	uxtb	r3, r3
 8001374:	22aa      	movs	r2, #170	; 0xaa
 8001376:	2104      	movs	r1, #4
 8001378:	4618      	mov	r0, r3
 800137a:	f000 f83d 	bl	80013f8 <CODEC_IO_Write>
 800137e:	4603      	mov	r3, r0
 8001380:	461a      	mov	r2, r3
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	4413      	add	r3, r2
 8001386:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xAA;
 8001388:	4b14      	ldr	r3, [pc, #80]	; (80013dc <cs43l22_SetOutputMode+0xe0>)
 800138a:	22aa      	movs	r2, #170	; 0xaa
 800138c:	701a      	strb	r2, [r3, #0]
      break;
 800138e:	e01f      	b.n	80013d0 <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_AUTO:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0x05); /* Detect the HP or the SPK automatically */
 8001390:	88fb      	ldrh	r3, [r7, #6]
 8001392:	b2db      	uxtb	r3, r3
 8001394:	2205      	movs	r2, #5
 8001396:	2104      	movs	r1, #4
 8001398:	4618      	mov	r0, r3
 800139a:	f000 f82d 	bl	80013f8 <CODEC_IO_Write>
 800139e:	4603      	mov	r3, r0
 80013a0:	461a      	mov	r2, r3
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	4413      	add	r3, r2
 80013a6:	60fb      	str	r3, [r7, #12]
      OutputDev = 0x05;
 80013a8:	4b0c      	ldr	r3, [pc, #48]	; (80013dc <cs43l22_SetOutputMode+0xe0>)
 80013aa:	2205      	movs	r2, #5
 80013ac:	701a      	strb	r2, [r3, #0]
      break;    
 80013ae:	e00f      	b.n	80013d0 <cs43l22_SetOutputMode+0xd4>
      
    default:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0x05); /* Detect the HP or the SPK automatically */
 80013b0:	88fb      	ldrh	r3, [r7, #6]
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	2205      	movs	r2, #5
 80013b6:	2104      	movs	r1, #4
 80013b8:	4618      	mov	r0, r3
 80013ba:	f000 f81d 	bl	80013f8 <CODEC_IO_Write>
 80013be:	4603      	mov	r3, r0
 80013c0:	461a      	mov	r2, r3
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	4413      	add	r3, r2
 80013c6:	60fb      	str	r3, [r7, #12]
      OutputDev = 0x05;
 80013c8:	4b04      	ldr	r3, [pc, #16]	; (80013dc <cs43l22_SetOutputMode+0xe0>)
 80013ca:	2205      	movs	r2, #5
 80013cc:	701a      	strb	r2, [r3, #0]
      break;
 80013ce:	bf00      	nop
  }  
  return counter;
 80013d0:	68fb      	ldr	r3, [r7, #12]
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3710      	adds	r7, #16
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	200001d8 	.word	0x200001d8

080013e0 <cs43l22_Reset>:
  * @brief Resets cs43l22 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Reset(uint16_t DeviceAddr)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	4603      	mov	r3, r0
 80013e8:	80fb      	strh	r3, [r7, #6]
  return 0;
 80013ea:	2300      	movs	r3, #0
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	4603      	mov	r3, r0
 8001400:	71fb      	strb	r3, [r7, #7]
 8001402:	460b      	mov	r3, r1
 8001404:	71bb      	strb	r3, [r7, #6]
 8001406:	4613      	mov	r3, r2
 8001408:	717b      	strb	r3, [r7, #5]
  uint32_t result = 0;
 800140a:	2300      	movs	r3, #0
 800140c:	60fb      	str	r3, [r7, #12]
  
  AUDIO_IO_Write(Addr, Reg, Value);
 800140e:	797a      	ldrb	r2, [r7, #5]
 8001410:	79b9      	ldrb	r1, [r7, #6]
 8001412:	79fb      	ldrb	r3, [r7, #7]
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff fbf0 	bl	8000bfa <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */  
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	b2db      	uxtb	r3, r3
}
 800141e:	4618      	mov	r0, r3
 8001420:	3710      	adds	r7, #16
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
	...

08001428 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800142c:	f000 fed6 	bl	80021dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001430:	f000 f830 	bl	8001494 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001434:	f000 f914 	bl	8001660 <MX_GPIO_Init>
  MX_DMA_Init();
 8001438:	f000 f8f2 	bl	8001620 <MX_DMA_Init>
  MX_I2S3_Init();
 800143c:	f000 f8c2 	bl	80015c4 <MX_I2S3_Init>
  MX_I2C1_Init();
 8001440:	f000 f892 	bl	8001568 <MX_I2C1_Init>
  MX_USB_HOST_Init();
 8001444:	f00e f89e 	bl	800f584 <MX_USB_HOST_Init>
  MX_FATFS_Init();
 8001448:	f007 fc8a 	bl	8008d60 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  MX_DriverVbusFS(0);
 800144c:	2000      	movs	r0, #0
 800144e:	f00e fbb5 	bl	800fbbc <MX_DriverVbusFS>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8001452:	f00e f8bd 	bl	800f5d0 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */

    // Check USB state
    if(Appli_state == APPLICATION_READY){
 8001456:	4b0c      	ldr	r3, [pc, #48]	; (8001488 <main+0x60>)
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	2b02      	cmp	r3, #2
 800145c:	d1f9      	bne.n	8001452 <main+0x2a>
    	Mount_USB();
 800145e:	f7ff fca1 	bl	8000da4 <Mount_USB>
    	AUDIO_PLAYER_Start(0);    // index 0 == first file
 8001462:	2000      	movs	r0, #0
 8001464:	f000 fcee 	bl	8001e44 <AUDIO_PLAYER_Start>

    	// check player running
    	while(!IsFinixhed){
 8001468:	e009      	b.n	800147e <main+0x56>
    		AUDIO_PLAYER_Process(TRUE); // auto play
 800146a:	2001      	movs	r0, #1
 800146c:	f000 fd4a 	bl	8001f04 <AUDIO_PLAYER_Process>
    		if (AudioState == AUDIO_STATE_STOP) {
 8001470:	4b06      	ldr	r3, [pc, #24]	; (800148c <main+0x64>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	2b09      	cmp	r3, #9
 8001476:	d102      	bne.n	800147e <main+0x56>
				IsFinixhed = 1;
 8001478:	4b05      	ldr	r3, [pc, #20]	; (8001490 <main+0x68>)
 800147a:	2201      	movs	r2, #1
 800147c:	601a      	str	r2, [r3, #0]
    	while(!IsFinixhed){
 800147e:	4b04      	ldr	r3, [pc, #16]	; (8001490 <main+0x68>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d0f1      	beq.n	800146a <main+0x42>
    MX_USB_HOST_Process();
 8001486:	e7e4      	b.n	8001452 <main+0x2a>
 8001488:	200021b8 	.word	0x200021b8
 800148c:	20001330 	.word	0x20001330
 8001490:	200002d8 	.word	0x200002d8

08001494 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b094      	sub	sp, #80	; 0x50
 8001498:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800149a:	f107 0320 	add.w	r3, r7, #32
 800149e:	2230      	movs	r2, #48	; 0x30
 80014a0:	2100      	movs	r1, #0
 80014a2:	4618      	mov	r0, r3
 80014a4:	f00e fc62 	bl	800fd6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014a8:	f107 030c 	add.w	r3, r7, #12
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	605a      	str	r2, [r3, #4]
 80014b2:	609a      	str	r2, [r3, #8]
 80014b4:	60da      	str	r2, [r3, #12]
 80014b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014b8:	2300      	movs	r3, #0
 80014ba:	60bb      	str	r3, [r7, #8]
 80014bc:	4b28      	ldr	r3, [pc, #160]	; (8001560 <SystemClock_Config+0xcc>)
 80014be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c0:	4a27      	ldr	r2, [pc, #156]	; (8001560 <SystemClock_Config+0xcc>)
 80014c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014c6:	6413      	str	r3, [r2, #64]	; 0x40
 80014c8:	4b25      	ldr	r3, [pc, #148]	; (8001560 <SystemClock_Config+0xcc>)
 80014ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014d0:	60bb      	str	r3, [r7, #8]
 80014d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014d4:	2300      	movs	r3, #0
 80014d6:	607b      	str	r3, [r7, #4]
 80014d8:	4b22      	ldr	r3, [pc, #136]	; (8001564 <SystemClock_Config+0xd0>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a21      	ldr	r2, [pc, #132]	; (8001564 <SystemClock_Config+0xd0>)
 80014de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014e2:	6013      	str	r3, [r2, #0]
 80014e4:	4b1f      	ldr	r3, [pc, #124]	; (8001564 <SystemClock_Config+0xd0>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014ec:	607b      	str	r3, [r7, #4]
 80014ee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014f0:	2301      	movs	r3, #1
 80014f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014f8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014fa:	2302      	movs	r3, #2
 80014fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001502:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001504:	2304      	movs	r3, #4
 8001506:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001508:	23c0      	movs	r3, #192	; 0xc0
 800150a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800150c:	2304      	movs	r3, #4
 800150e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001510:	2308      	movs	r3, #8
 8001512:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001514:	f107 0320 	add.w	r3, r7, #32
 8001518:	4618      	mov	r0, r3
 800151a:	f005 fb57 	bl	8006bcc <HAL_RCC_OscConfig>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001524:	f000 f9f6 	bl	8001914 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001528:	230f      	movs	r3, #15
 800152a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800152c:	2302      	movs	r3, #2
 800152e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001530:	2300      	movs	r3, #0
 8001532:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001534:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001538:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800153a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800153e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001540:	f107 030c 	add.w	r3, r7, #12
 8001544:	2103      	movs	r1, #3
 8001546:	4618      	mov	r0, r3
 8001548:	f005 fdb8 	bl	80070bc <HAL_RCC_ClockConfig>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001552:	f000 f9df 	bl	8001914 <Error_Handler>
  }
}
 8001556:	bf00      	nop
 8001558:	3750      	adds	r7, #80	; 0x50
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	40023800 	.word	0x40023800
 8001564:	40007000 	.word	0x40007000

08001568 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800156c:	4b12      	ldr	r3, [pc, #72]	; (80015b8 <MX_I2C1_Init+0x50>)
 800156e:	4a13      	ldr	r2, [pc, #76]	; (80015bc <MX_I2C1_Init+0x54>)
 8001570:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001572:	4b11      	ldr	r3, [pc, #68]	; (80015b8 <MX_I2C1_Init+0x50>)
 8001574:	4a12      	ldr	r2, [pc, #72]	; (80015c0 <MX_I2C1_Init+0x58>)
 8001576:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001578:	4b0f      	ldr	r3, [pc, #60]	; (80015b8 <MX_I2C1_Init+0x50>)
 800157a:	2200      	movs	r2, #0
 800157c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800157e:	4b0e      	ldr	r3, [pc, #56]	; (80015b8 <MX_I2C1_Init+0x50>)
 8001580:	2200      	movs	r2, #0
 8001582:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001584:	4b0c      	ldr	r3, [pc, #48]	; (80015b8 <MX_I2C1_Init+0x50>)
 8001586:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800158a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800158c:	4b0a      	ldr	r3, [pc, #40]	; (80015b8 <MX_I2C1_Init+0x50>)
 800158e:	2200      	movs	r2, #0
 8001590:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001592:	4b09      	ldr	r3, [pc, #36]	; (80015b8 <MX_I2C1_Init+0x50>)
 8001594:	2200      	movs	r2, #0
 8001596:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001598:	4b07      	ldr	r3, [pc, #28]	; (80015b8 <MX_I2C1_Init+0x50>)
 800159a:	2200      	movs	r2, #0
 800159c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800159e:	4b06      	ldr	r3, [pc, #24]	; (80015b8 <MX_I2C1_Init+0x50>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015a4:	4804      	ldr	r0, [pc, #16]	; (80015b8 <MX_I2C1_Init+0x50>)
 80015a6:	f003 fa73 	bl	8004a90 <HAL_I2C_Init>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80015b0:	f000 f9b0 	bl	8001914 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015b4:	bf00      	nop
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	200001dc 	.word	0x200001dc
 80015bc:	40005400 	.word	0x40005400
 80015c0:	000186a0 	.word	0x000186a0

080015c4 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80015c8:	4b13      	ldr	r3, [pc, #76]	; (8001618 <MX_I2S3_Init+0x54>)
 80015ca:	4a14      	ldr	r2, [pc, #80]	; (800161c <MX_I2S3_Init+0x58>)
 80015cc:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80015ce:	4b12      	ldr	r3, [pc, #72]	; (8001618 <MX_I2S3_Init+0x54>)
 80015d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015d4:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80015d6:	4b10      	ldr	r3, [pc, #64]	; (8001618 <MX_I2S3_Init+0x54>)
 80015d8:	2200      	movs	r2, #0
 80015da:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80015dc:	4b0e      	ldr	r3, [pc, #56]	; (8001618 <MX_I2S3_Init+0x54>)
 80015de:	2200      	movs	r2, #0
 80015e0:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80015e2:	4b0d      	ldr	r3, [pc, #52]	; (8001618 <MX_I2S3_Init+0x54>)
 80015e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015e8:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 80015ea:	4b0b      	ldr	r3, [pc, #44]	; (8001618 <MX_I2S3_Init+0x54>)
 80015ec:	f64a 4244 	movw	r2, #44100	; 0xac44
 80015f0:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80015f2:	4b09      	ldr	r3, [pc, #36]	; (8001618 <MX_I2S3_Init+0x54>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80015f8:	4b07      	ldr	r3, [pc, #28]	; (8001618 <MX_I2S3_Init+0x54>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80015fe:	4b06      	ldr	r3, [pc, #24]	; (8001618 <MX_I2S3_Init+0x54>)
 8001600:	2200      	movs	r2, #0
 8001602:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001604:	4804      	ldr	r0, [pc, #16]	; (8001618 <MX_I2S3_Init+0x54>)
 8001606:	f004 fa41 	bl	8005a8c <HAL_I2S_Init>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 8001610:	f000 f980 	bl	8001914 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001614:	bf00      	nop
 8001616:	bd80      	pop	{r7, pc}
 8001618:	20000230 	.word	0x20000230
 800161c:	40003c00 	.word	0x40003c00

08001620 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001626:	2300      	movs	r3, #0
 8001628:	607b      	str	r3, [r7, #4]
 800162a:	4b0c      	ldr	r3, [pc, #48]	; (800165c <MX_DMA_Init+0x3c>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162e:	4a0b      	ldr	r2, [pc, #44]	; (800165c <MX_DMA_Init+0x3c>)
 8001630:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001634:	6313      	str	r3, [r2, #48]	; 0x30
 8001636:	4b09      	ldr	r3, [pc, #36]	; (800165c <MX_DMA_Init+0x3c>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800163e:	607b      	str	r3, [r7, #4]
 8001640:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001642:	2200      	movs	r2, #0
 8001644:	2100      	movs	r1, #0
 8001646:	2010      	movs	r0, #16
 8001648:	f000 fee6 	bl	8002418 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800164c:	2010      	movs	r0, #16
 800164e:	f000 feff 	bl	8002450 <HAL_NVIC_EnableIRQ>

}
 8001652:	bf00      	nop
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	40023800 	.word	0x40023800

08001660 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b08a      	sub	sp, #40	; 0x28
 8001664:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001666:	f107 0314 	add.w	r3, r7, #20
 800166a:	2200      	movs	r2, #0
 800166c:	601a      	str	r2, [r3, #0]
 800166e:	605a      	str	r2, [r3, #4]
 8001670:	609a      	str	r2, [r3, #8]
 8001672:	60da      	str	r2, [r3, #12]
 8001674:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001676:	2300      	movs	r3, #0
 8001678:	613b      	str	r3, [r7, #16]
 800167a:	4b52      	ldr	r3, [pc, #328]	; (80017c4 <MX_GPIO_Init+0x164>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167e:	4a51      	ldr	r2, [pc, #324]	; (80017c4 <MX_GPIO_Init+0x164>)
 8001680:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001684:	6313      	str	r3, [r2, #48]	; 0x30
 8001686:	4b4f      	ldr	r3, [pc, #316]	; (80017c4 <MX_GPIO_Init+0x164>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800168e:	613b      	str	r3, [r7, #16]
 8001690:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001692:	2300      	movs	r3, #0
 8001694:	60fb      	str	r3, [r7, #12]
 8001696:	4b4b      	ldr	r3, [pc, #300]	; (80017c4 <MX_GPIO_Init+0x164>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169a:	4a4a      	ldr	r2, [pc, #296]	; (80017c4 <MX_GPIO_Init+0x164>)
 800169c:	f043 0304 	orr.w	r3, r3, #4
 80016a0:	6313      	str	r3, [r2, #48]	; 0x30
 80016a2:	4b48      	ldr	r3, [pc, #288]	; (80017c4 <MX_GPIO_Init+0x164>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a6:	f003 0304 	and.w	r3, r3, #4
 80016aa:	60fb      	str	r3, [r7, #12]
 80016ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ae:	2300      	movs	r3, #0
 80016b0:	60bb      	str	r3, [r7, #8]
 80016b2:	4b44      	ldr	r3, [pc, #272]	; (80017c4 <MX_GPIO_Init+0x164>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	4a43      	ldr	r2, [pc, #268]	; (80017c4 <MX_GPIO_Init+0x164>)
 80016b8:	f043 0301 	orr.w	r3, r3, #1
 80016bc:	6313      	str	r3, [r2, #48]	; 0x30
 80016be:	4b41      	ldr	r3, [pc, #260]	; (80017c4 <MX_GPIO_Init+0x164>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	f003 0301 	and.w	r3, r3, #1
 80016c6:	60bb      	str	r3, [r7, #8]
 80016c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016ca:	2300      	movs	r3, #0
 80016cc:	607b      	str	r3, [r7, #4]
 80016ce:	4b3d      	ldr	r3, [pc, #244]	; (80017c4 <MX_GPIO_Init+0x164>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d2:	4a3c      	ldr	r2, [pc, #240]	; (80017c4 <MX_GPIO_Init+0x164>)
 80016d4:	f043 0308 	orr.w	r3, r3, #8
 80016d8:	6313      	str	r3, [r2, #48]	; 0x30
 80016da:	4b3a      	ldr	r3, [pc, #232]	; (80017c4 <MX_GPIO_Init+0x164>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016de:	f003 0308 	and.w	r3, r3, #8
 80016e2:	607b      	str	r3, [r7, #4]
 80016e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016e6:	2300      	movs	r3, #0
 80016e8:	603b      	str	r3, [r7, #0]
 80016ea:	4b36      	ldr	r3, [pc, #216]	; (80017c4 <MX_GPIO_Init+0x164>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ee:	4a35      	ldr	r2, [pc, #212]	; (80017c4 <MX_GPIO_Init+0x164>)
 80016f0:	f043 0302 	orr.w	r3, r3, #2
 80016f4:	6313      	str	r3, [r2, #48]	; 0x30
 80016f6:	4b33      	ldr	r3, [pc, #204]	; (80017c4 <MX_GPIO_Init+0x164>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fa:	f003 0302 	and.w	r3, r3, #2
 80016fe:	603b      	str	r3, [r7, #0]
 8001700:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8001702:	2200      	movs	r2, #0
 8001704:	2101      	movs	r1, #1
 8001706:	4830      	ldr	r0, [pc, #192]	; (80017c8 <MX_GPIO_Init+0x168>)
 8001708:	f001 fd86 	bl	8003218 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800170c:	2200      	movs	r2, #0
 800170e:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001712:	482e      	ldr	r0, [pc, #184]	; (80017cc <MX_GPIO_Init+0x16c>)
 8001714:	f001 fd80 	bl	8003218 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001718:	2301      	movs	r3, #1
 800171a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800171c:	2301      	movs	r3, #1
 800171e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001720:	2300      	movs	r3, #0
 8001722:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001724:	2300      	movs	r3, #0
 8001726:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001728:	f107 0314 	add.w	r3, r7, #20
 800172c:	4619      	mov	r1, r3
 800172e:	4826      	ldr	r0, [pc, #152]	; (80017c8 <MX_GPIO_Init+0x168>)
 8001730:	f001 fada 	bl	8002ce8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001734:	232f      	movs	r3, #47	; 0x2f
 8001736:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001738:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800173c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800173e:	2302      	movs	r3, #2
 8001740:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001742:	f107 0314 	add.w	r3, r7, #20
 8001746:	4619      	mov	r1, r3
 8001748:	4821      	ldr	r0, [pc, #132]	; (80017d0 <MX_GPIO_Init+0x170>)
 800174a:	f001 facd 	bl	8002ce8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800174e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001752:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001754:	2301      	movs	r3, #1
 8001756:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001758:	2300      	movs	r3, #0
 800175a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175c:	2300      	movs	r3, #0
 800175e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001760:	f107 0314 	add.w	r3, r7, #20
 8001764:	4619      	mov	r1, r3
 8001766:	4819      	ldr	r0, [pc, #100]	; (80017cc <MX_GPIO_Init+0x16c>)
 8001768:	f001 fabe 	bl	8002ce8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800176c:	2200      	movs	r2, #0
 800176e:	2100      	movs	r1, #0
 8001770:	2006      	movs	r0, #6
 8001772:	f000 fe51 	bl	8002418 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001776:	2006      	movs	r0, #6
 8001778:	f000 fe6a 	bl	8002450 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800177c:	2200      	movs	r2, #0
 800177e:	2100      	movs	r1, #0
 8001780:	2007      	movs	r0, #7
 8001782:	f000 fe49 	bl	8002418 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001786:	2007      	movs	r0, #7
 8001788:	f000 fe62 	bl	8002450 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800178c:	2200      	movs	r2, #0
 800178e:	2100      	movs	r1, #0
 8001790:	2008      	movs	r0, #8
 8001792:	f000 fe41 	bl	8002418 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001796:	2008      	movs	r0, #8
 8001798:	f000 fe5a 	bl	8002450 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800179c:	2200      	movs	r2, #0
 800179e:	2100      	movs	r1, #0
 80017a0:	2009      	movs	r0, #9
 80017a2:	f000 fe39 	bl	8002418 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80017a6:	2009      	movs	r0, #9
 80017a8:	f000 fe52 	bl	8002450 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80017ac:	2200      	movs	r2, #0
 80017ae:	2100      	movs	r1, #0
 80017b0:	2017      	movs	r0, #23
 80017b2:	f000 fe31 	bl	8002418 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80017b6:	2017      	movs	r0, #23
 80017b8:	f000 fe4a 	bl	8002450 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017bc:	bf00      	nop
 80017be:	3728      	adds	r7, #40	; 0x28
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	40023800 	.word	0x40023800
 80017c8:	40020800 	.word	0x40020800
 80017cc:	40020c00 	.word	0x40020c00
 80017d0:	40020000 	.word	0x40020000

080017d4 <mdelay>:

/* USER CODE BEGIN 4 */
void mdelay(uint32_t delayvalue){
 80017d4:	b480      	push	{r7}
 80017d6:	b085      	sub	sp, #20
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
	uint32_t i;
	for (i = 0; i < delayvalue * 4000; ++i) {
 80017dc:	2300      	movs	r3, #0
 80017de:	60fb      	str	r3, [r7, #12]
 80017e0:	e002      	b.n	80017e8 <mdelay+0x14>
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	3301      	adds	r3, #1
 80017e6:	60fb      	str	r3, [r7, #12]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80017ee:	fb02 f303 	mul.w	r3, r2, r3
 80017f2:	68fa      	ldr	r2, [r7, #12]
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d3f4      	bcc.n	80017e2 <mdelay+0xe>
	}
}
 80017f8:	bf00      	nop
 80017fa:	bf00      	nop
 80017fc:	3714      	adds	r7, #20
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
	...

08001808 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	4603      	mov	r3, r0
 8001810:	80fb      	strh	r3, [r7, #6]
	UNUSED(GPIO_Pin);
	if (GPIO_Pin == GPIO_PIN_0){
 8001812:	88fb      	ldrh	r3, [r7, #6]
 8001814:	2b01      	cmp	r3, #1
 8001816:	d109      	bne.n	800182c <HAL_GPIO_EXTI_Callback+0x24>
		AudioState = (AudioState == AUDIO_STATE_PLAY) ? AUDIO_STATE_PAUSE : AUDIO_STATE_RESUME;
 8001818:	4b33      	ldr	r3, [pc, #204]	; (80018e8 <HAL_GPIO_EXTI_Callback+0xe0>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	2b03      	cmp	r3, #3
 800181e:	d101      	bne.n	8001824 <HAL_GPIO_EXTI_Callback+0x1c>
 8001820:	220a      	movs	r2, #10
 8001822:	e000      	b.n	8001826 <HAL_GPIO_EXTI_Callback+0x1e>
 8001824:	220b      	movs	r2, #11
 8001826:	4b30      	ldr	r3, [pc, #192]	; (80018e8 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001828:	701a      	strb	r2, [r3, #0]
		__NOP();
	}

	// Ensure to clear the EXTI line's interrupt flag
	//HAL_GPIO_EXTI_IRQHandler(GPIO_Pin);
}
 800182a:	e058      	b.n	80018de <HAL_GPIO_EXTI_Callback+0xd6>
	else if (GPIO_Pin == GPIO_PIN_1){
 800182c:	88fb      	ldrh	r3, [r7, #6]
 800182e:	2b02      	cmp	r3, #2
 8001830:	d112      	bne.n	8001858 <HAL_GPIO_EXTI_Callback+0x50>
		AudioState = AUDIO_STATE_VOLUME_UP;
 8001832:	4b2d      	ldr	r3, [pc, #180]	; (80018e8 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001834:	220c      	movs	r2, #12
 8001836:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8001838:	2201      	movs	r2, #1
 800183a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800183e:	482b      	ldr	r0, [pc, #172]	; (80018ec <HAL_GPIO_EXTI_Callback+0xe4>)
 8001840:	f001 fcea 	bl	8003218 <HAL_GPIO_WritePin>
		mdelay(100);
 8001844:	2064      	movs	r0, #100	; 0x64
 8001846:	f7ff ffc5 	bl	80017d4 <mdelay>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 800184a:	2200      	movs	r2, #0
 800184c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001850:	4826      	ldr	r0, [pc, #152]	; (80018ec <HAL_GPIO_EXTI_Callback+0xe4>)
 8001852:	f001 fce1 	bl	8003218 <HAL_GPIO_WritePin>
}
 8001856:	e042      	b.n	80018de <HAL_GPIO_EXTI_Callback+0xd6>
	else if (GPIO_Pin == GPIO_PIN_2){
 8001858:	88fb      	ldrh	r3, [r7, #6]
 800185a:	2b04      	cmp	r3, #4
 800185c:	d112      	bne.n	8001884 <HAL_GPIO_EXTI_Callback+0x7c>
		AudioState = AUDIO_STATE_VOLUME_DOWN;
 800185e:	4b22      	ldr	r3, [pc, #136]	; (80018e8 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001860:	220d      	movs	r2, #13
 8001862:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8001864:	2201      	movs	r2, #1
 8001866:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800186a:	4820      	ldr	r0, [pc, #128]	; (80018ec <HAL_GPIO_EXTI_Callback+0xe4>)
 800186c:	f001 fcd4 	bl	8003218 <HAL_GPIO_WritePin>
		mdelay(100);
 8001870:	2064      	movs	r0, #100	; 0x64
 8001872:	f7ff ffaf 	bl	80017d4 <mdelay>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8001876:	2200      	movs	r2, #0
 8001878:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800187c:	481b      	ldr	r0, [pc, #108]	; (80018ec <HAL_GPIO_EXTI_Callback+0xe4>)
 800187e:	f001 fccb 	bl	8003218 <HAL_GPIO_WritePin>
}
 8001882:	e02c      	b.n	80018de <HAL_GPIO_EXTI_Callback+0xd6>
	else if (GPIO_Pin == GPIO_PIN_3){
 8001884:	88fb      	ldrh	r3, [r7, #6]
 8001886:	2b08      	cmp	r3, #8
 8001888:	d112      	bne.n	80018b0 <HAL_GPIO_EXTI_Callback+0xa8>
		AudioState = AUDIO_STATE_NEXT;
 800188a:	4b17      	ldr	r3, [pc, #92]	; (80018e8 <HAL_GPIO_EXTI_Callback+0xe0>)
 800188c:	2205      	movs	r2, #5
 800188e:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8001890:	2201      	movs	r2, #1
 8001892:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001896:	4815      	ldr	r0, [pc, #84]	; (80018ec <HAL_GPIO_EXTI_Callback+0xe4>)
 8001898:	f001 fcbe 	bl	8003218 <HAL_GPIO_WritePin>
		mdelay(100);
 800189c:	2064      	movs	r0, #100	; 0x64
 800189e:	f7ff ff99 	bl	80017d4 <mdelay>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80018a2:	2200      	movs	r2, #0
 80018a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018a8:	4810      	ldr	r0, [pc, #64]	; (80018ec <HAL_GPIO_EXTI_Callback+0xe4>)
 80018aa:	f001 fcb5 	bl	8003218 <HAL_GPIO_WritePin>
}
 80018ae:	e016      	b.n	80018de <HAL_GPIO_EXTI_Callback+0xd6>
	else if (GPIO_Pin == GPIO_PIN_5){
 80018b0:	88fb      	ldrh	r3, [r7, #6]
 80018b2:	2b20      	cmp	r3, #32
 80018b4:	d112      	bne.n	80018dc <HAL_GPIO_EXTI_Callback+0xd4>
		AudioState = AUDIO_STATE_PREVIOUS;
 80018b6:	4b0c      	ldr	r3, [pc, #48]	; (80018e8 <HAL_GPIO_EXTI_Callback+0xe0>)
 80018b8:	2206      	movs	r2, #6
 80018ba:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 80018bc:	2201      	movs	r2, #1
 80018be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018c2:	480a      	ldr	r0, [pc, #40]	; (80018ec <HAL_GPIO_EXTI_Callback+0xe4>)
 80018c4:	f001 fca8 	bl	8003218 <HAL_GPIO_WritePin>
		mdelay(100);
 80018c8:	2064      	movs	r0, #100	; 0x64
 80018ca:	f7ff ff83 	bl	80017d4 <mdelay>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 80018ce:	2200      	movs	r2, #0
 80018d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018d4:	4805      	ldr	r0, [pc, #20]	; (80018ec <HAL_GPIO_EXTI_Callback+0xe4>)
 80018d6:	f001 fc9f 	bl	8003218 <HAL_GPIO_WritePin>
}
 80018da:	e000      	b.n	80018de <HAL_GPIO_EXTI_Callback+0xd6>
		__NOP();
 80018dc:	bf00      	nop
}
 80018de:	bf00      	nop
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	20001330 	.word	0x20001330
 80018ec:	40020c00 	.word	0x40020c00

080018f0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a04      	ldr	r2, [pc, #16]	; (8001910 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d101      	bne.n	8001906 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001902:	f000 fc8d 	bl	8002220 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001906:	bf00      	nop
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	40010000 	.word	0x40010000

08001914 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001918:	b672      	cpsid	i
}
 800191a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800191c:	e7fe      	b.n	800191c <Error_Handler+0x8>
	...

08001920 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001926:	2300      	movs	r3, #0
 8001928:	607b      	str	r3, [r7, #4]
 800192a:	4b10      	ldr	r3, [pc, #64]	; (800196c <HAL_MspInit+0x4c>)
 800192c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800192e:	4a0f      	ldr	r2, [pc, #60]	; (800196c <HAL_MspInit+0x4c>)
 8001930:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001934:	6453      	str	r3, [r2, #68]	; 0x44
 8001936:	4b0d      	ldr	r3, [pc, #52]	; (800196c <HAL_MspInit+0x4c>)
 8001938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800193a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800193e:	607b      	str	r3, [r7, #4]
 8001940:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001942:	2300      	movs	r3, #0
 8001944:	603b      	str	r3, [r7, #0]
 8001946:	4b09      	ldr	r3, [pc, #36]	; (800196c <HAL_MspInit+0x4c>)
 8001948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194a:	4a08      	ldr	r2, [pc, #32]	; (800196c <HAL_MspInit+0x4c>)
 800194c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001950:	6413      	str	r3, [r2, #64]	; 0x40
 8001952:	4b06      	ldr	r3, [pc, #24]	; (800196c <HAL_MspInit+0x4c>)
 8001954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001956:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800195a:	603b      	str	r3, [r7, #0]
 800195c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800195e:	2007      	movs	r0, #7
 8001960:	f000 fd4f 	bl	8002402 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001964:	bf00      	nop
 8001966:	3708      	adds	r7, #8
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	40023800 	.word	0x40023800

08001970 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b08a      	sub	sp, #40	; 0x28
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001978:	f107 0314 	add.w	r3, r7, #20
 800197c:	2200      	movs	r2, #0
 800197e:	601a      	str	r2, [r3, #0]
 8001980:	605a      	str	r2, [r3, #4]
 8001982:	609a      	str	r2, [r3, #8]
 8001984:	60da      	str	r2, [r3, #12]
 8001986:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a19      	ldr	r2, [pc, #100]	; (80019f4 <HAL_I2C_MspInit+0x84>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d12c      	bne.n	80019ec <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001992:	2300      	movs	r3, #0
 8001994:	613b      	str	r3, [r7, #16]
 8001996:	4b18      	ldr	r3, [pc, #96]	; (80019f8 <HAL_I2C_MspInit+0x88>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199a:	4a17      	ldr	r2, [pc, #92]	; (80019f8 <HAL_I2C_MspInit+0x88>)
 800199c:	f043 0302 	orr.w	r3, r3, #2
 80019a0:	6313      	str	r3, [r2, #48]	; 0x30
 80019a2:	4b15      	ldr	r3, [pc, #84]	; (80019f8 <HAL_I2C_MspInit+0x88>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a6:	f003 0302 	and.w	r3, r3, #2
 80019aa:	613b      	str	r3, [r7, #16]
 80019ac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80019ae:	f44f 7310 	mov.w	r3, #576	; 0x240
 80019b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019b4:	2312      	movs	r3, #18
 80019b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b8:	2300      	movs	r3, #0
 80019ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019bc:	2303      	movs	r3, #3
 80019be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019c0:	2304      	movs	r3, #4
 80019c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019c4:	f107 0314 	add.w	r3, r7, #20
 80019c8:	4619      	mov	r1, r3
 80019ca:	480c      	ldr	r0, [pc, #48]	; (80019fc <HAL_I2C_MspInit+0x8c>)
 80019cc:	f001 f98c 	bl	8002ce8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019d0:	2300      	movs	r3, #0
 80019d2:	60fb      	str	r3, [r7, #12]
 80019d4:	4b08      	ldr	r3, [pc, #32]	; (80019f8 <HAL_I2C_MspInit+0x88>)
 80019d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d8:	4a07      	ldr	r2, [pc, #28]	; (80019f8 <HAL_I2C_MspInit+0x88>)
 80019da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80019de:	6413      	str	r3, [r2, #64]	; 0x40
 80019e0:	4b05      	ldr	r3, [pc, #20]	; (80019f8 <HAL_I2C_MspInit+0x88>)
 80019e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019e8:	60fb      	str	r3, [r7, #12]
 80019ea:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80019ec:	bf00      	nop
 80019ee:	3728      	adds	r7, #40	; 0x28
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	40005400 	.word	0x40005400
 80019f8:	40023800 	.word	0x40023800
 80019fc:	40020400 	.word	0x40020400

08001a00 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a0a      	ldr	r2, [pc, #40]	; (8001a38 <HAL_I2C_MspDeInit+0x38>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d10e      	bne.n	8001a30 <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001a12:	4b0a      	ldr	r3, [pc, #40]	; (8001a3c <HAL_I2C_MspDeInit+0x3c>)
 8001a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a16:	4a09      	ldr	r2, [pc, #36]	; (8001a3c <HAL_I2C_MspDeInit+0x3c>)
 8001a18:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001a1c:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8001a1e:	2140      	movs	r1, #64	; 0x40
 8001a20:	4807      	ldr	r0, [pc, #28]	; (8001a40 <HAL_I2C_MspDeInit+0x40>)
 8001a22:	f001 fafd 	bl	8003020 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8001a26:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a2a:	4805      	ldr	r0, [pc, #20]	; (8001a40 <HAL_I2C_MspDeInit+0x40>)
 8001a2c:	f001 faf8 	bl	8003020 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8001a30:	bf00      	nop
 8001a32:	3708      	adds	r7, #8
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	40005400 	.word	0x40005400
 8001a3c:	40023800 	.word	0x40023800
 8001a40:	40020400 	.word	0x40020400

08001a44 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b08e      	sub	sp, #56	; 0x38
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a50:	2200      	movs	r2, #0
 8001a52:	601a      	str	r2, [r3, #0]
 8001a54:	605a      	str	r2, [r3, #4]
 8001a56:	609a      	str	r2, [r3, #8]
 8001a58:	60da      	str	r2, [r3, #12]
 8001a5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a5c:	f107 0314 	add.w	r3, r7, #20
 8001a60:	2200      	movs	r2, #0
 8001a62:	601a      	str	r2, [r3, #0]
 8001a64:	605a      	str	r2, [r3, #4]
 8001a66:	609a      	str	r2, [r3, #8]
 8001a68:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a4e      	ldr	r2, [pc, #312]	; (8001ba8 <HAL_I2S_MspInit+0x164>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	f040 8094 	bne.w	8001b9e <HAL_I2S_MspInit+0x15a>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001a76:	2301      	movs	r3, #1
 8001a78:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001a7a:	23c0      	movs	r3, #192	; 0xc0
 8001a7c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001a7e:	2302      	movs	r3, #2
 8001a80:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a82:	f107 0314 	add.w	r3, r7, #20
 8001a86:	4618      	mov	r0, r3
 8001a88:	f005 fd6a 	bl	8007560 <HAL_RCCEx_PeriphCLKConfig>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 8001a92:	f7ff ff3f 	bl	8001914 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001a96:	2300      	movs	r3, #0
 8001a98:	613b      	str	r3, [r7, #16]
 8001a9a:	4b44      	ldr	r3, [pc, #272]	; (8001bac <HAL_I2S_MspInit+0x168>)
 8001a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9e:	4a43      	ldr	r2, [pc, #268]	; (8001bac <HAL_I2S_MspInit+0x168>)
 8001aa0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001aa4:	6413      	str	r3, [r2, #64]	; 0x40
 8001aa6:	4b41      	ldr	r3, [pc, #260]	; (8001bac <HAL_I2S_MspInit+0x168>)
 8001aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aaa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001aae:	613b      	str	r3, [r7, #16]
 8001ab0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	60fb      	str	r3, [r7, #12]
 8001ab6:	4b3d      	ldr	r3, [pc, #244]	; (8001bac <HAL_I2S_MspInit+0x168>)
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aba:	4a3c      	ldr	r2, [pc, #240]	; (8001bac <HAL_I2S_MspInit+0x168>)
 8001abc:	f043 0301 	orr.w	r3, r3, #1
 8001ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ac2:	4b3a      	ldr	r3, [pc, #232]	; (8001bac <HAL_I2S_MspInit+0x168>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac6:	f003 0301 	and.w	r3, r3, #1
 8001aca:	60fb      	str	r3, [r7, #12]
 8001acc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ace:	2300      	movs	r3, #0
 8001ad0:	60bb      	str	r3, [r7, #8]
 8001ad2:	4b36      	ldr	r3, [pc, #216]	; (8001bac <HAL_I2S_MspInit+0x168>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad6:	4a35      	ldr	r2, [pc, #212]	; (8001bac <HAL_I2S_MspInit+0x168>)
 8001ad8:	f043 0304 	orr.w	r3, r3, #4
 8001adc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ade:	4b33      	ldr	r3, [pc, #204]	; (8001bac <HAL_I2S_MspInit+0x168>)
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae2:	f003 0304 	and.w	r3, r3, #4
 8001ae6:	60bb      	str	r3, [r7, #8]
 8001ae8:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001aea:	2310      	movs	r3, #16
 8001aec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aee:	2302      	movs	r3, #2
 8001af0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af2:	2300      	movs	r3, #0
 8001af4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af6:	2300      	movs	r3, #0
 8001af8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001afa:	2306      	movs	r3, #6
 8001afc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001afe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b02:	4619      	mov	r1, r3
 8001b04:	482a      	ldr	r0, [pc, #168]	; (8001bb0 <HAL_I2S_MspInit+0x16c>)
 8001b06:	f001 f8ef 	bl	8002ce8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 8001b0a:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001b0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b10:	2302      	movs	r3, #2
 8001b12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b14:	2300      	movs	r3, #0
 8001b16:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001b1c:	2306      	movs	r3, #6
 8001b1e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b24:	4619      	mov	r1, r3
 8001b26:	4823      	ldr	r0, [pc, #140]	; (8001bb4 <HAL_I2S_MspInit+0x170>)
 8001b28:	f001 f8de 	bl	8002ce8 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8001b2c:	4b22      	ldr	r3, [pc, #136]	; (8001bb8 <HAL_I2S_MspInit+0x174>)
 8001b2e:	4a23      	ldr	r2, [pc, #140]	; (8001bbc <HAL_I2S_MspInit+0x178>)
 8001b30:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8001b32:	4b21      	ldr	r3, [pc, #132]	; (8001bb8 <HAL_I2S_MspInit+0x174>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b38:	4b1f      	ldr	r3, [pc, #124]	; (8001bb8 <HAL_I2S_MspInit+0x174>)
 8001b3a:	2240      	movs	r2, #64	; 0x40
 8001b3c:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b3e:	4b1e      	ldr	r3, [pc, #120]	; (8001bb8 <HAL_I2S_MspInit+0x174>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b44:	4b1c      	ldr	r3, [pc, #112]	; (8001bb8 <HAL_I2S_MspInit+0x174>)
 8001b46:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b4a:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001b4c:	4b1a      	ldr	r3, [pc, #104]	; (8001bb8 <HAL_I2S_MspInit+0x174>)
 8001b4e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b52:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001b54:	4b18      	ldr	r3, [pc, #96]	; (8001bb8 <HAL_I2S_MspInit+0x174>)
 8001b56:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b5a:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8001b5c:	4b16      	ldr	r3, [pc, #88]	; (8001bb8 <HAL_I2S_MspInit+0x174>)
 8001b5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b62:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001b64:	4b14      	ldr	r3, [pc, #80]	; (8001bb8 <HAL_I2S_MspInit+0x174>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001b6a:	4b13      	ldr	r3, [pc, #76]	; (8001bb8 <HAL_I2S_MspInit+0x174>)
 8001b6c:	2204      	movs	r2, #4
 8001b6e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001b70:	4b11      	ldr	r3, [pc, #68]	; (8001bb8 <HAL_I2S_MspInit+0x174>)
 8001b72:	2203      	movs	r2, #3
 8001b74:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001b76:	4b10      	ldr	r3, [pc, #64]	; (8001bb8 <HAL_I2S_MspInit+0x174>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001b7c:	4b0e      	ldr	r3, [pc, #56]	; (8001bb8 <HAL_I2S_MspInit+0x174>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8001b82:	480d      	ldr	r0, [pc, #52]	; (8001bb8 <HAL_I2S_MspInit+0x174>)
 8001b84:	f000 fc72 	bl	800246c <HAL_DMA_Init>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <HAL_I2S_MspInit+0x14e>
    {
      Error_Handler();
 8001b8e:	f7ff fec1 	bl	8001914 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4a08      	ldr	r2, [pc, #32]	; (8001bb8 <HAL_I2S_MspInit+0x174>)
 8001b96:	639a      	str	r2, [r3, #56]	; 0x38
 8001b98:	4a07      	ldr	r2, [pc, #28]	; (8001bb8 <HAL_I2S_MspInit+0x174>)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001b9e:	bf00      	nop
 8001ba0:	3738      	adds	r7, #56	; 0x38
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	40003c00 	.word	0x40003c00
 8001bac:	40023800 	.word	0x40023800
 8001bb0:	40020000 	.word	0x40020000
 8001bb4:	40020800 	.word	0x40020800
 8001bb8:	20000278 	.word	0x20000278
 8001bbc:	40026088 	.word	0x40026088

08001bc0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b08c      	sub	sp, #48	; 0x30
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	60bb      	str	r3, [r7, #8]
 8001bd4:	4b2f      	ldr	r3, [pc, #188]	; (8001c94 <HAL_InitTick+0xd4>)
 8001bd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd8:	4a2e      	ldr	r2, [pc, #184]	; (8001c94 <HAL_InitTick+0xd4>)
 8001bda:	f043 0301 	orr.w	r3, r3, #1
 8001bde:	6453      	str	r3, [r2, #68]	; 0x44
 8001be0:	4b2c      	ldr	r3, [pc, #176]	; (8001c94 <HAL_InitTick+0xd4>)
 8001be2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be4:	f003 0301 	and.w	r3, r3, #1
 8001be8:	60bb      	str	r3, [r7, #8]
 8001bea:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001bec:	f107 020c 	add.w	r2, r7, #12
 8001bf0:	f107 0310 	add.w	r3, r7, #16
 8001bf4:	4611      	mov	r1, r2
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f005 fc80 	bl	80074fc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001bfc:	f005 fc6a 	bl	80074d4 <HAL_RCC_GetPCLK2Freq>
 8001c00:	4603      	mov	r3, r0
 8001c02:	005b      	lsls	r3, r3, #1
 8001c04:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c08:	4a23      	ldr	r2, [pc, #140]	; (8001c98 <HAL_InitTick+0xd8>)
 8001c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c0e:	0c9b      	lsrs	r3, r3, #18
 8001c10:	3b01      	subs	r3, #1
 8001c12:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001c14:	4b21      	ldr	r3, [pc, #132]	; (8001c9c <HAL_InitTick+0xdc>)
 8001c16:	4a22      	ldr	r2, [pc, #136]	; (8001ca0 <HAL_InitTick+0xe0>)
 8001c18:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001c1a:	4b20      	ldr	r3, [pc, #128]	; (8001c9c <HAL_InitTick+0xdc>)
 8001c1c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c20:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001c22:	4a1e      	ldr	r2, [pc, #120]	; (8001c9c <HAL_InitTick+0xdc>)
 8001c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c26:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001c28:	4b1c      	ldr	r3, [pc, #112]	; (8001c9c <HAL_InitTick+0xdc>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c2e:	4b1b      	ldr	r3, [pc, #108]	; (8001c9c <HAL_InitTick+0xdc>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c34:	4b19      	ldr	r3, [pc, #100]	; (8001c9c <HAL_InitTick+0xdc>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001c3a:	4818      	ldr	r0, [pc, #96]	; (8001c9c <HAL_InitTick+0xdc>)
 8001c3c:	f005 fdfc 	bl	8007838 <HAL_TIM_Base_Init>
 8001c40:	4603      	mov	r3, r0
 8001c42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001c46:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d11b      	bne.n	8001c86 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001c4e:	4813      	ldr	r0, [pc, #76]	; (8001c9c <HAL_InitTick+0xdc>)
 8001c50:	f005 fe4c 	bl	80078ec <HAL_TIM_Base_Start_IT>
 8001c54:	4603      	mov	r3, r0
 8001c56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001c5a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d111      	bne.n	8001c86 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001c62:	2019      	movs	r0, #25
 8001c64:	f000 fbf4 	bl	8002450 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2b0f      	cmp	r3, #15
 8001c6c:	d808      	bhi.n	8001c80 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001c6e:	2200      	movs	r2, #0
 8001c70:	6879      	ldr	r1, [r7, #4]
 8001c72:	2019      	movs	r0, #25
 8001c74:	f000 fbd0 	bl	8002418 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c78:	4a0a      	ldr	r2, [pc, #40]	; (8001ca4 <HAL_InitTick+0xe4>)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6013      	str	r3, [r2, #0]
 8001c7e:	e002      	b.n	8001c86 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001c86:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3730      	adds	r7, #48	; 0x30
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	40023800 	.word	0x40023800
 8001c98:	431bde83 	.word	0x431bde83
 8001c9c:	200002dc 	.word	0x200002dc
 8001ca0:	40010000 	.word	0x40010000
 8001ca4:	20000040 	.word	0x20000040

08001ca8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cac:	e7fe      	b.n	8001cac <NMI_Handler+0x4>

08001cae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cae:	b480      	push	{r7}
 8001cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cb2:	e7fe      	b.n	8001cb2 <HardFault_Handler+0x4>

08001cb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cb8:	e7fe      	b.n	8001cb8 <MemManage_Handler+0x4>

08001cba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cbe:	e7fe      	b.n	8001cbe <BusFault_Handler+0x4>

08001cc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cc4:	e7fe      	b.n	8001cc4 <UsageFault_Handler+0x4>

08001cc6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cca:	bf00      	nop
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr

08001cd4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cd8:	bf00      	nop
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr

08001ce2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ce6:	bf00      	nop
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr

08001cf0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cf4:	bf00      	nop
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr

08001cfe <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001d02:	2001      	movs	r0, #1
 8001d04:	f001 faa2 	bl	800324c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001d08:	bf00      	nop
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001d10:	2002      	movs	r0, #2
 8001d12:	f001 fa9b 	bl	800324c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001d16:	bf00      	nop
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001d1e:	2004      	movs	r0, #4
 8001d20:	f001 fa94 	bl	800324c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001d24:	bf00      	nop
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001d2c:	2008      	movs	r0, #8
 8001d2e:	f001 fa8d 	bl	800324c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001d32:	bf00      	nop
 8001d34:	bd80      	pop	{r7, pc}
	...

08001d38 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8001d3c:	4802      	ldr	r0, [pc, #8]	; (8001d48 <DMA1_Stream5_IRQHandler+0x10>)
 8001d3e:	f000 fd69 	bl	8002814 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001d42:	bf00      	nop
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	20000278 	.word	0x20000278

08001d4c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001d50:	2020      	movs	r0, #32
 8001d52:	f001 fa7b 	bl	800324c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001d56:	bf00      	nop
 8001d58:	bd80      	pop	{r7, pc}
	...

08001d5c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001d60:	4802      	ldr	r0, [pc, #8]	; (8001d6c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001d62:	f005 fe33 	bl	80079cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001d66:	bf00      	nop
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	200002dc 	.word	0x200002dc

08001d70 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001d74:	4802      	ldr	r0, [pc, #8]	; (8001d80 <OTG_FS_IRQHandler+0x10>)
 8001d76:	f001 fceb 	bl	8003750 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001d7a:	bf00      	nop
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	200021bc 	.word	0x200021bc

08001d84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b086      	sub	sp, #24
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d8c:	4a14      	ldr	r2, [pc, #80]	; (8001de0 <_sbrk+0x5c>)
 8001d8e:	4b15      	ldr	r3, [pc, #84]	; (8001de4 <_sbrk+0x60>)
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d98:	4b13      	ldr	r3, [pc, #76]	; (8001de8 <_sbrk+0x64>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d102      	bne.n	8001da6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001da0:	4b11      	ldr	r3, [pc, #68]	; (8001de8 <_sbrk+0x64>)
 8001da2:	4a12      	ldr	r2, [pc, #72]	; (8001dec <_sbrk+0x68>)
 8001da4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001da6:	4b10      	ldr	r3, [pc, #64]	; (8001de8 <_sbrk+0x64>)
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4413      	add	r3, r2
 8001dae:	693a      	ldr	r2, [r7, #16]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d207      	bcs.n	8001dc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001db4:	f00e f81c 	bl	800fdf0 <__errno>
 8001db8:	4603      	mov	r3, r0
 8001dba:	220c      	movs	r2, #12
 8001dbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8001dc2:	e009      	b.n	8001dd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001dc4:	4b08      	ldr	r3, [pc, #32]	; (8001de8 <_sbrk+0x64>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dca:	4b07      	ldr	r3, [pc, #28]	; (8001de8 <_sbrk+0x64>)
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	4a05      	ldr	r2, [pc, #20]	; (8001de8 <_sbrk+0x64>)
 8001dd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3718      	adds	r7, #24
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	20020000 	.word	0x20020000
 8001de4:	00000400 	.word	0x00000400
 8001de8:	20000324 	.word	0x20000324
 8001dec:	20002608 	.word	0x20002608

08001df0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001df4:	4b06      	ldr	r3, [pc, #24]	; (8001e10 <SystemInit+0x20>)
 8001df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dfa:	4a05      	ldr	r2, [pc, #20]	; (8001e10 <SystemInit+0x20>)
 8001dfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e04:	bf00      	nop
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	e000ed00 	.word	0xe000ed00

08001e14 <PlayerInit>:

FIL WavFile;

/* Private function prototypes -----------------------------------------------*/
uint8_t PlayerInit(uint32_t AudioFreq)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
	/* Initialize the Audio codec and all related peripherals (I2S, I2C, IOExpander, IOs...) */
	if(AUDIO_OUT_Init(OUTPUT_DEVICE_BOTH, uwVolume, AudioFreq) != 0)
 8001e1c:	4b08      	ldr	r3, [pc, #32]	; (8001e40 <PlayerInit+0x2c>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	4619      	mov	r1, r3
 8001e26:	2003      	movs	r0, #3
 8001e28:	f7fe fb4c 	bl	80004c4 <AUDIO_OUT_Init>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <PlayerInit+0x22>
	{
		return 1;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e000      	b.n	8001e38 <PlayerInit+0x24>
	}
	else
	{
		return 0;
 8001e36:	2300      	movs	r3, #0
	}
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3708      	adds	r7, #8
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	2000003c 	.word	0x2000003c

08001e44 <AUDIO_PLAYER_Start>:
  * @brief  Starts Audio streaming.    
  * @param  idx: File index
  * @retval Audio error
  */ 
AUDIO_ErrorTypeDef AUDIO_PLAYER_Start(uint8_t idx)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	71fb      	strb	r3, [r7, #7]
  int bytesread;

  f_close(&WavFile);
 8001e4e:	4828      	ldr	r0, [pc, #160]	; (8001ef0 <AUDIO_PLAYER_Start+0xac>)
 8001e50:	f00c ff6d 	bl	800ed2e <f_close>
  if(AUDIO_GetWavObjectNumber() > idx)
 8001e54:	f7fe ff98 	bl	8000d88 <AUDIO_GetWavObjectNumber>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	79fb      	ldrb	r3, [r7, #7]
 8001e5e:	b29b      	uxth	r3, r3
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d940      	bls.n	8001ee6 <AUDIO_PLAYER_Start+0xa2>
  {

    //Open WAV file
    f_open(&WavFile, (char *)FileList.file[idx].name, FA_READ);
 8001e64:	79fa      	ldrb	r2, [r7, #7]
 8001e66:	4613      	mov	r3, r2
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	4413      	add	r3, r2
 8001e6c:	00db      	lsls	r3, r3, #3
 8001e6e:	4413      	add	r3, r2
 8001e70:	4a20      	ldr	r2, [pc, #128]	; (8001ef4 <AUDIO_PLAYER_Start+0xb0>)
 8001e72:	4413      	add	r3, r2
 8001e74:	3301      	adds	r3, #1
 8001e76:	2201      	movs	r2, #1
 8001e78:	4619      	mov	r1, r3
 8001e7a:	481d      	ldr	r0, [pc, #116]	; (8001ef0 <AUDIO_PLAYER_Start+0xac>)
 8001e7c:	f00c fbdc 	bl	800e638 <f_open>
    //Read WAV file Header
    f_read(&WavFile, &WaveFormat, sizeof(WaveFormat), &bytesread);
 8001e80:	f107 030c 	add.w	r3, r7, #12
 8001e84:	222c      	movs	r2, #44	; 0x2c
 8001e86:	491c      	ldr	r1, [pc, #112]	; (8001ef8 <AUDIO_PLAYER_Start+0xb4>)
 8001e88:	4819      	ldr	r0, [pc, #100]	; (8001ef0 <AUDIO_PLAYER_Start+0xac>)
 8001e8a:	f00c fd93 	bl	800e9b4 <f_read>
    
    /*Adjust the Audio frequency */
    PlayerInit(WaveFormat.SampleRate);
 8001e8e:	4b1a      	ldr	r3, [pc, #104]	; (8001ef8 <AUDIO_PLAYER_Start+0xb4>)
 8001e90:	699b      	ldr	r3, [r3, #24]
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7ff ffbe 	bl	8001e14 <PlayerInit>
    
    BufferCtl.state = BUFFER_OFFSET_NONE;
 8001e98:	4b18      	ldr	r3, [pc, #96]	; (8001efc <AUDIO_PLAYER_Start+0xb8>)
 8001e9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	701a      	strb	r2, [r3, #0]
    
    /* Get Data from USB Flash Disk */
    f_lseek(&WavFile, 0);
 8001ea2:	2100      	movs	r1, #0
 8001ea4:	4812      	ldr	r0, [pc, #72]	; (8001ef0 <AUDIO_PLAYER_Start+0xac>)
 8001ea6:	f00c ff6c 	bl	800ed82 <f_lseek>
    
    /* Fill whole buffer at first time */
    if(f_read(&WavFile,&BufferCtl.buff[0],AUDIO_OUT_BUFFER_SIZE,(void *)&bytesread) == FR_OK)
 8001eaa:	f107 030c 	add.w	r3, r7, #12
 8001eae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001eb2:	4912      	ldr	r1, [pc, #72]	; (8001efc <AUDIO_PLAYER_Start+0xb8>)
 8001eb4:	480e      	ldr	r0, [pc, #56]	; (8001ef0 <AUDIO_PLAYER_Start+0xac>)
 8001eb6:	f00c fd7d 	bl	800e9b4 <f_read>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d112      	bne.n	8001ee6 <AUDIO_PLAYER_Start+0xa2>
    {
      AudioState = AUDIO_STATE_PLAY;
 8001ec0:	4b0f      	ldr	r3, [pc, #60]	; (8001f00 <AUDIO_PLAYER_Start+0xbc>)
 8001ec2:	2203      	movs	r2, #3
 8001ec4:	701a      	strb	r2, [r3, #0]
        if(bytesread != 0)
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d00c      	beq.n	8001ee6 <AUDIO_PLAYER_Start+0xa2>
        {
          AUDIO_OUT_Play((uint16_t*)&BufferCtl.buff[0], AUDIO_OUT_BUFFER_SIZE);
 8001ecc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ed0:	480a      	ldr	r0, [pc, #40]	; (8001efc <AUDIO_PLAYER_Start+0xb8>)
 8001ed2:	f7fe fb45 	bl	8000560 <AUDIO_OUT_Play>
          BufferCtl.fptr = bytesread;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	461a      	mov	r2, r3
 8001eda:	4b08      	ldr	r3, [pc, #32]	; (8001efc <AUDIO_PLAYER_Start+0xb8>)
 8001edc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ee0:	605a      	str	r2, [r3, #4]
          return AUDIO_ERROR_NONE;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	e000      	b.n	8001ee8 <AUDIO_PLAYER_Start+0xa4>
        }
      }
  }
  return AUDIO_ERROR_IO;
 8001ee6:	2301      	movs	r3, #1
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3710      	adds	r7, #16
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	2000173c 	.word	0x2000173c
 8001ef4:	20001334 	.word	0x20001334
 8001ef8:	20001710 	.word	0x20001710
 8001efc:	20000328 	.word	0x20000328
 8001f00:	20001330 	.word	0x20001330

08001f04 <AUDIO_PLAYER_Process>:
  * @brief  Manages Audio process. 
  * @param  None
  * @retval Audio error
  */
AUDIO_ErrorTypeDef AUDIO_PLAYER_Process(bool isLoop)
{
 8001f04:	b590      	push	{r4, r7, lr}
 8001f06:	b085      	sub	sp, #20
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	71fb      	strb	r3, [r7, #7]
  uint32_t bytesread;
  AUDIO_ErrorTypeDef audio_error = AUDIO_ERROR_NONE;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	73fb      	strb	r3, [r7, #15]
  
  switch(AudioState)
 8001f12:	4b82      	ldr	r3, [pc, #520]	; (800211c <AUDIO_PLAYER_Process+0x218>)
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	3b03      	subs	r3, #3
 8001f18:	2b0a      	cmp	r3, #10
 8001f1a:	f200 80f6 	bhi.w	800210a <AUDIO_PLAYER_Process+0x206>
 8001f1e:	a201      	add	r2, pc, #4	; (adr r2, 8001f24 <AUDIO_PLAYER_Process+0x20>)
 8001f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f24:	08001f51 	.word	0x08001f51
 8001f28:	0800210b 	.word	0x0800210b
 8001f2c:	08002017 	.word	0x08002017
 8001f30:	08002065 	.word	0x08002065
 8001f34:	0800210b 	.word	0x0800210b
 8001f38:	0800210b 	.word	0x0800210b
 8001f3c:	08002005 	.word	0x08002005
 8001f40:	080020a7 	.word	0x080020a7
 8001f44:	080020b3 	.word	0x080020b3
 8001f48:	080020bf 	.word	0x080020bf
 8001f4c:	080020e5 	.word	0x080020e5
  {
  case AUDIO_STATE_PLAY:
    if(BufferCtl.fptr >= WaveFormat.FileSize)
 8001f50:	4b73      	ldr	r3, [pc, #460]	; (8002120 <AUDIO_PLAYER_Process+0x21c>)
 8001f52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f56:	685a      	ldr	r2, [r3, #4]
 8001f58:	4b72      	ldr	r3, [pc, #456]	; (8002124 <AUDIO_PLAYER_Process+0x220>)
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d305      	bcc.n	8001f6c <AUDIO_PLAYER_Process+0x68>
    {
      AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8001f60:	2002      	movs	r0, #2
 8001f62:	f7fe fb53 	bl	800060c <AUDIO_OUT_Stop>
      AudioState = AUDIO_STATE_NEXT;
 8001f66:	4b6d      	ldr	r3, [pc, #436]	; (800211c <AUDIO_PLAYER_Process+0x218>)
 8001f68:	2205      	movs	r2, #5
 8001f6a:	701a      	strb	r2, [r3, #0]
    }
    
    if(BufferCtl.state == BUFFER_OFFSET_HALF)
 8001f6c:	4b6c      	ldr	r3, [pc, #432]	; (8002120 <AUDIO_PLAYER_Process+0x21c>)
 8001f6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d11e      	bne.n	8001fb6 <AUDIO_PLAYER_Process+0xb2>
    {
      if(f_read(&WavFile, &BufferCtl.buff[0], AUDIO_OUT_BUFFER_SIZE/2, (void *)&bytesread) != FR_OK)
 8001f78:	f107 0308 	add.w	r3, r7, #8
 8001f7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f80:	4967      	ldr	r1, [pc, #412]	; (8002120 <AUDIO_PLAYER_Process+0x21c>)
 8001f82:	4869      	ldr	r0, [pc, #420]	; (8002128 <AUDIO_PLAYER_Process+0x224>)
 8001f84:	f00c fd16 	bl	800e9b4 <f_read>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d004      	beq.n	8001f98 <AUDIO_PLAYER_Process+0x94>
      { 
        AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8001f8e:	2002      	movs	r0, #2
 8001f90:	f7fe fb3c 	bl	800060c <AUDIO_OUT_Stop>
        return AUDIO_ERROR_IO;       
 8001f94:	2301      	movs	r3, #1
 8001f96:	e0bc      	b.n	8002112 <AUDIO_PLAYER_Process+0x20e>
      } 
      BufferCtl.state = BUFFER_OFFSET_NONE;
 8001f98:	4b61      	ldr	r3, [pc, #388]	; (8002120 <AUDIO_PLAYER_Process+0x21c>)
 8001f9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	701a      	strb	r2, [r3, #0]
      BufferCtl.fptr += bytesread; 
 8001fa2:	4b5f      	ldr	r3, [pc, #380]	; (8002120 <AUDIO_PLAYER_Process+0x21c>)
 8001fa4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fa8:	685a      	ldr	r2, [r3, #4]
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	4413      	add	r3, r2
 8001fae:	4a5c      	ldr	r2, [pc, #368]	; (8002120 <AUDIO_PLAYER_Process+0x21c>)
 8001fb0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001fb4:	6053      	str	r3, [r2, #4]
    }
    
    if(BufferCtl.state == BUFFER_OFFSET_FULL)
 8001fb6:	4b5a      	ldr	r3, [pc, #360]	; (8002120 <AUDIO_PLAYER_Process+0x21c>)
 8001fb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	f040 80a5 	bne.w	800210e <AUDIO_PLAYER_Process+0x20a>
    {
      if(f_read(&WavFile, &BufferCtl.buff[AUDIO_OUT_BUFFER_SIZE /2], AUDIO_OUT_BUFFER_SIZE/2, (void *)&bytesread) != FR_OK)
 8001fc4:	f107 0308 	add.w	r3, r7, #8
 8001fc8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001fcc:	4957      	ldr	r1, [pc, #348]	; (800212c <AUDIO_PLAYER_Process+0x228>)
 8001fce:	4856      	ldr	r0, [pc, #344]	; (8002128 <AUDIO_PLAYER_Process+0x224>)
 8001fd0:	f00c fcf0 	bl	800e9b4 <f_read>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d004      	beq.n	8001fe4 <AUDIO_PLAYER_Process+0xe0>
      { 
        AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8001fda:	2002      	movs	r0, #2
 8001fdc:	f7fe fb16 	bl	800060c <AUDIO_OUT_Stop>
        return AUDIO_ERROR_IO;       
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e096      	b.n	8002112 <AUDIO_PLAYER_Process+0x20e>
      } 
 
      BufferCtl.state = BUFFER_OFFSET_NONE;
 8001fe4:	4b4e      	ldr	r3, [pc, #312]	; (8002120 <AUDIO_PLAYER_Process+0x21c>)
 8001fe6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fea:	2200      	movs	r2, #0
 8001fec:	701a      	strb	r2, [r3, #0]
      BufferCtl.fptr += bytesread; 
 8001fee:	4b4c      	ldr	r3, [pc, #304]	; (8002120 <AUDIO_PLAYER_Process+0x21c>)
 8001ff0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ff4:	685a      	ldr	r2, [r3, #4]
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	4413      	add	r3, r2
 8001ffa:	4a49      	ldr	r2, [pc, #292]	; (8002120 <AUDIO_PLAYER_Process+0x21c>)
 8001ffc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002000:	6053      	str	r3, [r2, #4]
    }
    break;
 8002002:	e084      	b.n	800210e <AUDIO_PLAYER_Process+0x20a>
    
  case AUDIO_STATE_STOP:
    AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8002004:	2002      	movs	r0, #2
 8002006:	f7fe fb01 	bl	800060c <AUDIO_OUT_Stop>
    AudioState = AUDIO_STATE_IDLE; 
 800200a:	4b44      	ldr	r3, [pc, #272]	; (800211c <AUDIO_PLAYER_Process+0x218>)
 800200c:	2200      	movs	r2, #0
 800200e:	701a      	strb	r2, [r3, #0]
    audio_error = AUDIO_ERROR_IO;
 8002010:	2301      	movs	r3, #1
 8002012:	73fb      	strb	r3, [r7, #15]
    break;
 8002014:	e07c      	b.n	8002110 <AUDIO_PLAYER_Process+0x20c>
    
  case AUDIO_STATE_NEXT:
    if(++FilePos >= AUDIO_GetWavObjectNumber())
 8002016:	4b46      	ldr	r3, [pc, #280]	; (8002130 <AUDIO_PLAYER_Process+0x22c>)
 8002018:	f9b3 3000 	ldrsh.w	r3, [r3]
 800201c:	b29b      	uxth	r3, r3
 800201e:	3301      	adds	r3, #1
 8002020:	b29b      	uxth	r3, r3
 8002022:	b21a      	sxth	r2, r3
 8002024:	4b42      	ldr	r3, [pc, #264]	; (8002130 <AUDIO_PLAYER_Process+0x22c>)
 8002026:	801a      	strh	r2, [r3, #0]
 8002028:	4b41      	ldr	r3, [pc, #260]	; (8002130 <AUDIO_PLAYER_Process+0x22c>)
 800202a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800202e:	461c      	mov	r4, r3
 8002030:	f7fe feaa 	bl	8000d88 <AUDIO_GetWavObjectNumber>
 8002034:	4603      	mov	r3, r0
 8002036:	429c      	cmp	r4, r3
 8002038:	db09      	blt.n	800204e <AUDIO_PLAYER_Process+0x14a>
    {
    	if (isLoop)
 800203a:	79fb      	ldrb	r3, [r7, #7]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d003      	beq.n	8002048 <AUDIO_PLAYER_Process+0x144>
    	{
    		FilePos = 0;
 8002040:	4b3b      	ldr	r3, [pc, #236]	; (8002130 <AUDIO_PLAYER_Process+0x22c>)
 8002042:	2200      	movs	r2, #0
 8002044:	801a      	strh	r2, [r3, #0]
 8002046:	e002      	b.n	800204e <AUDIO_PLAYER_Process+0x14a>
    	}
    	else
    	{
    		AudioState =AUDIO_STATE_STOP;
 8002048:	4b34      	ldr	r3, [pc, #208]	; (800211c <AUDIO_PLAYER_Process+0x218>)
 800204a:	2209      	movs	r2, #9
 800204c:	701a      	strb	r2, [r3, #0]
    	}
    }
    AUDIO_OUT_Stop(CODEC_PDWN_SW);
 800204e:	2002      	movs	r0, #2
 8002050:	f7fe fadc 	bl	800060c <AUDIO_OUT_Stop>
    AUDIO_PLAYER_Start(FilePos);
 8002054:	4b36      	ldr	r3, [pc, #216]	; (8002130 <AUDIO_PLAYER_Process+0x22c>)
 8002056:	f9b3 3000 	ldrsh.w	r3, [r3]
 800205a:	b2db      	uxtb	r3, r3
 800205c:	4618      	mov	r0, r3
 800205e:	f7ff fef1 	bl	8001e44 <AUDIO_PLAYER_Start>
    break;    
 8002062:	e055      	b.n	8002110 <AUDIO_PLAYER_Process+0x20c>
    
  case AUDIO_STATE_PREVIOUS:
    if(--FilePos < 0)
 8002064:	4b32      	ldr	r3, [pc, #200]	; (8002130 <AUDIO_PLAYER_Process+0x22c>)
 8002066:	f9b3 3000 	ldrsh.w	r3, [r3]
 800206a:	b29b      	uxth	r3, r3
 800206c:	3b01      	subs	r3, #1
 800206e:	b29b      	uxth	r3, r3
 8002070:	b21a      	sxth	r2, r3
 8002072:	4b2f      	ldr	r3, [pc, #188]	; (8002130 <AUDIO_PLAYER_Process+0x22c>)
 8002074:	801a      	strh	r2, [r3, #0]
 8002076:	4b2e      	ldr	r3, [pc, #184]	; (8002130 <AUDIO_PLAYER_Process+0x22c>)
 8002078:	f9b3 3000 	ldrsh.w	r3, [r3]
 800207c:	2b00      	cmp	r3, #0
 800207e:	da07      	bge.n	8002090 <AUDIO_PLAYER_Process+0x18c>
    {
      FilePos = AUDIO_GetWavObjectNumber() - 1;
 8002080:	f7fe fe82 	bl	8000d88 <AUDIO_GetWavObjectNumber>
 8002084:	4603      	mov	r3, r0
 8002086:	3b01      	subs	r3, #1
 8002088:	b29b      	uxth	r3, r3
 800208a:	b21a      	sxth	r2, r3
 800208c:	4b28      	ldr	r3, [pc, #160]	; (8002130 <AUDIO_PLAYER_Process+0x22c>)
 800208e:	801a      	strh	r2, [r3, #0]
    }
    AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8002090:	2002      	movs	r0, #2
 8002092:	f7fe fabb 	bl	800060c <AUDIO_OUT_Stop>
    AUDIO_PLAYER_Start(FilePos);
 8002096:	4b26      	ldr	r3, [pc, #152]	; (8002130 <AUDIO_PLAYER_Process+0x22c>)
 8002098:	f9b3 3000 	ldrsh.w	r3, [r3]
 800209c:	b2db      	uxtb	r3, r3
 800209e:	4618      	mov	r0, r3
 80020a0:	f7ff fed0 	bl	8001e44 <AUDIO_PLAYER_Start>
    break;   
 80020a4:	e034      	b.n	8002110 <AUDIO_PLAYER_Process+0x20c>
    
  case AUDIO_STATE_PAUSE:
    AUDIO_OUT_Pause();
 80020a6:	f7fe fa85 	bl	80005b4 <AUDIO_OUT_Pause>
    AudioState = AUDIO_STATE_WAIT;
 80020aa:	4b1c      	ldr	r3, [pc, #112]	; (800211c <AUDIO_PLAYER_Process+0x218>)
 80020ac:	2201      	movs	r2, #1
 80020ae:	701a      	strb	r2, [r3, #0]
    break;
 80020b0:	e02e      	b.n	8002110 <AUDIO_PLAYER_Process+0x20c>
    
  case AUDIO_STATE_RESUME:
    AUDIO_OUT_Resume();
 80020b2:	f7fe fa95 	bl	80005e0 <AUDIO_OUT_Resume>
    AudioState = AUDIO_STATE_PLAY;
 80020b6:	4b19      	ldr	r3, [pc, #100]	; (800211c <AUDIO_PLAYER_Process+0x218>)
 80020b8:	2203      	movs	r2, #3
 80020ba:	701a      	strb	r2, [r3, #0]
    break;
 80020bc:	e028      	b.n	8002110 <AUDIO_PLAYER_Process+0x20c>
    
  case AUDIO_STATE_VOLUME_UP: 
    if( uwVolume <= 90)
 80020be:	4b1d      	ldr	r3, [pc, #116]	; (8002134 <AUDIO_PLAYER_Process+0x230>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	2b5a      	cmp	r3, #90	; 0x5a
 80020c4:	d804      	bhi.n	80020d0 <AUDIO_PLAYER_Process+0x1cc>
    {
      uwVolume += 10;
 80020c6:	4b1b      	ldr	r3, [pc, #108]	; (8002134 <AUDIO_PLAYER_Process+0x230>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	330a      	adds	r3, #10
 80020cc:	4a19      	ldr	r2, [pc, #100]	; (8002134 <AUDIO_PLAYER_Process+0x230>)
 80020ce:	6013      	str	r3, [r2, #0]
    }
    AUDIO_OUT_SetVolume(uwVolume);
 80020d0:	4b18      	ldr	r3, [pc, #96]	; (8002134 <AUDIO_PLAYER_Process+0x230>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7fe fac0 	bl	800065c <AUDIO_OUT_SetVolume>
    AudioState = AUDIO_STATE_PLAY;
 80020dc:	4b0f      	ldr	r3, [pc, #60]	; (800211c <AUDIO_PLAYER_Process+0x218>)
 80020de:	2203      	movs	r2, #3
 80020e0:	701a      	strb	r2, [r3, #0]
    break;
 80020e2:	e015      	b.n	8002110 <AUDIO_PLAYER_Process+0x20c>
    
  case AUDIO_STATE_VOLUME_DOWN:    
    if( uwVolume >= 10)
 80020e4:	4b13      	ldr	r3, [pc, #76]	; (8002134 <AUDIO_PLAYER_Process+0x230>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2b09      	cmp	r3, #9
 80020ea:	d904      	bls.n	80020f6 <AUDIO_PLAYER_Process+0x1f2>
    {
      uwVolume -= 10;
 80020ec:	4b11      	ldr	r3, [pc, #68]	; (8002134 <AUDIO_PLAYER_Process+0x230>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	3b0a      	subs	r3, #10
 80020f2:	4a10      	ldr	r2, [pc, #64]	; (8002134 <AUDIO_PLAYER_Process+0x230>)
 80020f4:	6013      	str	r3, [r2, #0]
    }
    AUDIO_OUT_SetVolume(uwVolume);
 80020f6:	4b0f      	ldr	r3, [pc, #60]	; (8002134 <AUDIO_PLAYER_Process+0x230>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7fe faad 	bl	800065c <AUDIO_OUT_SetVolume>
    AudioState = AUDIO_STATE_PLAY;
 8002102:	4b06      	ldr	r3, [pc, #24]	; (800211c <AUDIO_PLAYER_Process+0x218>)
 8002104:	2203      	movs	r2, #3
 8002106:	701a      	strb	r2, [r3, #0]
    break;
 8002108:	e002      	b.n	8002110 <AUDIO_PLAYER_Process+0x20c>
  case AUDIO_STATE_WAIT:
  case AUDIO_STATE_IDLE:
  case AUDIO_STATE_INIT:    
  default:
    /* Do Nothing */
    break;
 800210a:	bf00      	nop
 800210c:	e000      	b.n	8002110 <AUDIO_PLAYER_Process+0x20c>
    break;
 800210e:	bf00      	nop
  }
  return audio_error;
 8002110:	7bfb      	ldrb	r3, [r7, #15]
}
 8002112:	4618      	mov	r0, r3
 8002114:	3714      	adds	r7, #20
 8002116:	46bd      	mov	sp, r7
 8002118:	bd90      	pop	{r4, r7, pc}
 800211a:	bf00      	nop
 800211c:	20001330 	.word	0x20001330
 8002120:	20000328 	.word	0x20000328
 8002124:	20001710 	.word	0x20001710
 8002128:	2000173c 	.word	0x2000173c
 800212c:	20000b28 	.word	0x20000b28
 8002130:	20001332 	.word	0x20001332
 8002134:	2000003c 	.word	0x2000003c

08002138 <AUDIO_OUT_TransferComplete_CallBack>:
  * @brief  Calculates the remaining file size and new position of the pointer.
  * @param  None
  * @retval None
  */
void AUDIO_OUT_TransferComplete_CallBack(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
  if(AudioState == AUDIO_STATE_PLAY)
 800213c:	4b06      	ldr	r3, [pc, #24]	; (8002158 <AUDIO_OUT_TransferComplete_CallBack+0x20>)
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	2b03      	cmp	r3, #3
 8002142:	d104      	bne.n	800214e <AUDIO_OUT_TransferComplete_CallBack+0x16>
  {
    BufferCtl.state = BUFFER_OFFSET_FULL;
 8002144:	4b05      	ldr	r3, [pc, #20]	; (800215c <AUDIO_OUT_TransferComplete_CallBack+0x24>)
 8002146:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800214a:	2202      	movs	r2, #2
 800214c:	701a      	strb	r2, [r3, #0]
  }
}
 800214e:	bf00      	nop
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr
 8002158:	20001330 	.word	0x20001330
 800215c:	20000328 	.word	0x20000328

08002160 <AUDIO_OUT_HalfTransfer_CallBack>:
  * @brief  Manages the DMA Half Transfer complete interrupt.
  * @param  None
  * @retval None
  */
void AUDIO_OUT_HalfTransfer_CallBack(void)
{ 
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
  if(AudioState == AUDIO_STATE_PLAY)
 8002164:	4b06      	ldr	r3, [pc, #24]	; (8002180 <AUDIO_OUT_HalfTransfer_CallBack+0x20>)
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	2b03      	cmp	r3, #3
 800216a:	d104      	bne.n	8002176 <AUDIO_OUT_HalfTransfer_CallBack+0x16>
  {
    BufferCtl.state = BUFFER_OFFSET_HALF;
 800216c:	4b05      	ldr	r3, [pc, #20]	; (8002184 <AUDIO_OUT_HalfTransfer_CallBack+0x24>)
 800216e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002172:	2201      	movs	r2, #1
 8002174:	701a      	strb	r2, [r3, #0]
  }
}
 8002176:	bf00      	nop
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr
 8002180:	20001330 	.word	0x20001330
 8002184:	20000328 	.word	0x20000328

08002188 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002188:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021c0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800218c:	480d      	ldr	r0, [pc, #52]	; (80021c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800218e:	490e      	ldr	r1, [pc, #56]	; (80021c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002190:	4a0e      	ldr	r2, [pc, #56]	; (80021cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002192:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002194:	e002      	b.n	800219c <LoopCopyDataInit>

08002196 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002196:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002198:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800219a:	3304      	adds	r3, #4

0800219c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800219c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800219e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021a0:	d3f9      	bcc.n	8002196 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021a2:	4a0b      	ldr	r2, [pc, #44]	; (80021d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80021a4:	4c0b      	ldr	r4, [pc, #44]	; (80021d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80021a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021a8:	e001      	b.n	80021ae <LoopFillZerobss>

080021aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021ac:	3204      	adds	r2, #4

080021ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021b0:	d3fb      	bcc.n	80021aa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80021b2:	f7ff fe1d 	bl	8001df0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021b6:	f00d fe21 	bl	800fdfc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021ba:	f7ff f935 	bl	8001428 <main>
  bx  lr    
 80021be:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80021c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80021c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021c8:	200000b8 	.word	0x200000b8
  ldr r2, =_sidata
 80021cc:	0801044c 	.word	0x0801044c
  ldr r2, =_sbss
 80021d0:	200000b8 	.word	0x200000b8
  ldr r4, =_ebss
 80021d4:	20002608 	.word	0x20002608

080021d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021d8:	e7fe      	b.n	80021d8 <ADC_IRQHandler>
	...

080021dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021e0:	4b0e      	ldr	r3, [pc, #56]	; (800221c <HAL_Init+0x40>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a0d      	ldr	r2, [pc, #52]	; (800221c <HAL_Init+0x40>)
 80021e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80021ec:	4b0b      	ldr	r3, [pc, #44]	; (800221c <HAL_Init+0x40>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a0a      	ldr	r2, [pc, #40]	; (800221c <HAL_Init+0x40>)
 80021f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021f8:	4b08      	ldr	r3, [pc, #32]	; (800221c <HAL_Init+0x40>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a07      	ldr	r2, [pc, #28]	; (800221c <HAL_Init+0x40>)
 80021fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002202:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002204:	2003      	movs	r0, #3
 8002206:	f000 f8fc 	bl	8002402 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800220a:	2000      	movs	r0, #0
 800220c:	f7ff fcd8 	bl	8001bc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002210:	f7ff fb86 	bl	8001920 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002214:	2300      	movs	r3, #0
}
 8002216:	4618      	mov	r0, r3
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	40023c00 	.word	0x40023c00

08002220 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002224:	4b06      	ldr	r3, [pc, #24]	; (8002240 <HAL_IncTick+0x20>)
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	461a      	mov	r2, r3
 800222a:	4b06      	ldr	r3, [pc, #24]	; (8002244 <HAL_IncTick+0x24>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4413      	add	r3, r2
 8002230:	4a04      	ldr	r2, [pc, #16]	; (8002244 <HAL_IncTick+0x24>)
 8002232:	6013      	str	r3, [r2, #0]
}
 8002234:	bf00      	nop
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop
 8002240:	20000044 	.word	0x20000044
 8002244:	2000196c 	.word	0x2000196c

08002248 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
  return uwTick;
 800224c:	4b03      	ldr	r3, [pc, #12]	; (800225c <HAL_GetTick+0x14>)
 800224e:	681b      	ldr	r3, [r3, #0]
}
 8002250:	4618      	mov	r0, r3
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	2000196c 	.word	0x2000196c

08002260 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b084      	sub	sp, #16
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002268:	f7ff ffee 	bl	8002248 <HAL_GetTick>
 800226c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002278:	d005      	beq.n	8002286 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800227a:	4b0a      	ldr	r3, [pc, #40]	; (80022a4 <HAL_Delay+0x44>)
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	461a      	mov	r2, r3
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	4413      	add	r3, r2
 8002284:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002286:	bf00      	nop
 8002288:	f7ff ffde 	bl	8002248 <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	68fa      	ldr	r2, [r7, #12]
 8002294:	429a      	cmp	r2, r3
 8002296:	d8f7      	bhi.n	8002288 <HAL_Delay+0x28>
  {
  }
}
 8002298:	bf00      	nop
 800229a:	bf00      	nop
 800229c:	3710      	adds	r7, #16
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	20000044 	.word	0x20000044

080022a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b085      	sub	sp, #20
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f003 0307 	and.w	r3, r3, #7
 80022b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022b8:	4b0c      	ldr	r3, [pc, #48]	; (80022ec <__NVIC_SetPriorityGrouping+0x44>)
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022be:	68ba      	ldr	r2, [r7, #8]
 80022c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022c4:	4013      	ands	r3, r2
 80022c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022da:	4a04      	ldr	r2, [pc, #16]	; (80022ec <__NVIC_SetPriorityGrouping+0x44>)
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	60d3      	str	r3, [r2, #12]
}
 80022e0:	bf00      	nop
 80022e2:	3714      	adds	r7, #20
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr
 80022ec:	e000ed00 	.word	0xe000ed00

080022f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022f4:	4b04      	ldr	r3, [pc, #16]	; (8002308 <__NVIC_GetPriorityGrouping+0x18>)
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	0a1b      	lsrs	r3, r3, #8
 80022fa:	f003 0307 	and.w	r3, r3, #7
}
 80022fe:	4618      	mov	r0, r3
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr
 8002308:	e000ed00 	.word	0xe000ed00

0800230c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	4603      	mov	r3, r0
 8002314:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800231a:	2b00      	cmp	r3, #0
 800231c:	db0b      	blt.n	8002336 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800231e:	79fb      	ldrb	r3, [r7, #7]
 8002320:	f003 021f 	and.w	r2, r3, #31
 8002324:	4907      	ldr	r1, [pc, #28]	; (8002344 <__NVIC_EnableIRQ+0x38>)
 8002326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800232a:	095b      	lsrs	r3, r3, #5
 800232c:	2001      	movs	r0, #1
 800232e:	fa00 f202 	lsl.w	r2, r0, r2
 8002332:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002336:	bf00      	nop
 8002338:	370c      	adds	r7, #12
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	e000e100 	.word	0xe000e100

08002348 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	4603      	mov	r3, r0
 8002350:	6039      	str	r1, [r7, #0]
 8002352:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002354:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002358:	2b00      	cmp	r3, #0
 800235a:	db0a      	blt.n	8002372 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	b2da      	uxtb	r2, r3
 8002360:	490c      	ldr	r1, [pc, #48]	; (8002394 <__NVIC_SetPriority+0x4c>)
 8002362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002366:	0112      	lsls	r2, r2, #4
 8002368:	b2d2      	uxtb	r2, r2
 800236a:	440b      	add	r3, r1
 800236c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002370:	e00a      	b.n	8002388 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	b2da      	uxtb	r2, r3
 8002376:	4908      	ldr	r1, [pc, #32]	; (8002398 <__NVIC_SetPriority+0x50>)
 8002378:	79fb      	ldrb	r3, [r7, #7]
 800237a:	f003 030f 	and.w	r3, r3, #15
 800237e:	3b04      	subs	r3, #4
 8002380:	0112      	lsls	r2, r2, #4
 8002382:	b2d2      	uxtb	r2, r2
 8002384:	440b      	add	r3, r1
 8002386:	761a      	strb	r2, [r3, #24]
}
 8002388:	bf00      	nop
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr
 8002394:	e000e100 	.word	0xe000e100
 8002398:	e000ed00 	.word	0xe000ed00

0800239c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800239c:	b480      	push	{r7}
 800239e:	b089      	sub	sp, #36	; 0x24
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	60f8      	str	r0, [r7, #12]
 80023a4:	60b9      	str	r1, [r7, #8]
 80023a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f003 0307 	and.w	r3, r3, #7
 80023ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	f1c3 0307 	rsb	r3, r3, #7
 80023b6:	2b04      	cmp	r3, #4
 80023b8:	bf28      	it	cs
 80023ba:	2304      	movcs	r3, #4
 80023bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	3304      	adds	r3, #4
 80023c2:	2b06      	cmp	r3, #6
 80023c4:	d902      	bls.n	80023cc <NVIC_EncodePriority+0x30>
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	3b03      	subs	r3, #3
 80023ca:	e000      	b.n	80023ce <NVIC_EncodePriority+0x32>
 80023cc:	2300      	movs	r3, #0
 80023ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023d0:	f04f 32ff 	mov.w	r2, #4294967295
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	fa02 f303 	lsl.w	r3, r2, r3
 80023da:	43da      	mvns	r2, r3
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	401a      	ands	r2, r3
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023e4:	f04f 31ff 	mov.w	r1, #4294967295
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	fa01 f303 	lsl.w	r3, r1, r3
 80023ee:	43d9      	mvns	r1, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023f4:	4313      	orrs	r3, r2
         );
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3724      	adds	r7, #36	; 0x24
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr

08002402 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002402:	b580      	push	{r7, lr}
 8002404:	b082      	sub	sp, #8
 8002406:	af00      	add	r7, sp, #0
 8002408:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f7ff ff4c 	bl	80022a8 <__NVIC_SetPriorityGrouping>
}
 8002410:	bf00      	nop
 8002412:	3708      	adds	r7, #8
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}

08002418 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002418:	b580      	push	{r7, lr}
 800241a:	b086      	sub	sp, #24
 800241c:	af00      	add	r7, sp, #0
 800241e:	4603      	mov	r3, r0
 8002420:	60b9      	str	r1, [r7, #8]
 8002422:	607a      	str	r2, [r7, #4]
 8002424:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002426:	2300      	movs	r3, #0
 8002428:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800242a:	f7ff ff61 	bl	80022f0 <__NVIC_GetPriorityGrouping>
 800242e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	68b9      	ldr	r1, [r7, #8]
 8002434:	6978      	ldr	r0, [r7, #20]
 8002436:	f7ff ffb1 	bl	800239c <NVIC_EncodePriority>
 800243a:	4602      	mov	r2, r0
 800243c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002440:	4611      	mov	r1, r2
 8002442:	4618      	mov	r0, r3
 8002444:	f7ff ff80 	bl	8002348 <__NVIC_SetPriority>
}
 8002448:	bf00      	nop
 800244a:	3718      	adds	r7, #24
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}

08002450 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	4603      	mov	r3, r0
 8002458:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800245a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800245e:	4618      	mov	r0, r3
 8002460:	f7ff ff54 	bl	800230c <__NVIC_EnableIRQ>
}
 8002464:	bf00      	nop
 8002466:	3708      	adds	r7, #8
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}

0800246c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b086      	sub	sp, #24
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002474:	2300      	movs	r3, #0
 8002476:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002478:	f7ff fee6 	bl	8002248 <HAL_GetTick>
 800247c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d101      	bne.n	8002488 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e099      	b.n	80025bc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2202      	movs	r2, #2
 800248c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2200      	movs	r2, #0
 8002494:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f022 0201 	bic.w	r2, r2, #1
 80024a6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024a8:	e00f      	b.n	80024ca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80024aa:	f7ff fecd 	bl	8002248 <HAL_GetTick>
 80024ae:	4602      	mov	r2, r0
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	2b05      	cmp	r3, #5
 80024b6:	d908      	bls.n	80024ca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2220      	movs	r2, #32
 80024bc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2203      	movs	r2, #3
 80024c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e078      	b.n	80025bc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0301 	and.w	r3, r3, #1
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d1e8      	bne.n	80024aa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80024e0:	697a      	ldr	r2, [r7, #20]
 80024e2:	4b38      	ldr	r3, [pc, #224]	; (80025c4 <HAL_DMA_Init+0x158>)
 80024e4:	4013      	ands	r3, r2
 80024e6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	685a      	ldr	r2, [r3, #4]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	691b      	ldr	r3, [r3, #16]
 80024fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002502:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	699b      	ldr	r3, [r3, #24]
 8002508:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800250e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6a1b      	ldr	r3, [r3, #32]
 8002514:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002516:	697a      	ldr	r2, [r7, #20]
 8002518:	4313      	orrs	r3, r2
 800251a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002520:	2b04      	cmp	r3, #4
 8002522:	d107      	bne.n	8002534 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252c:	4313      	orrs	r3, r2
 800252e:	697a      	ldr	r2, [r7, #20]
 8002530:	4313      	orrs	r3, r2
 8002532:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	697a      	ldr	r2, [r7, #20]
 800253a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	695b      	ldr	r3, [r3, #20]
 8002542:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	f023 0307 	bic.w	r3, r3, #7
 800254a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002550:	697a      	ldr	r2, [r7, #20]
 8002552:	4313      	orrs	r3, r2
 8002554:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255a:	2b04      	cmp	r3, #4
 800255c:	d117      	bne.n	800258e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002562:	697a      	ldr	r2, [r7, #20]
 8002564:	4313      	orrs	r3, r2
 8002566:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800256c:	2b00      	cmp	r3, #0
 800256e:	d00e      	beq.n	800258e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f000 fb3d 	bl	8002bf0 <DMA_CheckFifoParam>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d008      	beq.n	800258e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2240      	movs	r2, #64	; 0x40
 8002580:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2201      	movs	r2, #1
 8002586:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800258a:	2301      	movs	r3, #1
 800258c:	e016      	b.n	80025bc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	697a      	ldr	r2, [r7, #20]
 8002594:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f000 faf4 	bl	8002b84 <DMA_CalcBaseAndBitshift>
 800259c:	4603      	mov	r3, r0
 800259e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025a4:	223f      	movs	r2, #63	; 0x3f
 80025a6:	409a      	lsls	r2, r3
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2200      	movs	r2, #0
 80025b0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2201      	movs	r2, #1
 80025b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80025ba:	2300      	movs	r3, #0
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3718      	adds	r7, #24
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	f010803f 	.word	0xf010803f

080025c8 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d101      	bne.n	80025da <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e050      	b.n	800267c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d101      	bne.n	80025ea <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80025e6:	2302      	movs	r3, #2
 80025e8:	e048      	b.n	800267c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f022 0201 	bic.w	r2, r2, #1
 80025f8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	2200      	movs	r2, #0
 8002600:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	2200      	movs	r2, #0
 8002608:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	2200      	movs	r2, #0
 8002610:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	2200      	movs	r2, #0
 8002618:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	2200      	movs	r2, #0
 8002620:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	2221      	movs	r2, #33	; 0x21
 8002628:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f000 faaa 	bl	8002b84 <DMA_CalcBaseAndBitshift>
 8002630:	4603      	mov	r3, r0
 8002632:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2200      	movs	r2, #0
 8002644:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2200      	movs	r2, #0
 8002650:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800265c:	223f      	movs	r2, #63	; 0x3f
 800265e:	409a      	lsls	r2, r3
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2200      	movs	r2, #0
 8002668:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2200      	movs	r2, #0
 8002676:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800267a:	2300      	movs	r3, #0
}
 800267c:	4618      	mov	r0, r3
 800267e:	3710      	adds	r7, #16
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}

08002684 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b086      	sub	sp, #24
 8002688:	af00      	add	r7, sp, #0
 800268a:	60f8      	str	r0, [r7, #12]
 800268c:	60b9      	str	r1, [r7, #8]
 800268e:	607a      	str	r2, [r7, #4]
 8002690:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002692:	2300      	movs	r3, #0
 8002694:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800269a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d101      	bne.n	80026aa <HAL_DMA_Start_IT+0x26>
 80026a6:	2302      	movs	r3, #2
 80026a8:	e040      	b.n	800272c <HAL_DMA_Start_IT+0xa8>
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2201      	movs	r2, #1
 80026ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d12f      	bne.n	800271e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2202      	movs	r2, #2
 80026c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2200      	movs	r2, #0
 80026ca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	68b9      	ldr	r1, [r7, #8]
 80026d2:	68f8      	ldr	r0, [r7, #12]
 80026d4:	f000 fa28 	bl	8002b28 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026dc:	223f      	movs	r2, #63	; 0x3f
 80026de:	409a      	lsls	r2, r3
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f042 0216 	orr.w	r2, r2, #22
 80026f2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d007      	beq.n	800270c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f042 0208 	orr.w	r2, r2, #8
 800270a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f042 0201 	orr.w	r2, r2, #1
 800271a:	601a      	str	r2, [r3, #0]
 800271c:	e005      	b.n	800272a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2200      	movs	r2, #0
 8002722:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002726:	2302      	movs	r3, #2
 8002728:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800272a:	7dfb      	ldrb	r3, [r7, #23]
}
 800272c:	4618      	mov	r0, r3
 800272e:	3718      	adds	r7, #24
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}

08002734 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002740:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002742:	f7ff fd81 	bl	8002248 <HAL_GetTick>
 8002746:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800274e:	b2db      	uxtb	r3, r3
 8002750:	2b02      	cmp	r3, #2
 8002752:	d008      	beq.n	8002766 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2280      	movs	r2, #128	; 0x80
 8002758:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e052      	b.n	800280c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f022 0216 	bic.w	r2, r2, #22
 8002774:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	695a      	ldr	r2, [r3, #20]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002784:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278a:	2b00      	cmp	r3, #0
 800278c:	d103      	bne.n	8002796 <HAL_DMA_Abort+0x62>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002792:	2b00      	cmp	r3, #0
 8002794:	d007      	beq.n	80027a6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f022 0208 	bic.w	r2, r2, #8
 80027a4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f022 0201 	bic.w	r2, r2, #1
 80027b4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027b6:	e013      	b.n	80027e0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80027b8:	f7ff fd46 	bl	8002248 <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	2b05      	cmp	r3, #5
 80027c4:	d90c      	bls.n	80027e0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2220      	movs	r2, #32
 80027ca:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2203      	movs	r2, #3
 80027d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80027dc:	2303      	movs	r3, #3
 80027de:	e015      	b.n	800280c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0301 	and.w	r3, r3, #1
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d1e4      	bne.n	80027b8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027f2:	223f      	movs	r2, #63	; 0x3f
 80027f4:	409a      	lsls	r2, r3
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2201      	movs	r2, #1
 80027fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800280a:	2300      	movs	r3, #0
}
 800280c:	4618      	mov	r0, r3
 800280e:	3710      	adds	r7, #16
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}

08002814 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b086      	sub	sp, #24
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800281c:	2300      	movs	r3, #0
 800281e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002820:	4b8e      	ldr	r3, [pc, #568]	; (8002a5c <HAL_DMA_IRQHandler+0x248>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a8e      	ldr	r2, [pc, #568]	; (8002a60 <HAL_DMA_IRQHandler+0x24c>)
 8002826:	fba2 2303 	umull	r2, r3, r2, r3
 800282a:	0a9b      	lsrs	r3, r3, #10
 800282c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002832:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800283e:	2208      	movs	r2, #8
 8002840:	409a      	lsls	r2, r3
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	4013      	ands	r3, r2
 8002846:	2b00      	cmp	r3, #0
 8002848:	d01a      	beq.n	8002880 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0304 	and.w	r3, r3, #4
 8002854:	2b00      	cmp	r3, #0
 8002856:	d013      	beq.n	8002880 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f022 0204 	bic.w	r2, r2, #4
 8002866:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800286c:	2208      	movs	r2, #8
 800286e:	409a      	lsls	r2, r3
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002878:	f043 0201 	orr.w	r2, r3, #1
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002884:	2201      	movs	r2, #1
 8002886:	409a      	lsls	r2, r3
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	4013      	ands	r3, r2
 800288c:	2b00      	cmp	r3, #0
 800288e:	d012      	beq.n	80028b6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	695b      	ldr	r3, [r3, #20]
 8002896:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800289a:	2b00      	cmp	r3, #0
 800289c:	d00b      	beq.n	80028b6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028a2:	2201      	movs	r2, #1
 80028a4:	409a      	lsls	r2, r3
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028ae:	f043 0202 	orr.w	r2, r3, #2
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ba:	2204      	movs	r2, #4
 80028bc:	409a      	lsls	r2, r3
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	4013      	ands	r3, r2
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d012      	beq.n	80028ec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0302 	and.w	r3, r3, #2
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d00b      	beq.n	80028ec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028d8:	2204      	movs	r2, #4
 80028da:	409a      	lsls	r2, r3
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028e4:	f043 0204 	orr.w	r2, r3, #4
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028f0:	2210      	movs	r2, #16
 80028f2:	409a      	lsls	r2, r3
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	4013      	ands	r3, r2
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d043      	beq.n	8002984 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0308 	and.w	r3, r3, #8
 8002906:	2b00      	cmp	r3, #0
 8002908:	d03c      	beq.n	8002984 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800290e:	2210      	movs	r2, #16
 8002910:	409a      	lsls	r2, r3
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d018      	beq.n	8002956 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d108      	bne.n	8002944 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002936:	2b00      	cmp	r3, #0
 8002938:	d024      	beq.n	8002984 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	4798      	blx	r3
 8002942:	e01f      	b.n	8002984 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002948:	2b00      	cmp	r3, #0
 800294a:	d01b      	beq.n	8002984 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	4798      	blx	r3
 8002954:	e016      	b.n	8002984 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002960:	2b00      	cmp	r3, #0
 8002962:	d107      	bne.n	8002974 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f022 0208 	bic.w	r2, r2, #8
 8002972:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002978:	2b00      	cmp	r3, #0
 800297a:	d003      	beq.n	8002984 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002988:	2220      	movs	r2, #32
 800298a:	409a      	lsls	r2, r3
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	4013      	ands	r3, r2
 8002990:	2b00      	cmp	r3, #0
 8002992:	f000 808f 	beq.w	8002ab4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0310 	and.w	r3, r3, #16
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	f000 8087 	beq.w	8002ab4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029aa:	2220      	movs	r2, #32
 80029ac:	409a      	lsls	r2, r3
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	2b05      	cmp	r3, #5
 80029bc:	d136      	bne.n	8002a2c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f022 0216 	bic.w	r2, r2, #22
 80029cc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	695a      	ldr	r2, [r3, #20]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029dc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d103      	bne.n	80029ee <HAL_DMA_IRQHandler+0x1da>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d007      	beq.n	80029fe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f022 0208 	bic.w	r2, r2, #8
 80029fc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a02:	223f      	movs	r2, #63	; 0x3f
 8002a04:	409a      	lsls	r2, r3
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d07e      	beq.n	8002b20 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	4798      	blx	r3
        }
        return;
 8002a2a:	e079      	b.n	8002b20 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d01d      	beq.n	8002a76 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d10d      	bne.n	8002a64 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d031      	beq.n	8002ab4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	4798      	blx	r3
 8002a58:	e02c      	b.n	8002ab4 <HAL_DMA_IRQHandler+0x2a0>
 8002a5a:	bf00      	nop
 8002a5c:	20000038 	.word	0x20000038
 8002a60:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d023      	beq.n	8002ab4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	4798      	blx	r3
 8002a74:	e01e      	b.n	8002ab4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d10f      	bne.n	8002aa4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f022 0210 	bic.w	r2, r2, #16
 8002a92:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2201      	movs	r2, #1
 8002a98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d003      	beq.n	8002ab4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d032      	beq.n	8002b22 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ac0:	f003 0301 	and.w	r3, r3, #1
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d022      	beq.n	8002b0e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2205      	movs	r2, #5
 8002acc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f022 0201 	bic.w	r2, r2, #1
 8002ade:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	3301      	adds	r3, #1
 8002ae4:	60bb      	str	r3, [r7, #8]
 8002ae6:	697a      	ldr	r2, [r7, #20]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d307      	bcc.n	8002afc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0301 	and.w	r3, r3, #1
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d1f2      	bne.n	8002ae0 <HAL_DMA_IRQHandler+0x2cc>
 8002afa:	e000      	b.n	8002afe <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002afc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2201      	movs	r2, #1
 8002b02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d005      	beq.n	8002b22 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	4798      	blx	r3
 8002b1e:	e000      	b.n	8002b22 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002b20:	bf00      	nop
    }
  }
}
 8002b22:	3718      	adds	r7, #24
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b085      	sub	sp, #20
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	60f8      	str	r0, [r7, #12]
 8002b30:	60b9      	str	r1, [r7, #8]
 8002b32:	607a      	str	r2, [r7, #4]
 8002b34:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002b44:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	683a      	ldr	r2, [r7, #0]
 8002b4c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	2b40      	cmp	r3, #64	; 0x40
 8002b54:	d108      	bne.n	8002b68 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	68ba      	ldr	r2, [r7, #8]
 8002b64:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002b66:	e007      	b.n	8002b78 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	68ba      	ldr	r2, [r7, #8]
 8002b6e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	60da      	str	r2, [r3, #12]
}
 8002b78:	bf00      	nop
 8002b7a:	3714      	adds	r7, #20
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b085      	sub	sp, #20
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	3b10      	subs	r3, #16
 8002b94:	4a14      	ldr	r2, [pc, #80]	; (8002be8 <DMA_CalcBaseAndBitshift+0x64>)
 8002b96:	fba2 2303 	umull	r2, r3, r2, r3
 8002b9a:	091b      	lsrs	r3, r3, #4
 8002b9c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b9e:	4a13      	ldr	r2, [pc, #76]	; (8002bec <DMA_CalcBaseAndBitshift+0x68>)
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	4413      	add	r3, r2
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2b03      	cmp	r3, #3
 8002bb0:	d909      	bls.n	8002bc6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002bba:	f023 0303 	bic.w	r3, r3, #3
 8002bbe:	1d1a      	adds	r2, r3, #4
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	659a      	str	r2, [r3, #88]	; 0x58
 8002bc4:	e007      	b.n	8002bd6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002bce:	f023 0303 	bic.w	r3, r3, #3
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3714      	adds	r7, #20
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	aaaaaaab 	.word	0xaaaaaaab
 8002bec:	0800ffe0 	.word	0x0800ffe0

08002bf0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b085      	sub	sp, #20
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c00:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	699b      	ldr	r3, [r3, #24]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d11f      	bne.n	8002c4a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	2b03      	cmp	r3, #3
 8002c0e:	d856      	bhi.n	8002cbe <DMA_CheckFifoParam+0xce>
 8002c10:	a201      	add	r2, pc, #4	; (adr r2, 8002c18 <DMA_CheckFifoParam+0x28>)
 8002c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c16:	bf00      	nop
 8002c18:	08002c29 	.word	0x08002c29
 8002c1c:	08002c3b 	.word	0x08002c3b
 8002c20:	08002c29 	.word	0x08002c29
 8002c24:	08002cbf 	.word	0x08002cbf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d046      	beq.n	8002cc2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c38:	e043      	b.n	8002cc2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c3e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c42:	d140      	bne.n	8002cc6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c48:	e03d      	b.n	8002cc6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	699b      	ldr	r3, [r3, #24]
 8002c4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c52:	d121      	bne.n	8002c98 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	2b03      	cmp	r3, #3
 8002c58:	d837      	bhi.n	8002cca <DMA_CheckFifoParam+0xda>
 8002c5a:	a201      	add	r2, pc, #4	; (adr r2, 8002c60 <DMA_CheckFifoParam+0x70>)
 8002c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c60:	08002c71 	.word	0x08002c71
 8002c64:	08002c77 	.word	0x08002c77
 8002c68:	08002c71 	.word	0x08002c71
 8002c6c:	08002c89 	.word	0x08002c89
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	73fb      	strb	r3, [r7, #15]
      break;
 8002c74:	e030      	b.n	8002cd8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d025      	beq.n	8002cce <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c86:	e022      	b.n	8002cce <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c8c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c90:	d11f      	bne.n	8002cd2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002c96:	e01c      	b.n	8002cd2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d903      	bls.n	8002ca6 <DMA_CheckFifoParam+0xb6>
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	2b03      	cmp	r3, #3
 8002ca2:	d003      	beq.n	8002cac <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002ca4:	e018      	b.n	8002cd8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	73fb      	strb	r3, [r7, #15]
      break;
 8002caa:	e015      	b.n	8002cd8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d00e      	beq.n	8002cd6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	73fb      	strb	r3, [r7, #15]
      break;
 8002cbc:	e00b      	b.n	8002cd6 <DMA_CheckFifoParam+0xe6>
      break;
 8002cbe:	bf00      	nop
 8002cc0:	e00a      	b.n	8002cd8 <DMA_CheckFifoParam+0xe8>
      break;
 8002cc2:	bf00      	nop
 8002cc4:	e008      	b.n	8002cd8 <DMA_CheckFifoParam+0xe8>
      break;
 8002cc6:	bf00      	nop
 8002cc8:	e006      	b.n	8002cd8 <DMA_CheckFifoParam+0xe8>
      break;
 8002cca:	bf00      	nop
 8002ccc:	e004      	b.n	8002cd8 <DMA_CheckFifoParam+0xe8>
      break;
 8002cce:	bf00      	nop
 8002cd0:	e002      	b.n	8002cd8 <DMA_CheckFifoParam+0xe8>
      break;   
 8002cd2:	bf00      	nop
 8002cd4:	e000      	b.n	8002cd8 <DMA_CheckFifoParam+0xe8>
      break;
 8002cd6:	bf00      	nop
    }
  } 
  
  return status; 
 8002cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3714      	adds	r7, #20
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr
 8002ce6:	bf00      	nop

08002ce8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b089      	sub	sp, #36	; 0x24
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cfe:	2300      	movs	r3, #0
 8002d00:	61fb      	str	r3, [r7, #28]
 8002d02:	e16b      	b.n	8002fdc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d04:	2201      	movs	r2, #1
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	697a      	ldr	r2, [r7, #20]
 8002d14:	4013      	ands	r3, r2
 8002d16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d18:	693a      	ldr	r2, [r7, #16]
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	f040 815a 	bne.w	8002fd6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f003 0303 	and.w	r3, r3, #3
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d005      	beq.n	8002d3a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d130      	bne.n	8002d9c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	005b      	lsls	r3, r3, #1
 8002d44:	2203      	movs	r2, #3
 8002d46:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4a:	43db      	mvns	r3, r3
 8002d4c:	69ba      	ldr	r2, [r7, #24]
 8002d4e:	4013      	ands	r3, r2
 8002d50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	68da      	ldr	r2, [r3, #12]
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	005b      	lsls	r3, r3, #1
 8002d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5e:	69ba      	ldr	r2, [r7, #24]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	69ba      	ldr	r2, [r7, #24]
 8002d68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d70:	2201      	movs	r2, #1
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	fa02 f303 	lsl.w	r3, r2, r3
 8002d78:	43db      	mvns	r3, r3
 8002d7a:	69ba      	ldr	r2, [r7, #24]
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	091b      	lsrs	r3, r3, #4
 8002d86:	f003 0201 	and.w	r2, r3, #1
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d90:	69ba      	ldr	r2, [r7, #24]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	69ba      	ldr	r2, [r7, #24]
 8002d9a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	f003 0303 	and.w	r3, r3, #3
 8002da4:	2b03      	cmp	r3, #3
 8002da6:	d017      	beq.n	8002dd8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	005b      	lsls	r3, r3, #1
 8002db2:	2203      	movs	r2, #3
 8002db4:	fa02 f303 	lsl.w	r3, r2, r3
 8002db8:	43db      	mvns	r3, r3
 8002dba:	69ba      	ldr	r2, [r7, #24]
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	689a      	ldr	r2, [r3, #8]
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	005b      	lsls	r3, r3, #1
 8002dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dcc:	69ba      	ldr	r2, [r7, #24]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	69ba      	ldr	r2, [r7, #24]
 8002dd6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f003 0303 	and.w	r3, r3, #3
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d123      	bne.n	8002e2c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	08da      	lsrs	r2, r3, #3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	3208      	adds	r2, #8
 8002dec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002df0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	f003 0307 	and.w	r3, r3, #7
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	220f      	movs	r2, #15
 8002dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002e00:	43db      	mvns	r3, r3
 8002e02:	69ba      	ldr	r2, [r7, #24]
 8002e04:	4013      	ands	r3, r2
 8002e06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	691a      	ldr	r2, [r3, #16]
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	f003 0307 	and.w	r3, r3, #7
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	fa02 f303 	lsl.w	r3, r2, r3
 8002e18:	69ba      	ldr	r2, [r7, #24]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	08da      	lsrs	r2, r3, #3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	3208      	adds	r2, #8
 8002e26:	69b9      	ldr	r1, [r7, #24]
 8002e28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	005b      	lsls	r3, r3, #1
 8002e36:	2203      	movs	r2, #3
 8002e38:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3c:	43db      	mvns	r3, r3
 8002e3e:	69ba      	ldr	r2, [r7, #24]
 8002e40:	4013      	ands	r3, r2
 8002e42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	f003 0203 	and.w	r2, r3, #3
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	005b      	lsls	r3, r3, #1
 8002e50:	fa02 f303 	lsl.w	r3, r2, r3
 8002e54:	69ba      	ldr	r2, [r7, #24]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	69ba      	ldr	r2, [r7, #24]
 8002e5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	f000 80b4 	beq.w	8002fd6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e6e:	2300      	movs	r3, #0
 8002e70:	60fb      	str	r3, [r7, #12]
 8002e72:	4b60      	ldr	r3, [pc, #384]	; (8002ff4 <HAL_GPIO_Init+0x30c>)
 8002e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e76:	4a5f      	ldr	r2, [pc, #380]	; (8002ff4 <HAL_GPIO_Init+0x30c>)
 8002e78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e7c:	6453      	str	r3, [r2, #68]	; 0x44
 8002e7e:	4b5d      	ldr	r3, [pc, #372]	; (8002ff4 <HAL_GPIO_Init+0x30c>)
 8002e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e86:	60fb      	str	r3, [r7, #12]
 8002e88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e8a:	4a5b      	ldr	r2, [pc, #364]	; (8002ff8 <HAL_GPIO_Init+0x310>)
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	089b      	lsrs	r3, r3, #2
 8002e90:	3302      	adds	r3, #2
 8002e92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	f003 0303 	and.w	r3, r3, #3
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	220f      	movs	r2, #15
 8002ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea6:	43db      	mvns	r3, r3
 8002ea8:	69ba      	ldr	r2, [r7, #24]
 8002eaa:	4013      	ands	r3, r2
 8002eac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4a52      	ldr	r2, [pc, #328]	; (8002ffc <HAL_GPIO_Init+0x314>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d02b      	beq.n	8002f0e <HAL_GPIO_Init+0x226>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4a51      	ldr	r2, [pc, #324]	; (8003000 <HAL_GPIO_Init+0x318>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d025      	beq.n	8002f0a <HAL_GPIO_Init+0x222>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4a50      	ldr	r2, [pc, #320]	; (8003004 <HAL_GPIO_Init+0x31c>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d01f      	beq.n	8002f06 <HAL_GPIO_Init+0x21e>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4a4f      	ldr	r2, [pc, #316]	; (8003008 <HAL_GPIO_Init+0x320>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d019      	beq.n	8002f02 <HAL_GPIO_Init+0x21a>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4a4e      	ldr	r2, [pc, #312]	; (800300c <HAL_GPIO_Init+0x324>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d013      	beq.n	8002efe <HAL_GPIO_Init+0x216>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a4d      	ldr	r2, [pc, #308]	; (8003010 <HAL_GPIO_Init+0x328>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d00d      	beq.n	8002efa <HAL_GPIO_Init+0x212>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a4c      	ldr	r2, [pc, #304]	; (8003014 <HAL_GPIO_Init+0x32c>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d007      	beq.n	8002ef6 <HAL_GPIO_Init+0x20e>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4a4b      	ldr	r2, [pc, #300]	; (8003018 <HAL_GPIO_Init+0x330>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d101      	bne.n	8002ef2 <HAL_GPIO_Init+0x20a>
 8002eee:	2307      	movs	r3, #7
 8002ef0:	e00e      	b.n	8002f10 <HAL_GPIO_Init+0x228>
 8002ef2:	2308      	movs	r3, #8
 8002ef4:	e00c      	b.n	8002f10 <HAL_GPIO_Init+0x228>
 8002ef6:	2306      	movs	r3, #6
 8002ef8:	e00a      	b.n	8002f10 <HAL_GPIO_Init+0x228>
 8002efa:	2305      	movs	r3, #5
 8002efc:	e008      	b.n	8002f10 <HAL_GPIO_Init+0x228>
 8002efe:	2304      	movs	r3, #4
 8002f00:	e006      	b.n	8002f10 <HAL_GPIO_Init+0x228>
 8002f02:	2303      	movs	r3, #3
 8002f04:	e004      	b.n	8002f10 <HAL_GPIO_Init+0x228>
 8002f06:	2302      	movs	r3, #2
 8002f08:	e002      	b.n	8002f10 <HAL_GPIO_Init+0x228>
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e000      	b.n	8002f10 <HAL_GPIO_Init+0x228>
 8002f0e:	2300      	movs	r3, #0
 8002f10:	69fa      	ldr	r2, [r7, #28]
 8002f12:	f002 0203 	and.w	r2, r2, #3
 8002f16:	0092      	lsls	r2, r2, #2
 8002f18:	4093      	lsls	r3, r2
 8002f1a:	69ba      	ldr	r2, [r7, #24]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f20:	4935      	ldr	r1, [pc, #212]	; (8002ff8 <HAL_GPIO_Init+0x310>)
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	089b      	lsrs	r3, r3, #2
 8002f26:	3302      	adds	r3, #2
 8002f28:	69ba      	ldr	r2, [r7, #24]
 8002f2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f2e:	4b3b      	ldr	r3, [pc, #236]	; (800301c <HAL_GPIO_Init+0x334>)
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	43db      	mvns	r3, r3
 8002f38:	69ba      	ldr	r2, [r7, #24]
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d003      	beq.n	8002f52 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002f4a:	69ba      	ldr	r2, [r7, #24]
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f52:	4a32      	ldr	r2, [pc, #200]	; (800301c <HAL_GPIO_Init+0x334>)
 8002f54:	69bb      	ldr	r3, [r7, #24]
 8002f56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f58:	4b30      	ldr	r3, [pc, #192]	; (800301c <HAL_GPIO_Init+0x334>)
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	43db      	mvns	r3, r3
 8002f62:	69ba      	ldr	r2, [r7, #24]
 8002f64:	4013      	ands	r3, r2
 8002f66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d003      	beq.n	8002f7c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002f74:	69ba      	ldr	r2, [r7, #24]
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f7c:	4a27      	ldr	r2, [pc, #156]	; (800301c <HAL_GPIO_Init+0x334>)
 8002f7e:	69bb      	ldr	r3, [r7, #24]
 8002f80:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f82:	4b26      	ldr	r3, [pc, #152]	; (800301c <HAL_GPIO_Init+0x334>)
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	43db      	mvns	r3, r3
 8002f8c:	69ba      	ldr	r2, [r7, #24]
 8002f8e:	4013      	ands	r3, r2
 8002f90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d003      	beq.n	8002fa6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002f9e:	69ba      	ldr	r2, [r7, #24]
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002fa6:	4a1d      	ldr	r2, [pc, #116]	; (800301c <HAL_GPIO_Init+0x334>)
 8002fa8:	69bb      	ldr	r3, [r7, #24]
 8002faa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fac:	4b1b      	ldr	r3, [pc, #108]	; (800301c <HAL_GPIO_Init+0x334>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	43db      	mvns	r3, r3
 8002fb6:	69ba      	ldr	r2, [r7, #24]
 8002fb8:	4013      	ands	r3, r2
 8002fba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d003      	beq.n	8002fd0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002fc8:	69ba      	ldr	r2, [r7, #24]
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002fd0:	4a12      	ldr	r2, [pc, #72]	; (800301c <HAL_GPIO_Init+0x334>)
 8002fd2:	69bb      	ldr	r3, [r7, #24]
 8002fd4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	3301      	adds	r3, #1
 8002fda:	61fb      	str	r3, [r7, #28]
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	2b0f      	cmp	r3, #15
 8002fe0:	f67f ae90 	bls.w	8002d04 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002fe4:	bf00      	nop
 8002fe6:	bf00      	nop
 8002fe8:	3724      	adds	r7, #36	; 0x24
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr
 8002ff2:	bf00      	nop
 8002ff4:	40023800 	.word	0x40023800
 8002ff8:	40013800 	.word	0x40013800
 8002ffc:	40020000 	.word	0x40020000
 8003000:	40020400 	.word	0x40020400
 8003004:	40020800 	.word	0x40020800
 8003008:	40020c00 	.word	0x40020c00
 800300c:	40021000 	.word	0x40021000
 8003010:	40021400 	.word	0x40021400
 8003014:	40021800 	.word	0x40021800
 8003018:	40021c00 	.word	0x40021c00
 800301c:	40013c00 	.word	0x40013c00

08003020 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003020:	b480      	push	{r7}
 8003022:	b087      	sub	sp, #28
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800302a:	2300      	movs	r3, #0
 800302c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800302e:	2300      	movs	r3, #0
 8003030:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8003032:	2300      	movs	r3, #0
 8003034:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003036:	2300      	movs	r3, #0
 8003038:	617b      	str	r3, [r7, #20]
 800303a:	e0cd      	b.n	80031d8 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800303c:	2201      	movs	r2, #1
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	fa02 f303 	lsl.w	r3, r2, r3
 8003044:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003046:	683a      	ldr	r2, [r7, #0]
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	4013      	ands	r3, r2
 800304c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800304e:	68fa      	ldr	r2, [r7, #12]
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	429a      	cmp	r2, r3
 8003054:	f040 80bd 	bne.w	80031d2 <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003058:	4a65      	ldr	r2, [pc, #404]	; (80031f0 <HAL_GPIO_DeInit+0x1d0>)
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	089b      	lsrs	r3, r3, #2
 800305e:	3302      	adds	r3, #2
 8003060:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003064:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	f003 0303 	and.w	r3, r3, #3
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	220f      	movs	r2, #15
 8003070:	fa02 f303 	lsl.w	r3, r2, r3
 8003074:	68ba      	ldr	r2, [r7, #8]
 8003076:	4013      	ands	r3, r2
 8003078:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a5d      	ldr	r2, [pc, #372]	; (80031f4 <HAL_GPIO_DeInit+0x1d4>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d02b      	beq.n	80030da <HAL_GPIO_DeInit+0xba>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4a5c      	ldr	r2, [pc, #368]	; (80031f8 <HAL_GPIO_DeInit+0x1d8>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d025      	beq.n	80030d6 <HAL_GPIO_DeInit+0xb6>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4a5b      	ldr	r2, [pc, #364]	; (80031fc <HAL_GPIO_DeInit+0x1dc>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d01f      	beq.n	80030d2 <HAL_GPIO_DeInit+0xb2>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4a5a      	ldr	r2, [pc, #360]	; (8003200 <HAL_GPIO_DeInit+0x1e0>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d019      	beq.n	80030ce <HAL_GPIO_DeInit+0xae>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4a59      	ldr	r2, [pc, #356]	; (8003204 <HAL_GPIO_DeInit+0x1e4>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d013      	beq.n	80030ca <HAL_GPIO_DeInit+0xaa>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a58      	ldr	r2, [pc, #352]	; (8003208 <HAL_GPIO_DeInit+0x1e8>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d00d      	beq.n	80030c6 <HAL_GPIO_DeInit+0xa6>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4a57      	ldr	r2, [pc, #348]	; (800320c <HAL_GPIO_DeInit+0x1ec>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d007      	beq.n	80030c2 <HAL_GPIO_DeInit+0xa2>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4a56      	ldr	r2, [pc, #344]	; (8003210 <HAL_GPIO_DeInit+0x1f0>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d101      	bne.n	80030be <HAL_GPIO_DeInit+0x9e>
 80030ba:	2307      	movs	r3, #7
 80030bc:	e00e      	b.n	80030dc <HAL_GPIO_DeInit+0xbc>
 80030be:	2308      	movs	r3, #8
 80030c0:	e00c      	b.n	80030dc <HAL_GPIO_DeInit+0xbc>
 80030c2:	2306      	movs	r3, #6
 80030c4:	e00a      	b.n	80030dc <HAL_GPIO_DeInit+0xbc>
 80030c6:	2305      	movs	r3, #5
 80030c8:	e008      	b.n	80030dc <HAL_GPIO_DeInit+0xbc>
 80030ca:	2304      	movs	r3, #4
 80030cc:	e006      	b.n	80030dc <HAL_GPIO_DeInit+0xbc>
 80030ce:	2303      	movs	r3, #3
 80030d0:	e004      	b.n	80030dc <HAL_GPIO_DeInit+0xbc>
 80030d2:	2302      	movs	r3, #2
 80030d4:	e002      	b.n	80030dc <HAL_GPIO_DeInit+0xbc>
 80030d6:	2301      	movs	r3, #1
 80030d8:	e000      	b.n	80030dc <HAL_GPIO_DeInit+0xbc>
 80030da:	2300      	movs	r3, #0
 80030dc:	697a      	ldr	r2, [r7, #20]
 80030de:	f002 0203 	and.w	r2, r2, #3
 80030e2:	0092      	lsls	r2, r2, #2
 80030e4:	4093      	lsls	r3, r2
 80030e6:	68ba      	ldr	r2, [r7, #8]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d132      	bne.n	8003152 <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80030ec:	4b49      	ldr	r3, [pc, #292]	; (8003214 <HAL_GPIO_DeInit+0x1f4>)
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	43db      	mvns	r3, r3
 80030f4:	4947      	ldr	r1, [pc, #284]	; (8003214 <HAL_GPIO_DeInit+0x1f4>)
 80030f6:	4013      	ands	r3, r2
 80030f8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80030fa:	4b46      	ldr	r3, [pc, #280]	; (8003214 <HAL_GPIO_DeInit+0x1f4>)
 80030fc:	685a      	ldr	r2, [r3, #4]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	43db      	mvns	r3, r3
 8003102:	4944      	ldr	r1, [pc, #272]	; (8003214 <HAL_GPIO_DeInit+0x1f4>)
 8003104:	4013      	ands	r3, r2
 8003106:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003108:	4b42      	ldr	r3, [pc, #264]	; (8003214 <HAL_GPIO_DeInit+0x1f4>)
 800310a:	68da      	ldr	r2, [r3, #12]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	43db      	mvns	r3, r3
 8003110:	4940      	ldr	r1, [pc, #256]	; (8003214 <HAL_GPIO_DeInit+0x1f4>)
 8003112:	4013      	ands	r3, r2
 8003114:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003116:	4b3f      	ldr	r3, [pc, #252]	; (8003214 <HAL_GPIO_DeInit+0x1f4>)
 8003118:	689a      	ldr	r2, [r3, #8]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	43db      	mvns	r3, r3
 800311e:	493d      	ldr	r1, [pc, #244]	; (8003214 <HAL_GPIO_DeInit+0x1f4>)
 8003120:	4013      	ands	r3, r2
 8003122:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	f003 0303 	and.w	r3, r3, #3
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	220f      	movs	r2, #15
 800312e:	fa02 f303 	lsl.w	r3, r2, r3
 8003132:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003134:	4a2e      	ldr	r2, [pc, #184]	; (80031f0 <HAL_GPIO_DeInit+0x1d0>)
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	089b      	lsrs	r3, r3, #2
 800313a:	3302      	adds	r3, #2
 800313c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	43da      	mvns	r2, r3
 8003144:	482a      	ldr	r0, [pc, #168]	; (80031f0 <HAL_GPIO_DeInit+0x1d0>)
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	089b      	lsrs	r3, r3, #2
 800314a:	400a      	ands	r2, r1
 800314c:	3302      	adds	r3, #2
 800314e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	005b      	lsls	r3, r3, #1
 800315a:	2103      	movs	r1, #3
 800315c:	fa01 f303 	lsl.w	r3, r1, r3
 8003160:	43db      	mvns	r3, r3
 8003162:	401a      	ands	r2, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	08da      	lsrs	r2, r3, #3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	3208      	adds	r2, #8
 8003170:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	f003 0307 	and.w	r3, r3, #7
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	220f      	movs	r2, #15
 800317e:	fa02 f303 	lsl.w	r3, r2, r3
 8003182:	43db      	mvns	r3, r3
 8003184:	697a      	ldr	r2, [r7, #20]
 8003186:	08d2      	lsrs	r2, r2, #3
 8003188:	4019      	ands	r1, r3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	3208      	adds	r2, #8
 800318e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	68da      	ldr	r2, [r3, #12]
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	005b      	lsls	r3, r3, #1
 800319a:	2103      	movs	r1, #3
 800319c:	fa01 f303 	lsl.w	r3, r1, r3
 80031a0:	43db      	mvns	r3, r3
 80031a2:	401a      	ands	r2, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	685a      	ldr	r2, [r3, #4]
 80031ac:	2101      	movs	r1, #1
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	fa01 f303 	lsl.w	r3, r1, r3
 80031b4:	43db      	mvns	r3, r3
 80031b6:	401a      	ands	r2, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	689a      	ldr	r2, [r3, #8]
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	005b      	lsls	r3, r3, #1
 80031c4:	2103      	movs	r1, #3
 80031c6:	fa01 f303 	lsl.w	r3, r1, r3
 80031ca:	43db      	mvns	r3, r3
 80031cc:	401a      	ands	r2, r3
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	3301      	adds	r3, #1
 80031d6:	617b      	str	r3, [r7, #20]
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	2b0f      	cmp	r3, #15
 80031dc:	f67f af2e 	bls.w	800303c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80031e0:	bf00      	nop
 80031e2:	bf00      	nop
 80031e4:	371c      	adds	r7, #28
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr
 80031ee:	bf00      	nop
 80031f0:	40013800 	.word	0x40013800
 80031f4:	40020000 	.word	0x40020000
 80031f8:	40020400 	.word	0x40020400
 80031fc:	40020800 	.word	0x40020800
 8003200:	40020c00 	.word	0x40020c00
 8003204:	40021000 	.word	0x40021000
 8003208:	40021400 	.word	0x40021400
 800320c:	40021800 	.word	0x40021800
 8003210:	40021c00 	.word	0x40021c00
 8003214:	40013c00 	.word	0x40013c00

08003218 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	460b      	mov	r3, r1
 8003222:	807b      	strh	r3, [r7, #2]
 8003224:	4613      	mov	r3, r2
 8003226:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003228:	787b      	ldrb	r3, [r7, #1]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d003      	beq.n	8003236 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800322e:	887a      	ldrh	r2, [r7, #2]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003234:	e003      	b.n	800323e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003236:	887b      	ldrh	r3, [r7, #2]
 8003238:	041a      	lsls	r2, r3, #16
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	619a      	str	r2, [r3, #24]
}
 800323e:	bf00      	nop
 8003240:	370c      	adds	r7, #12
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr
	...

0800324c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b082      	sub	sp, #8
 8003250:	af00      	add	r7, sp, #0
 8003252:	4603      	mov	r3, r0
 8003254:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003256:	4b08      	ldr	r3, [pc, #32]	; (8003278 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003258:	695a      	ldr	r2, [r3, #20]
 800325a:	88fb      	ldrh	r3, [r7, #6]
 800325c:	4013      	ands	r3, r2
 800325e:	2b00      	cmp	r3, #0
 8003260:	d006      	beq.n	8003270 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003262:	4a05      	ldr	r2, [pc, #20]	; (8003278 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003264:	88fb      	ldrh	r3, [r7, #6]
 8003266:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003268:	88fb      	ldrh	r3, [r7, #6]
 800326a:	4618      	mov	r0, r3
 800326c:	f7fe facc 	bl	8001808 <HAL_GPIO_EXTI_Callback>
  }
}
 8003270:	bf00      	nop
 8003272:	3708      	adds	r7, #8
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}
 8003278:	40013c00 	.word	0x40013c00

0800327c <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800327c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800327e:	b08f      	sub	sp, #60	; 0x3c
 8003280:	af0a      	add	r7, sp, #40	; 0x28
 8003282:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d101      	bne.n	800328e <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e054      	b.n	8003338 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800329a:	b2db      	uxtb	r3, r3
 800329c:	2b00      	cmp	r3, #0
 800329e:	d106      	bne.n	80032ae <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2200      	movs	r2, #0
 80032a4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	f00c f9c9 	bl	800f640 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2203      	movs	r2, #3
 80032b2:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d102      	bne.n	80032c8 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4618      	mov	r0, r3
 80032ce:	f004 fdd3 	bl	8007e78 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	603b      	str	r3, [r7, #0]
 80032d8:	687e      	ldr	r6, [r7, #4]
 80032da:	466d      	mov	r5, sp
 80032dc:	f106 0410 	add.w	r4, r6, #16
 80032e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032e8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80032ec:	e885 0003 	stmia.w	r5, {r0, r1}
 80032f0:	1d33      	adds	r3, r6, #4
 80032f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80032f4:	6838      	ldr	r0, [r7, #0]
 80032f6:	f004 fd4d 	bl	8007d94 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2101      	movs	r1, #1
 8003300:	4618      	mov	r0, r3
 8003302:	f004 fdca 	bl	8007e9a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	603b      	str	r3, [r7, #0]
 800330c:	687e      	ldr	r6, [r7, #4]
 800330e:	466d      	mov	r5, sp
 8003310:	f106 0410 	add.w	r4, r6, #16
 8003314:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003316:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003318:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800331a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800331c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003320:	e885 0003 	stmia.w	r5, {r0, r1}
 8003324:	1d33      	adds	r3, r6, #4
 8003326:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003328:	6838      	ldr	r0, [r7, #0]
 800332a:	f004 ff53 	bl	80081d4 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2201      	movs	r2, #1
 8003332:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8003336:	2300      	movs	r3, #0
}
 8003338:	4618      	mov	r0, r3
 800333a:	3714      	adds	r7, #20
 800333c:	46bd      	mov	sp, r7
 800333e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003340 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8003340:	b590      	push	{r4, r7, lr}
 8003342:	b089      	sub	sp, #36	; 0x24
 8003344:	af04      	add	r7, sp, #16
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	4608      	mov	r0, r1
 800334a:	4611      	mov	r1, r2
 800334c:	461a      	mov	r2, r3
 800334e:	4603      	mov	r3, r0
 8003350:	70fb      	strb	r3, [r7, #3]
 8003352:	460b      	mov	r3, r1
 8003354:	70bb      	strb	r3, [r7, #2]
 8003356:	4613      	mov	r3, r2
 8003358:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003360:	2b01      	cmp	r3, #1
 8003362:	d101      	bne.n	8003368 <HAL_HCD_HC_Init+0x28>
 8003364:	2302      	movs	r3, #2
 8003366:	e076      	b.n	8003456 <HAL_HCD_HC_Init+0x116>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8003370:	78fb      	ldrb	r3, [r7, #3]
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	212c      	movs	r1, #44	; 0x2c
 8003376:	fb01 f303 	mul.w	r3, r1, r3
 800337a:	4413      	add	r3, r2
 800337c:	333d      	adds	r3, #61	; 0x3d
 800337e:	2200      	movs	r2, #0
 8003380:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003382:	78fb      	ldrb	r3, [r7, #3]
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	212c      	movs	r1, #44	; 0x2c
 8003388:	fb01 f303 	mul.w	r3, r1, r3
 800338c:	4413      	add	r3, r2
 800338e:	3338      	adds	r3, #56	; 0x38
 8003390:	787a      	ldrb	r2, [r7, #1]
 8003392:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8003394:	78fb      	ldrb	r3, [r7, #3]
 8003396:	687a      	ldr	r2, [r7, #4]
 8003398:	212c      	movs	r1, #44	; 0x2c
 800339a:	fb01 f303 	mul.w	r3, r1, r3
 800339e:	4413      	add	r3, r2
 80033a0:	3340      	adds	r3, #64	; 0x40
 80033a2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80033a4:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80033a6:	78fb      	ldrb	r3, [r7, #3]
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	212c      	movs	r1, #44	; 0x2c
 80033ac:	fb01 f303 	mul.w	r3, r1, r3
 80033b0:	4413      	add	r3, r2
 80033b2:	3339      	adds	r3, #57	; 0x39
 80033b4:	78fa      	ldrb	r2, [r7, #3]
 80033b6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80033b8:	78fb      	ldrb	r3, [r7, #3]
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	212c      	movs	r1, #44	; 0x2c
 80033be:	fb01 f303 	mul.w	r3, r1, r3
 80033c2:	4413      	add	r3, r2
 80033c4:	333f      	adds	r3, #63	; 0x3f
 80033c6:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80033ca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80033cc:	78fb      	ldrb	r3, [r7, #3]
 80033ce:	78ba      	ldrb	r2, [r7, #2]
 80033d0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80033d4:	b2d0      	uxtb	r0, r2
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	212c      	movs	r1, #44	; 0x2c
 80033da:	fb01 f303 	mul.w	r3, r1, r3
 80033de:	4413      	add	r3, r2
 80033e0:	333a      	adds	r3, #58	; 0x3a
 80033e2:	4602      	mov	r2, r0
 80033e4:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80033e6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	da09      	bge.n	8003402 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80033ee:	78fb      	ldrb	r3, [r7, #3]
 80033f0:	687a      	ldr	r2, [r7, #4]
 80033f2:	212c      	movs	r1, #44	; 0x2c
 80033f4:	fb01 f303 	mul.w	r3, r1, r3
 80033f8:	4413      	add	r3, r2
 80033fa:	333b      	adds	r3, #59	; 0x3b
 80033fc:	2201      	movs	r2, #1
 80033fe:	701a      	strb	r2, [r3, #0]
 8003400:	e008      	b.n	8003414 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003402:	78fb      	ldrb	r3, [r7, #3]
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	212c      	movs	r1, #44	; 0x2c
 8003408:	fb01 f303 	mul.w	r3, r1, r3
 800340c:	4413      	add	r3, r2
 800340e:	333b      	adds	r3, #59	; 0x3b
 8003410:	2200      	movs	r2, #0
 8003412:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8003414:	78fb      	ldrb	r3, [r7, #3]
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	212c      	movs	r1, #44	; 0x2c
 800341a:	fb01 f303 	mul.w	r3, r1, r3
 800341e:	4413      	add	r3, r2
 8003420:	333c      	adds	r3, #60	; 0x3c
 8003422:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003426:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6818      	ldr	r0, [r3, #0]
 800342c:	787c      	ldrb	r4, [r7, #1]
 800342e:	78ba      	ldrb	r2, [r7, #2]
 8003430:	78f9      	ldrb	r1, [r7, #3]
 8003432:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003434:	9302      	str	r3, [sp, #8]
 8003436:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800343a:	9301      	str	r3, [sp, #4]
 800343c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003440:	9300      	str	r3, [sp, #0]
 8003442:	4623      	mov	r3, r4
 8003444:	f005 f84c 	bl	80084e0 <USB_HC_Init>
 8003448:	4603      	mov	r3, r0
 800344a:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2200      	movs	r2, #0
 8003450:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003454:	7bfb      	ldrb	r3, [r7, #15]
}
 8003456:	4618      	mov	r0, r3
 8003458:	3714      	adds	r7, #20
 800345a:	46bd      	mov	sp, r7
 800345c:	bd90      	pop	{r4, r7, pc}

0800345e <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800345e:	b580      	push	{r7, lr}
 8003460:	b084      	sub	sp, #16
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
 8003466:	460b      	mov	r3, r1
 8003468:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800346a:	2300      	movs	r3, #0
 800346c:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003474:	2b01      	cmp	r3, #1
 8003476:	d101      	bne.n	800347c <HAL_HCD_HC_Halt+0x1e>
 8003478:	2302      	movs	r3, #2
 800347a:	e00f      	b.n	800349c <HAL_HCD_HC_Halt+0x3e>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	78fa      	ldrb	r2, [r7, #3]
 800348a:	4611      	mov	r1, r2
 800348c:	4618      	mov	r0, r3
 800348e:	f005 fa9c 	bl	80089ca <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800349a:	7bfb      	ldrb	r3, [r7, #15]
}
 800349c:	4618      	mov	r0, r3
 800349e:	3710      	adds	r7, #16
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}

080034a4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b082      	sub	sp, #8
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	4608      	mov	r0, r1
 80034ae:	4611      	mov	r1, r2
 80034b0:	461a      	mov	r2, r3
 80034b2:	4603      	mov	r3, r0
 80034b4:	70fb      	strb	r3, [r7, #3]
 80034b6:	460b      	mov	r3, r1
 80034b8:	70bb      	strb	r3, [r7, #2]
 80034ba:	4613      	mov	r3, r2
 80034bc:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80034be:	78fb      	ldrb	r3, [r7, #3]
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	212c      	movs	r1, #44	; 0x2c
 80034c4:	fb01 f303 	mul.w	r3, r1, r3
 80034c8:	4413      	add	r3, r2
 80034ca:	333b      	adds	r3, #59	; 0x3b
 80034cc:	78ba      	ldrb	r2, [r7, #2]
 80034ce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80034d0:	78fb      	ldrb	r3, [r7, #3]
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	212c      	movs	r1, #44	; 0x2c
 80034d6:	fb01 f303 	mul.w	r3, r1, r3
 80034da:	4413      	add	r3, r2
 80034dc:	333f      	adds	r3, #63	; 0x3f
 80034de:	787a      	ldrb	r2, [r7, #1]
 80034e0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80034e2:	7c3b      	ldrb	r3, [r7, #16]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d112      	bne.n	800350e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80034e8:	78fb      	ldrb	r3, [r7, #3]
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	212c      	movs	r1, #44	; 0x2c
 80034ee:	fb01 f303 	mul.w	r3, r1, r3
 80034f2:	4413      	add	r3, r2
 80034f4:	3342      	adds	r3, #66	; 0x42
 80034f6:	2203      	movs	r2, #3
 80034f8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80034fa:	78fb      	ldrb	r3, [r7, #3]
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	212c      	movs	r1, #44	; 0x2c
 8003500:	fb01 f303 	mul.w	r3, r1, r3
 8003504:	4413      	add	r3, r2
 8003506:	333d      	adds	r3, #61	; 0x3d
 8003508:	7f3a      	ldrb	r2, [r7, #28]
 800350a:	701a      	strb	r2, [r3, #0]
 800350c:	e008      	b.n	8003520 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800350e:	78fb      	ldrb	r3, [r7, #3]
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	212c      	movs	r1, #44	; 0x2c
 8003514:	fb01 f303 	mul.w	r3, r1, r3
 8003518:	4413      	add	r3, r2
 800351a:	3342      	adds	r3, #66	; 0x42
 800351c:	2202      	movs	r2, #2
 800351e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003520:	787b      	ldrb	r3, [r7, #1]
 8003522:	2b03      	cmp	r3, #3
 8003524:	f200 80c6 	bhi.w	80036b4 <HAL_HCD_HC_SubmitRequest+0x210>
 8003528:	a201      	add	r2, pc, #4	; (adr r2, 8003530 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800352a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800352e:	bf00      	nop
 8003530:	08003541 	.word	0x08003541
 8003534:	080036a1 	.word	0x080036a1
 8003538:	080035a5 	.word	0x080035a5
 800353c:	08003623 	.word	0x08003623
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8003540:	7c3b      	ldrb	r3, [r7, #16]
 8003542:	2b01      	cmp	r3, #1
 8003544:	f040 80b8 	bne.w	80036b8 <HAL_HCD_HC_SubmitRequest+0x214>
 8003548:	78bb      	ldrb	r3, [r7, #2]
 800354a:	2b00      	cmp	r3, #0
 800354c:	f040 80b4 	bne.w	80036b8 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8003550:	8b3b      	ldrh	r3, [r7, #24]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d108      	bne.n	8003568 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8003556:	78fb      	ldrb	r3, [r7, #3]
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	212c      	movs	r1, #44	; 0x2c
 800355c:	fb01 f303 	mul.w	r3, r1, r3
 8003560:	4413      	add	r3, r2
 8003562:	3355      	adds	r3, #85	; 0x55
 8003564:	2201      	movs	r2, #1
 8003566:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003568:	78fb      	ldrb	r3, [r7, #3]
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	212c      	movs	r1, #44	; 0x2c
 800356e:	fb01 f303 	mul.w	r3, r1, r3
 8003572:	4413      	add	r3, r2
 8003574:	3355      	adds	r3, #85	; 0x55
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d109      	bne.n	8003590 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800357c:	78fb      	ldrb	r3, [r7, #3]
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	212c      	movs	r1, #44	; 0x2c
 8003582:	fb01 f303 	mul.w	r3, r1, r3
 8003586:	4413      	add	r3, r2
 8003588:	3342      	adds	r3, #66	; 0x42
 800358a:	2200      	movs	r2, #0
 800358c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800358e:	e093      	b.n	80036b8 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003590:	78fb      	ldrb	r3, [r7, #3]
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	212c      	movs	r1, #44	; 0x2c
 8003596:	fb01 f303 	mul.w	r3, r1, r3
 800359a:	4413      	add	r3, r2
 800359c:	3342      	adds	r3, #66	; 0x42
 800359e:	2202      	movs	r2, #2
 80035a0:	701a      	strb	r2, [r3, #0]
      break;
 80035a2:	e089      	b.n	80036b8 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80035a4:	78bb      	ldrb	r3, [r7, #2]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d11d      	bne.n	80035e6 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80035aa:	78fb      	ldrb	r3, [r7, #3]
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	212c      	movs	r1, #44	; 0x2c
 80035b0:	fb01 f303 	mul.w	r3, r1, r3
 80035b4:	4413      	add	r3, r2
 80035b6:	3355      	adds	r3, #85	; 0x55
 80035b8:	781b      	ldrb	r3, [r3, #0]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d109      	bne.n	80035d2 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80035be:	78fb      	ldrb	r3, [r7, #3]
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	212c      	movs	r1, #44	; 0x2c
 80035c4:	fb01 f303 	mul.w	r3, r1, r3
 80035c8:	4413      	add	r3, r2
 80035ca:	3342      	adds	r3, #66	; 0x42
 80035cc:	2200      	movs	r2, #0
 80035ce:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80035d0:	e073      	b.n	80036ba <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80035d2:	78fb      	ldrb	r3, [r7, #3]
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	212c      	movs	r1, #44	; 0x2c
 80035d8:	fb01 f303 	mul.w	r3, r1, r3
 80035dc:	4413      	add	r3, r2
 80035de:	3342      	adds	r3, #66	; 0x42
 80035e0:	2202      	movs	r2, #2
 80035e2:	701a      	strb	r2, [r3, #0]
      break;
 80035e4:	e069      	b.n	80036ba <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80035e6:	78fb      	ldrb	r3, [r7, #3]
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	212c      	movs	r1, #44	; 0x2c
 80035ec:	fb01 f303 	mul.w	r3, r1, r3
 80035f0:	4413      	add	r3, r2
 80035f2:	3354      	adds	r3, #84	; 0x54
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d109      	bne.n	800360e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80035fa:	78fb      	ldrb	r3, [r7, #3]
 80035fc:	687a      	ldr	r2, [r7, #4]
 80035fe:	212c      	movs	r1, #44	; 0x2c
 8003600:	fb01 f303 	mul.w	r3, r1, r3
 8003604:	4413      	add	r3, r2
 8003606:	3342      	adds	r3, #66	; 0x42
 8003608:	2200      	movs	r2, #0
 800360a:	701a      	strb	r2, [r3, #0]
      break;
 800360c:	e055      	b.n	80036ba <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800360e:	78fb      	ldrb	r3, [r7, #3]
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	212c      	movs	r1, #44	; 0x2c
 8003614:	fb01 f303 	mul.w	r3, r1, r3
 8003618:	4413      	add	r3, r2
 800361a:	3342      	adds	r3, #66	; 0x42
 800361c:	2202      	movs	r2, #2
 800361e:	701a      	strb	r2, [r3, #0]
      break;
 8003620:	e04b      	b.n	80036ba <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003622:	78bb      	ldrb	r3, [r7, #2]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d11d      	bne.n	8003664 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003628:	78fb      	ldrb	r3, [r7, #3]
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	212c      	movs	r1, #44	; 0x2c
 800362e:	fb01 f303 	mul.w	r3, r1, r3
 8003632:	4413      	add	r3, r2
 8003634:	3355      	adds	r3, #85	; 0x55
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d109      	bne.n	8003650 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800363c:	78fb      	ldrb	r3, [r7, #3]
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	212c      	movs	r1, #44	; 0x2c
 8003642:	fb01 f303 	mul.w	r3, r1, r3
 8003646:	4413      	add	r3, r2
 8003648:	3342      	adds	r3, #66	; 0x42
 800364a:	2200      	movs	r2, #0
 800364c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800364e:	e034      	b.n	80036ba <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003650:	78fb      	ldrb	r3, [r7, #3]
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	212c      	movs	r1, #44	; 0x2c
 8003656:	fb01 f303 	mul.w	r3, r1, r3
 800365a:	4413      	add	r3, r2
 800365c:	3342      	adds	r3, #66	; 0x42
 800365e:	2202      	movs	r2, #2
 8003660:	701a      	strb	r2, [r3, #0]
      break;
 8003662:	e02a      	b.n	80036ba <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003664:	78fb      	ldrb	r3, [r7, #3]
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	212c      	movs	r1, #44	; 0x2c
 800366a:	fb01 f303 	mul.w	r3, r1, r3
 800366e:	4413      	add	r3, r2
 8003670:	3354      	adds	r3, #84	; 0x54
 8003672:	781b      	ldrb	r3, [r3, #0]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d109      	bne.n	800368c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003678:	78fb      	ldrb	r3, [r7, #3]
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	212c      	movs	r1, #44	; 0x2c
 800367e:	fb01 f303 	mul.w	r3, r1, r3
 8003682:	4413      	add	r3, r2
 8003684:	3342      	adds	r3, #66	; 0x42
 8003686:	2200      	movs	r2, #0
 8003688:	701a      	strb	r2, [r3, #0]
      break;
 800368a:	e016      	b.n	80036ba <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800368c:	78fb      	ldrb	r3, [r7, #3]
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	212c      	movs	r1, #44	; 0x2c
 8003692:	fb01 f303 	mul.w	r3, r1, r3
 8003696:	4413      	add	r3, r2
 8003698:	3342      	adds	r3, #66	; 0x42
 800369a:	2202      	movs	r2, #2
 800369c:	701a      	strb	r2, [r3, #0]
      break;
 800369e:	e00c      	b.n	80036ba <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80036a0:	78fb      	ldrb	r3, [r7, #3]
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	212c      	movs	r1, #44	; 0x2c
 80036a6:	fb01 f303 	mul.w	r3, r1, r3
 80036aa:	4413      	add	r3, r2
 80036ac:	3342      	adds	r3, #66	; 0x42
 80036ae:	2200      	movs	r2, #0
 80036b0:	701a      	strb	r2, [r3, #0]
      break;
 80036b2:	e002      	b.n	80036ba <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80036b4:	bf00      	nop
 80036b6:	e000      	b.n	80036ba <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80036b8:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80036ba:	78fb      	ldrb	r3, [r7, #3]
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	212c      	movs	r1, #44	; 0x2c
 80036c0:	fb01 f303 	mul.w	r3, r1, r3
 80036c4:	4413      	add	r3, r2
 80036c6:	3344      	adds	r3, #68	; 0x44
 80036c8:	697a      	ldr	r2, [r7, #20]
 80036ca:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80036cc:	78fb      	ldrb	r3, [r7, #3]
 80036ce:	8b3a      	ldrh	r2, [r7, #24]
 80036d0:	6879      	ldr	r1, [r7, #4]
 80036d2:	202c      	movs	r0, #44	; 0x2c
 80036d4:	fb00 f303 	mul.w	r3, r0, r3
 80036d8:	440b      	add	r3, r1
 80036da:	334c      	adds	r3, #76	; 0x4c
 80036dc:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80036de:	78fb      	ldrb	r3, [r7, #3]
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	212c      	movs	r1, #44	; 0x2c
 80036e4:	fb01 f303 	mul.w	r3, r1, r3
 80036e8:	4413      	add	r3, r2
 80036ea:	3360      	adds	r3, #96	; 0x60
 80036ec:	2200      	movs	r2, #0
 80036ee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80036f0:	78fb      	ldrb	r3, [r7, #3]
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	212c      	movs	r1, #44	; 0x2c
 80036f6:	fb01 f303 	mul.w	r3, r1, r3
 80036fa:	4413      	add	r3, r2
 80036fc:	3350      	adds	r3, #80	; 0x50
 80036fe:	2200      	movs	r2, #0
 8003700:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003702:	78fb      	ldrb	r3, [r7, #3]
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	212c      	movs	r1, #44	; 0x2c
 8003708:	fb01 f303 	mul.w	r3, r1, r3
 800370c:	4413      	add	r3, r2
 800370e:	3339      	adds	r3, #57	; 0x39
 8003710:	78fa      	ldrb	r2, [r7, #3]
 8003712:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003714:	78fb      	ldrb	r3, [r7, #3]
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	212c      	movs	r1, #44	; 0x2c
 800371a:	fb01 f303 	mul.w	r3, r1, r3
 800371e:	4413      	add	r3, r2
 8003720:	3361      	adds	r3, #97	; 0x61
 8003722:	2200      	movs	r2, #0
 8003724:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6818      	ldr	r0, [r3, #0]
 800372a:	78fb      	ldrb	r3, [r7, #3]
 800372c:	222c      	movs	r2, #44	; 0x2c
 800372e:	fb02 f303 	mul.w	r3, r2, r3
 8003732:	3338      	adds	r3, #56	; 0x38
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	18d1      	adds	r1, r2, r3
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	691b      	ldr	r3, [r3, #16]
 800373c:	b2db      	uxtb	r3, r3
 800373e:	461a      	mov	r2, r3
 8003740:	f004 fff0 	bl	8008724 <USB_HC_StartXfer>
 8003744:	4603      	mov	r3, r0
}
 8003746:	4618      	mov	r0, r3
 8003748:	3708      	adds	r7, #8
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
 800374e:	bf00      	nop

08003750 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b086      	sub	sp, #24
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4618      	mov	r0, r3
 8003768:	f004 fcf1 	bl	800814e <USB_GetMode>
 800376c:	4603      	mov	r3, r0
 800376e:	2b01      	cmp	r3, #1
 8003770:	f040 80f6 	bne.w	8003960 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4618      	mov	r0, r3
 800377a:	f004 fcd5 	bl	8008128 <USB_ReadInterrupts>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	f000 80ec 	beq.w	800395e <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4618      	mov	r0, r3
 800378c:	f004 fccc 	bl	8008128 <USB_ReadInterrupts>
 8003790:	4603      	mov	r3, r0
 8003792:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003796:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800379a:	d104      	bne.n	80037a6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80037a4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4618      	mov	r0, r3
 80037ac:	f004 fcbc 	bl	8008128 <USB_ReadInterrupts>
 80037b0:	4603      	mov	r3, r0
 80037b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037ba:	d104      	bne.n	80037c6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80037c4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4618      	mov	r0, r3
 80037cc:	f004 fcac 	bl	8008128 <USB_ReadInterrupts>
 80037d0:	4603      	mov	r3, r0
 80037d2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80037d6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80037da:	d104      	bne.n	80037e6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80037e4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4618      	mov	r0, r3
 80037ec:	f004 fc9c 	bl	8008128 <USB_ReadInterrupts>
 80037f0:	4603      	mov	r3, r0
 80037f2:	f003 0302 	and.w	r3, r3, #2
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d103      	bne.n	8003802 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	2202      	movs	r2, #2
 8003800:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4618      	mov	r0, r3
 8003808:	f004 fc8e 	bl	8008128 <USB_ReadInterrupts>
 800380c:	4603      	mov	r3, r0
 800380e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003812:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003816:	d11c      	bne.n	8003852 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003820:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0301 	and.w	r3, r3, #1
 800382e:	2b00      	cmp	r3, #0
 8003830:	d10f      	bne.n	8003852 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8003832:	2110      	movs	r1, #16
 8003834:	6938      	ldr	r0, [r7, #16]
 8003836:	f004 fb7d 	bl	8007f34 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800383a:	6938      	ldr	r0, [r7, #16]
 800383c:	f004 fbae 	bl	8007f9c <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	2101      	movs	r1, #1
 8003846:	4618      	mov	r0, r3
 8003848:	f004 fd84 	bl	8008354 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f00b ff75 	bl	800f73c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4618      	mov	r0, r3
 8003858:	f004 fc66 	bl	8008128 <USB_ReadInterrupts>
 800385c:	4603      	mov	r3, r0
 800385e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003862:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003866:	d102      	bne.n	800386e <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f001 f89e 	bl	80049aa <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4618      	mov	r0, r3
 8003874:	f004 fc58 	bl	8008128 <USB_ReadInterrupts>
 8003878:	4603      	mov	r3, r0
 800387a:	f003 0308 	and.w	r3, r3, #8
 800387e:	2b08      	cmp	r3, #8
 8003880:	d106      	bne.n	8003890 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f00b ff3e 	bl	800f704 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2208      	movs	r2, #8
 800388e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4618      	mov	r0, r3
 8003896:	f004 fc47 	bl	8008128 <USB_ReadInterrupts>
 800389a:	4603      	mov	r3, r0
 800389c:	f003 0310 	and.w	r3, r3, #16
 80038a0:	2b10      	cmp	r3, #16
 80038a2:	d101      	bne.n	80038a8 <HAL_HCD_IRQHandler+0x158>
 80038a4:	2301      	movs	r3, #1
 80038a6:	e000      	b.n	80038aa <HAL_HCD_IRQHandler+0x15a>
 80038a8:	2300      	movs	r3, #0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d012      	beq.n	80038d4 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	699a      	ldr	r2, [r3, #24]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f022 0210 	bic.w	r2, r2, #16
 80038bc:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f000 ffa1 	bl	8004806 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	699a      	ldr	r2, [r3, #24]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f042 0210 	orr.w	r2, r2, #16
 80038d2:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4618      	mov	r0, r3
 80038da:	f004 fc25 	bl	8008128 <USB_ReadInterrupts>
 80038de:	4603      	mov	r3, r0
 80038e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80038e8:	d13a      	bne.n	8003960 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4618      	mov	r0, r3
 80038f0:	f005 f85a 	bl	80089a8 <USB_HC_ReadInterrupt>
 80038f4:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80038f6:	2300      	movs	r3, #0
 80038f8:	617b      	str	r3, [r7, #20]
 80038fa:	e025      	b.n	8003948 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	f003 030f 	and.w	r3, r3, #15
 8003902:	68ba      	ldr	r2, [r7, #8]
 8003904:	fa22 f303 	lsr.w	r3, r2, r3
 8003908:	f003 0301 	and.w	r3, r3, #1
 800390c:	2b00      	cmp	r3, #0
 800390e:	d018      	beq.n	8003942 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	015a      	lsls	r2, r3, #5
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	4413      	add	r3, r2
 8003918:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003922:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003926:	d106      	bne.n	8003936 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	b2db      	uxtb	r3, r3
 800392c:	4619      	mov	r1, r3
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f000 f8ab 	bl	8003a8a <HCD_HC_IN_IRQHandler>
 8003934:	e005      	b.n	8003942 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	b2db      	uxtb	r3, r3
 800393a:	4619      	mov	r1, r3
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f000 fbf9 	bl	8004134 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	3301      	adds	r3, #1
 8003946:	617b      	str	r3, [r7, #20]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	697a      	ldr	r2, [r7, #20]
 800394e:	429a      	cmp	r2, r3
 8003950:	d3d4      	bcc.n	80038fc <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800395a:	615a      	str	r2, [r3, #20]
 800395c:	e000      	b.n	8003960 <HAL_HCD_IRQHandler+0x210>
      return;
 800395e:	bf00      	nop
    }
  }
}
 8003960:	3718      	adds	r7, #24
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}

08003966 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003966:	b580      	push	{r7, lr}
 8003968:	b082      	sub	sp, #8
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003974:	2b01      	cmp	r3, #1
 8003976:	d101      	bne.n	800397c <HAL_HCD_Start+0x16>
 8003978:	2302      	movs	r3, #2
 800397a:	e013      	b.n	80039a4 <HAL_HCD_Start+0x3e>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	2101      	movs	r1, #1
 800398a:	4618      	mov	r0, r3
 800398c:	f004 fd46 	bl	800841c <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4618      	mov	r0, r3
 8003996:	f004 fa5e 	bl	8007e56 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80039a2:	2300      	movs	r3, #0
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3708      	adds	r7, #8
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}

080039ac <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b082      	sub	sp, #8
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d101      	bne.n	80039c2 <HAL_HCD_Stop+0x16>
 80039be:	2302      	movs	r3, #2
 80039c0:	e00d      	b.n	80039de <HAL_HCD_Stop+0x32>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2201      	movs	r2, #1
 80039c6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4618      	mov	r0, r3
 80039d0:	f005 f934 	bl	8008c3c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80039dc:	2300      	movs	r3, #0
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3708      	adds	r7, #8
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}

080039e6 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80039e6:	b580      	push	{r7, lr}
 80039e8:	b082      	sub	sp, #8
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4618      	mov	r0, r3
 80039f4:	f004 fce8 	bl	80083c8 <USB_ResetPort>
 80039f8:	4603      	mov	r3, r0
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3708      	adds	r7, #8
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}

08003a02 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003a02:	b480      	push	{r7}
 8003a04:	b083      	sub	sp, #12
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	6078      	str	r0, [r7, #4]
 8003a0a:	460b      	mov	r3, r1
 8003a0c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003a0e:	78fb      	ldrb	r3, [r7, #3]
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	212c      	movs	r1, #44	; 0x2c
 8003a14:	fb01 f303 	mul.w	r3, r1, r3
 8003a18:	4413      	add	r3, r2
 8003a1a:	3360      	adds	r3, #96	; 0x60
 8003a1c:	781b      	ldrb	r3, [r3, #0]
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	370c      	adds	r7, #12
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr

08003a2a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003a2a:	b480      	push	{r7}
 8003a2c:	b083      	sub	sp, #12
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	6078      	str	r0, [r7, #4]
 8003a32:	460b      	mov	r3, r1
 8003a34:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003a36:	78fb      	ldrb	r3, [r7, #3]
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	212c      	movs	r1, #44	; 0x2c
 8003a3c:	fb01 f303 	mul.w	r3, r1, r3
 8003a40:	4413      	add	r3, r2
 8003a42:	3350      	adds	r3, #80	; 0x50
 8003a44:	681b      	ldr	r3, [r3, #0]
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	370c      	adds	r7, #12
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr

08003a52 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003a52:	b580      	push	{r7, lr}
 8003a54:	b082      	sub	sp, #8
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f004 fd2c 	bl	80084bc <USB_GetCurrentFrame>
 8003a64:	4603      	mov	r3, r0
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3708      	adds	r7, #8
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}

08003a6e <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003a6e:	b580      	push	{r7, lr}
 8003a70:	b082      	sub	sp, #8
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f004 fd07 	bl	800848e <USB_GetHostSpeed>
 8003a80:	4603      	mov	r3, r0
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3708      	adds	r7, #8
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}

08003a8a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003a8a:	b580      	push	{r7, lr}
 8003a8c:	b086      	sub	sp, #24
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	6078      	str	r0, [r7, #4]
 8003a92:	460b      	mov	r3, r1
 8003a94:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003aa0:	78fb      	ldrb	r3, [r7, #3]
 8003aa2:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	015a      	lsls	r2, r3, #5
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	4413      	add	r3, r2
 8003aac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	f003 0304 	and.w	r3, r3, #4
 8003ab6:	2b04      	cmp	r3, #4
 8003ab8:	d11a      	bne.n	8003af0 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	015a      	lsls	r2, r3, #5
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	4413      	add	r3, r2
 8003ac2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	2304      	movs	r3, #4
 8003aca:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003acc:	687a      	ldr	r2, [r7, #4]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	212c      	movs	r1, #44	; 0x2c
 8003ad2:	fb01 f303 	mul.w	r3, r1, r3
 8003ad6:	4413      	add	r3, r2
 8003ad8:	3361      	adds	r3, #97	; 0x61
 8003ada:	2206      	movs	r2, #6
 8003adc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	68fa      	ldr	r2, [r7, #12]
 8003ae4:	b2d2      	uxtb	r2, r2
 8003ae6:	4611      	mov	r1, r2
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f004 ff6e 	bl	80089ca <USB_HC_Halt>
 8003aee:	e0af      	b.n	8003c50 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	015a      	lsls	r2, r3, #5
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	4413      	add	r3, r2
 8003af8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b06:	d11b      	bne.n	8003b40 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	015a      	lsls	r2, r3, #5
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	4413      	add	r3, r2
 8003b10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b14:	461a      	mov	r2, r3
 8003b16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b1a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003b1c:	687a      	ldr	r2, [r7, #4]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	212c      	movs	r1, #44	; 0x2c
 8003b22:	fb01 f303 	mul.w	r3, r1, r3
 8003b26:	4413      	add	r3, r2
 8003b28:	3361      	adds	r3, #97	; 0x61
 8003b2a:	2207      	movs	r2, #7
 8003b2c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	68fa      	ldr	r2, [r7, #12]
 8003b34:	b2d2      	uxtb	r2, r2
 8003b36:	4611      	mov	r1, r2
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f004 ff46 	bl	80089ca <USB_HC_Halt>
 8003b3e:	e087      	b.n	8003c50 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	015a      	lsls	r2, r3, #5
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	4413      	add	r3, r2
 8003b48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	f003 0320 	and.w	r3, r3, #32
 8003b52:	2b20      	cmp	r3, #32
 8003b54:	d109      	bne.n	8003b6a <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	015a      	lsls	r2, r3, #5
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	4413      	add	r3, r2
 8003b5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b62:	461a      	mov	r2, r3
 8003b64:	2320      	movs	r3, #32
 8003b66:	6093      	str	r3, [r2, #8]
 8003b68:	e072      	b.n	8003c50 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	015a      	lsls	r2, r3, #5
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	4413      	add	r3, r2
 8003b72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	f003 0308 	and.w	r3, r3, #8
 8003b7c:	2b08      	cmp	r3, #8
 8003b7e:	d11a      	bne.n	8003bb6 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	015a      	lsls	r2, r3, #5
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	4413      	add	r3, r2
 8003b88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	2308      	movs	r3, #8
 8003b90:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	212c      	movs	r1, #44	; 0x2c
 8003b98:	fb01 f303 	mul.w	r3, r1, r3
 8003b9c:	4413      	add	r3, r2
 8003b9e:	3361      	adds	r3, #97	; 0x61
 8003ba0:	2205      	movs	r2, #5
 8003ba2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	68fa      	ldr	r2, [r7, #12]
 8003baa:	b2d2      	uxtb	r2, r2
 8003bac:	4611      	mov	r1, r2
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f004 ff0b 	bl	80089ca <USB_HC_Halt>
 8003bb4:	e04c      	b.n	8003c50 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	015a      	lsls	r2, r3, #5
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	4413      	add	r3, r2
 8003bbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bcc:	d11b      	bne.n	8003c06 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	015a      	lsls	r2, r3, #5
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	4413      	add	r3, r2
 8003bd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bda:	461a      	mov	r2, r3
 8003bdc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003be0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	212c      	movs	r1, #44	; 0x2c
 8003be8:	fb01 f303 	mul.w	r3, r1, r3
 8003bec:	4413      	add	r3, r2
 8003bee:	3361      	adds	r3, #97	; 0x61
 8003bf0:	2208      	movs	r2, #8
 8003bf2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	68fa      	ldr	r2, [r7, #12]
 8003bfa:	b2d2      	uxtb	r2, r2
 8003bfc:	4611      	mov	r1, r2
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f004 fee3 	bl	80089ca <USB_HC_Halt>
 8003c04:	e024      	b.n	8003c50 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	015a      	lsls	r2, r3, #5
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	4413      	add	r3, r2
 8003c0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c18:	2b80      	cmp	r3, #128	; 0x80
 8003c1a:	d119      	bne.n	8003c50 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	015a      	lsls	r2, r3, #5
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	4413      	add	r3, r2
 8003c24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c28:	461a      	mov	r2, r3
 8003c2a:	2380      	movs	r3, #128	; 0x80
 8003c2c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	212c      	movs	r1, #44	; 0x2c
 8003c34:	fb01 f303 	mul.w	r3, r1, r3
 8003c38:	4413      	add	r3, r2
 8003c3a:	3361      	adds	r3, #97	; 0x61
 8003c3c:	2206      	movs	r2, #6
 8003c3e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	68fa      	ldr	r2, [r7, #12]
 8003c46:	b2d2      	uxtb	r2, r2
 8003c48:	4611      	mov	r1, r2
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f004 febd 	bl	80089ca <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	015a      	lsls	r2, r3, #5
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	4413      	add	r3, r2
 8003c58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c66:	d112      	bne.n	8003c8e <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	68fa      	ldr	r2, [r7, #12]
 8003c6e:	b2d2      	uxtb	r2, r2
 8003c70:	4611      	mov	r1, r2
 8003c72:	4618      	mov	r0, r3
 8003c74:	f004 fea9 	bl	80089ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	015a      	lsls	r2, r3, #5
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	4413      	add	r3, r2
 8003c80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c84:	461a      	mov	r2, r3
 8003c86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c8a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003c8c:	e24e      	b.n	800412c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	015a      	lsls	r2, r3, #5
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	4413      	add	r3, r2
 8003c96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	f003 0301 	and.w	r3, r3, #1
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	f040 80df 	bne.w	8003e64 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	691b      	ldr	r3, [r3, #16]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d019      	beq.n	8003ce2 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	212c      	movs	r1, #44	; 0x2c
 8003cb4:	fb01 f303 	mul.w	r3, r1, r3
 8003cb8:	4413      	add	r3, r2
 8003cba:	3348      	adds	r3, #72	; 0x48
 8003cbc:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	0159      	lsls	r1, r3, #5
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	440b      	add	r3, r1
 8003cc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cca:	691b      	ldr	r3, [r3, #16]
 8003ccc:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003cd0:	1ad2      	subs	r2, r2, r3
 8003cd2:	6879      	ldr	r1, [r7, #4]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	202c      	movs	r0, #44	; 0x2c
 8003cd8:	fb00 f303 	mul.w	r3, r0, r3
 8003cdc:	440b      	add	r3, r1
 8003cde:	3350      	adds	r3, #80	; 0x50
 8003ce0:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	212c      	movs	r1, #44	; 0x2c
 8003ce8:	fb01 f303 	mul.w	r3, r1, r3
 8003cec:	4413      	add	r3, r2
 8003cee:	3361      	adds	r3, #97	; 0x61
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003cf4:	687a      	ldr	r2, [r7, #4]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	212c      	movs	r1, #44	; 0x2c
 8003cfa:	fb01 f303 	mul.w	r3, r1, r3
 8003cfe:	4413      	add	r3, r2
 8003d00:	335c      	adds	r3, #92	; 0x5c
 8003d02:	2200      	movs	r2, #0
 8003d04:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	015a      	lsls	r2, r3, #5
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	4413      	add	r3, r2
 8003d0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d12:	461a      	mov	r2, r3
 8003d14:	2301      	movs	r3, #1
 8003d16:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003d18:	687a      	ldr	r2, [r7, #4]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	212c      	movs	r1, #44	; 0x2c
 8003d1e:	fb01 f303 	mul.w	r3, r1, r3
 8003d22:	4413      	add	r3, r2
 8003d24:	333f      	adds	r3, #63	; 0x3f
 8003d26:	781b      	ldrb	r3, [r3, #0]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d009      	beq.n	8003d40 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	212c      	movs	r1, #44	; 0x2c
 8003d32:	fb01 f303 	mul.w	r3, r1, r3
 8003d36:	4413      	add	r3, r2
 8003d38:	333f      	adds	r3, #63	; 0x3f
 8003d3a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003d3c:	2b02      	cmp	r3, #2
 8003d3e:	d111      	bne.n	8003d64 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	68fa      	ldr	r2, [r7, #12]
 8003d46:	b2d2      	uxtb	r2, r2
 8003d48:	4611      	mov	r1, r2
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f004 fe3d 	bl	80089ca <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	015a      	lsls	r2, r3, #5
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	4413      	add	r3, r2
 8003d58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	2310      	movs	r3, #16
 8003d60:	6093      	str	r3, [r2, #8]
 8003d62:	e03a      	b.n	8003dda <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8003d64:	687a      	ldr	r2, [r7, #4]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	212c      	movs	r1, #44	; 0x2c
 8003d6a:	fb01 f303 	mul.w	r3, r1, r3
 8003d6e:	4413      	add	r3, r2
 8003d70:	333f      	adds	r3, #63	; 0x3f
 8003d72:	781b      	ldrb	r3, [r3, #0]
 8003d74:	2b03      	cmp	r3, #3
 8003d76:	d009      	beq.n	8003d8c <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8003d78:	687a      	ldr	r2, [r7, #4]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	212c      	movs	r1, #44	; 0x2c
 8003d7e:	fb01 f303 	mul.w	r3, r1, r3
 8003d82:	4413      	add	r3, r2
 8003d84:	333f      	adds	r3, #63	; 0x3f
 8003d86:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d126      	bne.n	8003dda <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	015a      	lsls	r2, r3, #5
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	4413      	add	r3, r2
 8003d94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	68fa      	ldr	r2, [r7, #12]
 8003d9c:	0151      	lsls	r1, r2, #5
 8003d9e:	693a      	ldr	r2, [r7, #16]
 8003da0:	440a      	add	r2, r1
 8003da2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003da6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003daa:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	212c      	movs	r1, #44	; 0x2c
 8003db2:	fb01 f303 	mul.w	r3, r1, r3
 8003db6:	4413      	add	r3, r2
 8003db8:	3360      	adds	r3, #96	; 0x60
 8003dba:	2201      	movs	r2, #1
 8003dbc:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	b2d9      	uxtb	r1, r3
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	202c      	movs	r0, #44	; 0x2c
 8003dc8:	fb00 f303 	mul.w	r3, r0, r3
 8003dcc:	4413      	add	r3, r2
 8003dce:	3360      	adds	r3, #96	; 0x60
 8003dd0:	781b      	ldrb	r3, [r3, #0]
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f00b fcbf 	bl	800f758 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	691b      	ldr	r3, [r3, #16]
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d12b      	bne.n	8003e3a <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003de2:	687a      	ldr	r2, [r7, #4]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	212c      	movs	r1, #44	; 0x2c
 8003de8:	fb01 f303 	mul.w	r3, r1, r3
 8003dec:	4413      	add	r3, r2
 8003dee:	3348      	adds	r3, #72	; 0x48
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	6879      	ldr	r1, [r7, #4]
 8003df4:	68fa      	ldr	r2, [r7, #12]
 8003df6:	202c      	movs	r0, #44	; 0x2c
 8003df8:	fb00 f202 	mul.w	r2, r0, r2
 8003dfc:	440a      	add	r2, r1
 8003dfe:	3240      	adds	r2, #64	; 0x40
 8003e00:	8812      	ldrh	r2, [r2, #0]
 8003e02:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e06:	f003 0301 	and.w	r3, r3, #1
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	f000 818e 	beq.w	800412c <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	212c      	movs	r1, #44	; 0x2c
 8003e16:	fb01 f303 	mul.w	r3, r1, r3
 8003e1a:	4413      	add	r3, r2
 8003e1c:	3354      	adds	r3, #84	; 0x54
 8003e1e:	781b      	ldrb	r3, [r3, #0]
 8003e20:	f083 0301 	eor.w	r3, r3, #1
 8003e24:	b2d8      	uxtb	r0, r3
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	212c      	movs	r1, #44	; 0x2c
 8003e2c:	fb01 f303 	mul.w	r3, r1, r3
 8003e30:	4413      	add	r3, r2
 8003e32:	3354      	adds	r3, #84	; 0x54
 8003e34:	4602      	mov	r2, r0
 8003e36:	701a      	strb	r2, [r3, #0]
}
 8003e38:	e178      	b.n	800412c <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	212c      	movs	r1, #44	; 0x2c
 8003e40:	fb01 f303 	mul.w	r3, r1, r3
 8003e44:	4413      	add	r3, r2
 8003e46:	3354      	adds	r3, #84	; 0x54
 8003e48:	781b      	ldrb	r3, [r3, #0]
 8003e4a:	f083 0301 	eor.w	r3, r3, #1
 8003e4e:	b2d8      	uxtb	r0, r3
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	212c      	movs	r1, #44	; 0x2c
 8003e56:	fb01 f303 	mul.w	r3, r1, r3
 8003e5a:	4413      	add	r3, r2
 8003e5c:	3354      	adds	r3, #84	; 0x54
 8003e5e:	4602      	mov	r2, r0
 8003e60:	701a      	strb	r2, [r3, #0]
}
 8003e62:	e163      	b.n	800412c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	015a      	lsls	r2, r3, #5
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	4413      	add	r3, r2
 8003e6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	f003 0302 	and.w	r3, r3, #2
 8003e76:	2b02      	cmp	r3, #2
 8003e78:	f040 80f6 	bne.w	8004068 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003e7c:	687a      	ldr	r2, [r7, #4]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	212c      	movs	r1, #44	; 0x2c
 8003e82:	fb01 f303 	mul.w	r3, r1, r3
 8003e86:	4413      	add	r3, r2
 8003e88:	3361      	adds	r3, #97	; 0x61
 8003e8a:	781b      	ldrb	r3, [r3, #0]
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d109      	bne.n	8003ea4 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003e90:	687a      	ldr	r2, [r7, #4]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	212c      	movs	r1, #44	; 0x2c
 8003e96:	fb01 f303 	mul.w	r3, r1, r3
 8003e9a:	4413      	add	r3, r2
 8003e9c:	3360      	adds	r3, #96	; 0x60
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	701a      	strb	r2, [r3, #0]
 8003ea2:	e0c9      	b.n	8004038 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	212c      	movs	r1, #44	; 0x2c
 8003eaa:	fb01 f303 	mul.w	r3, r1, r3
 8003eae:	4413      	add	r3, r2
 8003eb0:	3361      	adds	r3, #97	; 0x61
 8003eb2:	781b      	ldrb	r3, [r3, #0]
 8003eb4:	2b05      	cmp	r3, #5
 8003eb6:	d109      	bne.n	8003ecc <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	212c      	movs	r1, #44	; 0x2c
 8003ebe:	fb01 f303 	mul.w	r3, r1, r3
 8003ec2:	4413      	add	r3, r2
 8003ec4:	3360      	adds	r3, #96	; 0x60
 8003ec6:	2205      	movs	r2, #5
 8003ec8:	701a      	strb	r2, [r3, #0]
 8003eca:	e0b5      	b.n	8004038 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	212c      	movs	r1, #44	; 0x2c
 8003ed2:	fb01 f303 	mul.w	r3, r1, r3
 8003ed6:	4413      	add	r3, r2
 8003ed8:	3361      	adds	r3, #97	; 0x61
 8003eda:	781b      	ldrb	r3, [r3, #0]
 8003edc:	2b06      	cmp	r3, #6
 8003ede:	d009      	beq.n	8003ef4 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003ee0:	687a      	ldr	r2, [r7, #4]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	212c      	movs	r1, #44	; 0x2c
 8003ee6:	fb01 f303 	mul.w	r3, r1, r3
 8003eea:	4413      	add	r3, r2
 8003eec:	3361      	adds	r3, #97	; 0x61
 8003eee:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003ef0:	2b08      	cmp	r3, #8
 8003ef2:	d150      	bne.n	8003f96 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	212c      	movs	r1, #44	; 0x2c
 8003efa:	fb01 f303 	mul.w	r3, r1, r3
 8003efe:	4413      	add	r3, r2
 8003f00:	335c      	adds	r3, #92	; 0x5c
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	1c5a      	adds	r2, r3, #1
 8003f06:	6879      	ldr	r1, [r7, #4]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	202c      	movs	r0, #44	; 0x2c
 8003f0c:	fb00 f303 	mul.w	r3, r0, r3
 8003f10:	440b      	add	r3, r1
 8003f12:	335c      	adds	r3, #92	; 0x5c
 8003f14:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	212c      	movs	r1, #44	; 0x2c
 8003f1c:	fb01 f303 	mul.w	r3, r1, r3
 8003f20:	4413      	add	r3, r2
 8003f22:	335c      	adds	r3, #92	; 0x5c
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	2b02      	cmp	r3, #2
 8003f28:	d912      	bls.n	8003f50 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	212c      	movs	r1, #44	; 0x2c
 8003f30:	fb01 f303 	mul.w	r3, r1, r3
 8003f34:	4413      	add	r3, r2
 8003f36:	335c      	adds	r3, #92	; 0x5c
 8003f38:	2200      	movs	r2, #0
 8003f3a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	212c      	movs	r1, #44	; 0x2c
 8003f42:	fb01 f303 	mul.w	r3, r1, r3
 8003f46:	4413      	add	r3, r2
 8003f48:	3360      	adds	r3, #96	; 0x60
 8003f4a:	2204      	movs	r2, #4
 8003f4c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003f4e:	e073      	b.n	8004038 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	212c      	movs	r1, #44	; 0x2c
 8003f56:	fb01 f303 	mul.w	r3, r1, r3
 8003f5a:	4413      	add	r3, r2
 8003f5c:	3360      	adds	r3, #96	; 0x60
 8003f5e:	2202      	movs	r2, #2
 8003f60:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	015a      	lsls	r2, r3, #5
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	4413      	add	r3, r2
 8003f6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003f78:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003f80:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	015a      	lsls	r2, r3, #5
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	4413      	add	r3, r2
 8003f8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f8e:	461a      	mov	r2, r3
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003f94:	e050      	b.n	8004038 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	212c      	movs	r1, #44	; 0x2c
 8003f9c:	fb01 f303 	mul.w	r3, r1, r3
 8003fa0:	4413      	add	r3, r2
 8003fa2:	3361      	adds	r3, #97	; 0x61
 8003fa4:	781b      	ldrb	r3, [r3, #0]
 8003fa6:	2b03      	cmp	r3, #3
 8003fa8:	d122      	bne.n	8003ff0 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	212c      	movs	r1, #44	; 0x2c
 8003fb0:	fb01 f303 	mul.w	r3, r1, r3
 8003fb4:	4413      	add	r3, r2
 8003fb6:	3360      	adds	r3, #96	; 0x60
 8003fb8:	2202      	movs	r2, #2
 8003fba:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	015a      	lsls	r2, r3, #5
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	4413      	add	r3, r2
 8003fc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003fd2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003fda:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	015a      	lsls	r2, r3, #5
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	4413      	add	r3, r2
 8003fe4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fe8:	461a      	mov	r2, r3
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	6013      	str	r3, [r2, #0]
 8003fee:	e023      	b.n	8004038 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	212c      	movs	r1, #44	; 0x2c
 8003ff6:	fb01 f303 	mul.w	r3, r1, r3
 8003ffa:	4413      	add	r3, r2
 8003ffc:	3361      	adds	r3, #97	; 0x61
 8003ffe:	781b      	ldrb	r3, [r3, #0]
 8004000:	2b07      	cmp	r3, #7
 8004002:	d119      	bne.n	8004038 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	212c      	movs	r1, #44	; 0x2c
 800400a:	fb01 f303 	mul.w	r3, r1, r3
 800400e:	4413      	add	r3, r2
 8004010:	335c      	adds	r3, #92	; 0x5c
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	1c5a      	adds	r2, r3, #1
 8004016:	6879      	ldr	r1, [r7, #4]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	202c      	movs	r0, #44	; 0x2c
 800401c:	fb00 f303 	mul.w	r3, r0, r3
 8004020:	440b      	add	r3, r1
 8004022:	335c      	adds	r3, #92	; 0x5c
 8004024:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	212c      	movs	r1, #44	; 0x2c
 800402c:	fb01 f303 	mul.w	r3, r1, r3
 8004030:	4413      	add	r3, r2
 8004032:	3360      	adds	r3, #96	; 0x60
 8004034:	2204      	movs	r2, #4
 8004036:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	015a      	lsls	r2, r3, #5
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	4413      	add	r3, r2
 8004040:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004044:	461a      	mov	r2, r3
 8004046:	2302      	movs	r3, #2
 8004048:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	b2d9      	uxtb	r1, r3
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	202c      	movs	r0, #44	; 0x2c
 8004054:	fb00 f303 	mul.w	r3, r0, r3
 8004058:	4413      	add	r3, r2
 800405a:	3360      	adds	r3, #96	; 0x60
 800405c:	781b      	ldrb	r3, [r3, #0]
 800405e:	461a      	mov	r2, r3
 8004060:	6878      	ldr	r0, [r7, #4]
 8004062:	f00b fb79 	bl	800f758 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004066:	e061      	b.n	800412c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	015a      	lsls	r2, r3, #5
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	4413      	add	r3, r2
 8004070:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	f003 0310 	and.w	r3, r3, #16
 800407a:	2b10      	cmp	r3, #16
 800407c:	d156      	bne.n	800412c <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	212c      	movs	r1, #44	; 0x2c
 8004084:	fb01 f303 	mul.w	r3, r1, r3
 8004088:	4413      	add	r3, r2
 800408a:	333f      	adds	r3, #63	; 0x3f
 800408c:	781b      	ldrb	r3, [r3, #0]
 800408e:	2b03      	cmp	r3, #3
 8004090:	d111      	bne.n	80040b6 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	212c      	movs	r1, #44	; 0x2c
 8004098:	fb01 f303 	mul.w	r3, r1, r3
 800409c:	4413      	add	r3, r2
 800409e:	335c      	adds	r3, #92	; 0x5c
 80040a0:	2200      	movs	r2, #0
 80040a2:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	68fa      	ldr	r2, [r7, #12]
 80040aa:	b2d2      	uxtb	r2, r2
 80040ac:	4611      	mov	r1, r2
 80040ae:	4618      	mov	r0, r3
 80040b0:	f004 fc8b 	bl	80089ca <USB_HC_Halt>
 80040b4:	e031      	b.n	800411a <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	212c      	movs	r1, #44	; 0x2c
 80040bc:	fb01 f303 	mul.w	r3, r1, r3
 80040c0:	4413      	add	r3, r2
 80040c2:	333f      	adds	r3, #63	; 0x3f
 80040c4:	781b      	ldrb	r3, [r3, #0]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d009      	beq.n	80040de <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	212c      	movs	r1, #44	; 0x2c
 80040d0:	fb01 f303 	mul.w	r3, r1, r3
 80040d4:	4413      	add	r3, r2
 80040d6:	333f      	adds	r3, #63	; 0x3f
 80040d8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80040da:	2b02      	cmp	r3, #2
 80040dc:	d11d      	bne.n	800411a <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	212c      	movs	r1, #44	; 0x2c
 80040e4:	fb01 f303 	mul.w	r3, r1, r3
 80040e8:	4413      	add	r3, r2
 80040ea:	335c      	adds	r3, #92	; 0x5c
 80040ec:	2200      	movs	r2, #0
 80040ee:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	691b      	ldr	r3, [r3, #16]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d110      	bne.n	800411a <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80040f8:	687a      	ldr	r2, [r7, #4]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	212c      	movs	r1, #44	; 0x2c
 80040fe:	fb01 f303 	mul.w	r3, r1, r3
 8004102:	4413      	add	r3, r2
 8004104:	3361      	adds	r3, #97	; 0x61
 8004106:	2203      	movs	r2, #3
 8004108:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	68fa      	ldr	r2, [r7, #12]
 8004110:	b2d2      	uxtb	r2, r2
 8004112:	4611      	mov	r1, r2
 8004114:	4618      	mov	r0, r3
 8004116:	f004 fc58 	bl	80089ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	015a      	lsls	r2, r3, #5
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	4413      	add	r3, r2
 8004122:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004126:	461a      	mov	r2, r3
 8004128:	2310      	movs	r3, #16
 800412a:	6093      	str	r3, [r2, #8]
}
 800412c:	bf00      	nop
 800412e:	3718      	adds	r7, #24
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}

08004134 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b088      	sub	sp, #32
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	460b      	mov	r3, r1
 800413e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004146:	69fb      	ldr	r3, [r7, #28]
 8004148:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800414a:	78fb      	ldrb	r3, [r7, #3]
 800414c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	015a      	lsls	r2, r3, #5
 8004152:	69bb      	ldr	r3, [r7, #24]
 8004154:	4413      	add	r3, r2
 8004156:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	f003 0304 	and.w	r3, r3, #4
 8004160:	2b04      	cmp	r3, #4
 8004162:	d11a      	bne.n	800419a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	015a      	lsls	r2, r3, #5
 8004168:	69bb      	ldr	r3, [r7, #24]
 800416a:	4413      	add	r3, r2
 800416c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004170:	461a      	mov	r2, r3
 8004172:	2304      	movs	r3, #4
 8004174:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	212c      	movs	r1, #44	; 0x2c
 800417c:	fb01 f303 	mul.w	r3, r1, r3
 8004180:	4413      	add	r3, r2
 8004182:	3361      	adds	r3, #97	; 0x61
 8004184:	2206      	movs	r2, #6
 8004186:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	697a      	ldr	r2, [r7, #20]
 800418e:	b2d2      	uxtb	r2, r2
 8004190:	4611      	mov	r1, r2
 8004192:	4618      	mov	r0, r3
 8004194:	f004 fc19 	bl	80089ca <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8004198:	e331      	b.n	80047fe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	015a      	lsls	r2, r3, #5
 800419e:	69bb      	ldr	r3, [r7, #24]
 80041a0:	4413      	add	r3, r2
 80041a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	f003 0320 	and.w	r3, r3, #32
 80041ac:	2b20      	cmp	r3, #32
 80041ae:	d12e      	bne.n	800420e <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	015a      	lsls	r2, r3, #5
 80041b4:	69bb      	ldr	r3, [r7, #24]
 80041b6:	4413      	add	r3, r2
 80041b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041bc:	461a      	mov	r2, r3
 80041be:	2320      	movs	r3, #32
 80041c0:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	212c      	movs	r1, #44	; 0x2c
 80041c8:	fb01 f303 	mul.w	r3, r1, r3
 80041cc:	4413      	add	r3, r2
 80041ce:	333d      	adds	r3, #61	; 0x3d
 80041d0:	781b      	ldrb	r3, [r3, #0]
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	f040 8313 	bne.w	80047fe <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	212c      	movs	r1, #44	; 0x2c
 80041de:	fb01 f303 	mul.w	r3, r1, r3
 80041e2:	4413      	add	r3, r2
 80041e4:	333d      	adds	r3, #61	; 0x3d
 80041e6:	2200      	movs	r2, #0
 80041e8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	212c      	movs	r1, #44	; 0x2c
 80041f0:	fb01 f303 	mul.w	r3, r1, r3
 80041f4:	4413      	add	r3, r2
 80041f6:	3360      	adds	r3, #96	; 0x60
 80041f8:	2202      	movs	r2, #2
 80041fa:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	697a      	ldr	r2, [r7, #20]
 8004202:	b2d2      	uxtb	r2, r2
 8004204:	4611      	mov	r1, r2
 8004206:	4618      	mov	r0, r3
 8004208:	f004 fbdf 	bl	80089ca <USB_HC_Halt>
}
 800420c:	e2f7      	b.n	80047fe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	015a      	lsls	r2, r3, #5
 8004212:	69bb      	ldr	r3, [r7, #24]
 8004214:	4413      	add	r3, r2
 8004216:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004220:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004224:	d112      	bne.n	800424c <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	015a      	lsls	r2, r3, #5
 800422a:	69bb      	ldr	r3, [r7, #24]
 800422c:	4413      	add	r3, r2
 800422e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004232:	461a      	mov	r2, r3
 8004234:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004238:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	697a      	ldr	r2, [r7, #20]
 8004240:	b2d2      	uxtb	r2, r2
 8004242:	4611      	mov	r1, r2
 8004244:	4618      	mov	r0, r3
 8004246:	f004 fbc0 	bl	80089ca <USB_HC_Halt>
}
 800424a:	e2d8      	b.n	80047fe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	015a      	lsls	r2, r3, #5
 8004250:	69bb      	ldr	r3, [r7, #24]
 8004252:	4413      	add	r3, r2
 8004254:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	f003 0301 	and.w	r3, r3, #1
 800425e:	2b01      	cmp	r3, #1
 8004260:	d140      	bne.n	80042e4 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	212c      	movs	r1, #44	; 0x2c
 8004268:	fb01 f303 	mul.w	r3, r1, r3
 800426c:	4413      	add	r3, r2
 800426e:	335c      	adds	r3, #92	; 0x5c
 8004270:	2200      	movs	r2, #0
 8004272:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	015a      	lsls	r2, r3, #5
 8004278:	69bb      	ldr	r3, [r7, #24]
 800427a:	4413      	add	r3, r2
 800427c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004286:	2b40      	cmp	r3, #64	; 0x40
 8004288:	d111      	bne.n	80042ae <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	212c      	movs	r1, #44	; 0x2c
 8004290:	fb01 f303 	mul.w	r3, r1, r3
 8004294:	4413      	add	r3, r2
 8004296:	333d      	adds	r3, #61	; 0x3d
 8004298:	2201      	movs	r2, #1
 800429a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	015a      	lsls	r2, r3, #5
 80042a0:	69bb      	ldr	r3, [r7, #24]
 80042a2:	4413      	add	r3, r2
 80042a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042a8:	461a      	mov	r2, r3
 80042aa:	2340      	movs	r3, #64	; 0x40
 80042ac:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	015a      	lsls	r2, r3, #5
 80042b2:	69bb      	ldr	r3, [r7, #24]
 80042b4:	4413      	add	r3, r2
 80042b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042ba:	461a      	mov	r2, r3
 80042bc:	2301      	movs	r3, #1
 80042be:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	212c      	movs	r1, #44	; 0x2c
 80042c6:	fb01 f303 	mul.w	r3, r1, r3
 80042ca:	4413      	add	r3, r2
 80042cc:	3361      	adds	r3, #97	; 0x61
 80042ce:	2201      	movs	r2, #1
 80042d0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	697a      	ldr	r2, [r7, #20]
 80042d8:	b2d2      	uxtb	r2, r2
 80042da:	4611      	mov	r1, r2
 80042dc:	4618      	mov	r0, r3
 80042de:	f004 fb74 	bl	80089ca <USB_HC_Halt>
}
 80042e2:	e28c      	b.n	80047fe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	015a      	lsls	r2, r3, #5
 80042e8:	69bb      	ldr	r3, [r7, #24]
 80042ea:	4413      	add	r3, r2
 80042ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042f6:	2b40      	cmp	r3, #64	; 0x40
 80042f8:	d12c      	bne.n	8004354 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	212c      	movs	r1, #44	; 0x2c
 8004300:	fb01 f303 	mul.w	r3, r1, r3
 8004304:	4413      	add	r3, r2
 8004306:	3361      	adds	r3, #97	; 0x61
 8004308:	2204      	movs	r2, #4
 800430a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	212c      	movs	r1, #44	; 0x2c
 8004312:	fb01 f303 	mul.w	r3, r1, r3
 8004316:	4413      	add	r3, r2
 8004318:	333d      	adds	r3, #61	; 0x3d
 800431a:	2201      	movs	r2, #1
 800431c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	212c      	movs	r1, #44	; 0x2c
 8004324:	fb01 f303 	mul.w	r3, r1, r3
 8004328:	4413      	add	r3, r2
 800432a:	335c      	adds	r3, #92	; 0x5c
 800432c:	2200      	movs	r2, #0
 800432e:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	697a      	ldr	r2, [r7, #20]
 8004336:	b2d2      	uxtb	r2, r2
 8004338:	4611      	mov	r1, r2
 800433a:	4618      	mov	r0, r3
 800433c:	f004 fb45 	bl	80089ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	015a      	lsls	r2, r3, #5
 8004344:	69bb      	ldr	r3, [r7, #24]
 8004346:	4413      	add	r3, r2
 8004348:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800434c:	461a      	mov	r2, r3
 800434e:	2340      	movs	r3, #64	; 0x40
 8004350:	6093      	str	r3, [r2, #8]
}
 8004352:	e254      	b.n	80047fe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	015a      	lsls	r2, r3, #5
 8004358:	69bb      	ldr	r3, [r7, #24]
 800435a:	4413      	add	r3, r2
 800435c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	f003 0308 	and.w	r3, r3, #8
 8004366:	2b08      	cmp	r3, #8
 8004368:	d11a      	bne.n	80043a0 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	015a      	lsls	r2, r3, #5
 800436e:	69bb      	ldr	r3, [r7, #24]
 8004370:	4413      	add	r3, r2
 8004372:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004376:	461a      	mov	r2, r3
 8004378:	2308      	movs	r3, #8
 800437a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	212c      	movs	r1, #44	; 0x2c
 8004382:	fb01 f303 	mul.w	r3, r1, r3
 8004386:	4413      	add	r3, r2
 8004388:	3361      	adds	r3, #97	; 0x61
 800438a:	2205      	movs	r2, #5
 800438c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	697a      	ldr	r2, [r7, #20]
 8004394:	b2d2      	uxtb	r2, r2
 8004396:	4611      	mov	r1, r2
 8004398:	4618      	mov	r0, r3
 800439a:	f004 fb16 	bl	80089ca <USB_HC_Halt>
}
 800439e:	e22e      	b.n	80047fe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	015a      	lsls	r2, r3, #5
 80043a4:	69bb      	ldr	r3, [r7, #24]
 80043a6:	4413      	add	r3, r2
 80043a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	f003 0310 	and.w	r3, r3, #16
 80043b2:	2b10      	cmp	r3, #16
 80043b4:	d140      	bne.n	8004438 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80043b6:	687a      	ldr	r2, [r7, #4]
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	212c      	movs	r1, #44	; 0x2c
 80043bc:	fb01 f303 	mul.w	r3, r1, r3
 80043c0:	4413      	add	r3, r2
 80043c2:	335c      	adds	r3, #92	; 0x5c
 80043c4:	2200      	movs	r2, #0
 80043c6:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80043c8:	687a      	ldr	r2, [r7, #4]
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	212c      	movs	r1, #44	; 0x2c
 80043ce:	fb01 f303 	mul.w	r3, r1, r3
 80043d2:	4413      	add	r3, r2
 80043d4:	3361      	adds	r3, #97	; 0x61
 80043d6:	2203      	movs	r2, #3
 80043d8:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	212c      	movs	r1, #44	; 0x2c
 80043e0:	fb01 f303 	mul.w	r3, r1, r3
 80043e4:	4413      	add	r3, r2
 80043e6:	333d      	adds	r3, #61	; 0x3d
 80043e8:	781b      	ldrb	r3, [r3, #0]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d112      	bne.n	8004414 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	212c      	movs	r1, #44	; 0x2c
 80043f4:	fb01 f303 	mul.w	r3, r1, r3
 80043f8:	4413      	add	r3, r2
 80043fa:	333c      	adds	r3, #60	; 0x3c
 80043fc:	781b      	ldrb	r3, [r3, #0]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d108      	bne.n	8004414 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	212c      	movs	r1, #44	; 0x2c
 8004408:	fb01 f303 	mul.w	r3, r1, r3
 800440c:	4413      	add	r3, r2
 800440e:	333d      	adds	r3, #61	; 0x3d
 8004410:	2201      	movs	r2, #1
 8004412:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	697a      	ldr	r2, [r7, #20]
 800441a:	b2d2      	uxtb	r2, r2
 800441c:	4611      	mov	r1, r2
 800441e:	4618      	mov	r0, r3
 8004420:	f004 fad3 	bl	80089ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	015a      	lsls	r2, r3, #5
 8004428:	69bb      	ldr	r3, [r7, #24]
 800442a:	4413      	add	r3, r2
 800442c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004430:	461a      	mov	r2, r3
 8004432:	2310      	movs	r3, #16
 8004434:	6093      	str	r3, [r2, #8]
}
 8004436:	e1e2      	b.n	80047fe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	015a      	lsls	r2, r3, #5
 800443c:	69bb      	ldr	r3, [r7, #24]
 800443e:	4413      	add	r3, r2
 8004440:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800444a:	2b80      	cmp	r3, #128	; 0x80
 800444c:	d164      	bne.n	8004518 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	691b      	ldr	r3, [r3, #16]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d111      	bne.n	800447a <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8004456:	687a      	ldr	r2, [r7, #4]
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	212c      	movs	r1, #44	; 0x2c
 800445c:	fb01 f303 	mul.w	r3, r1, r3
 8004460:	4413      	add	r3, r2
 8004462:	3361      	adds	r3, #97	; 0x61
 8004464:	2206      	movs	r2, #6
 8004466:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	697a      	ldr	r2, [r7, #20]
 800446e:	b2d2      	uxtb	r2, r2
 8004470:	4611      	mov	r1, r2
 8004472:	4618      	mov	r0, r3
 8004474:	f004 faa9 	bl	80089ca <USB_HC_Halt>
 8004478:	e044      	b.n	8004504 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	212c      	movs	r1, #44	; 0x2c
 8004480:	fb01 f303 	mul.w	r3, r1, r3
 8004484:	4413      	add	r3, r2
 8004486:	335c      	adds	r3, #92	; 0x5c
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	1c5a      	adds	r2, r3, #1
 800448c:	6879      	ldr	r1, [r7, #4]
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	202c      	movs	r0, #44	; 0x2c
 8004492:	fb00 f303 	mul.w	r3, r0, r3
 8004496:	440b      	add	r3, r1
 8004498:	335c      	adds	r3, #92	; 0x5c
 800449a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	212c      	movs	r1, #44	; 0x2c
 80044a2:	fb01 f303 	mul.w	r3, r1, r3
 80044a6:	4413      	add	r3, r2
 80044a8:	335c      	adds	r3, #92	; 0x5c
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	2b02      	cmp	r3, #2
 80044ae:	d920      	bls.n	80044f2 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	212c      	movs	r1, #44	; 0x2c
 80044b6:	fb01 f303 	mul.w	r3, r1, r3
 80044ba:	4413      	add	r3, r2
 80044bc:	335c      	adds	r3, #92	; 0x5c
 80044be:	2200      	movs	r2, #0
 80044c0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	212c      	movs	r1, #44	; 0x2c
 80044c8:	fb01 f303 	mul.w	r3, r1, r3
 80044cc:	4413      	add	r3, r2
 80044ce:	3360      	adds	r3, #96	; 0x60
 80044d0:	2204      	movs	r2, #4
 80044d2:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	b2d9      	uxtb	r1, r3
 80044d8:	687a      	ldr	r2, [r7, #4]
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	202c      	movs	r0, #44	; 0x2c
 80044de:	fb00 f303 	mul.w	r3, r0, r3
 80044e2:	4413      	add	r3, r2
 80044e4:	3360      	adds	r3, #96	; 0x60
 80044e6:	781b      	ldrb	r3, [r3, #0]
 80044e8:	461a      	mov	r2, r3
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f00b f934 	bl	800f758 <HAL_HCD_HC_NotifyURBChange_Callback>
 80044f0:	e008      	b.n	8004504 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	212c      	movs	r1, #44	; 0x2c
 80044f8:	fb01 f303 	mul.w	r3, r1, r3
 80044fc:	4413      	add	r3, r2
 80044fe:	3360      	adds	r3, #96	; 0x60
 8004500:	2202      	movs	r2, #2
 8004502:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	015a      	lsls	r2, r3, #5
 8004508:	69bb      	ldr	r3, [r7, #24]
 800450a:	4413      	add	r3, r2
 800450c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004510:	461a      	mov	r2, r3
 8004512:	2380      	movs	r3, #128	; 0x80
 8004514:	6093      	str	r3, [r2, #8]
}
 8004516:	e172      	b.n	80047fe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	015a      	lsls	r2, r3, #5
 800451c:	69bb      	ldr	r3, [r7, #24]
 800451e:	4413      	add	r3, r2
 8004520:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800452a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800452e:	d11b      	bne.n	8004568 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004530:	687a      	ldr	r2, [r7, #4]
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	212c      	movs	r1, #44	; 0x2c
 8004536:	fb01 f303 	mul.w	r3, r1, r3
 800453a:	4413      	add	r3, r2
 800453c:	3361      	adds	r3, #97	; 0x61
 800453e:	2208      	movs	r2, #8
 8004540:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	697a      	ldr	r2, [r7, #20]
 8004548:	b2d2      	uxtb	r2, r2
 800454a:	4611      	mov	r1, r2
 800454c:	4618      	mov	r0, r3
 800454e:	f004 fa3c 	bl	80089ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	015a      	lsls	r2, r3, #5
 8004556:	69bb      	ldr	r3, [r7, #24]
 8004558:	4413      	add	r3, r2
 800455a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800455e:	461a      	mov	r2, r3
 8004560:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004564:	6093      	str	r3, [r2, #8]
}
 8004566:	e14a      	b.n	80047fe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	015a      	lsls	r2, r3, #5
 800456c:	69bb      	ldr	r3, [r7, #24]
 800456e:	4413      	add	r3, r2
 8004570:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	f003 0302 	and.w	r3, r3, #2
 800457a:	2b02      	cmp	r3, #2
 800457c:	f040 813f 	bne.w	80047fe <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004580:	687a      	ldr	r2, [r7, #4]
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	212c      	movs	r1, #44	; 0x2c
 8004586:	fb01 f303 	mul.w	r3, r1, r3
 800458a:	4413      	add	r3, r2
 800458c:	3361      	adds	r3, #97	; 0x61
 800458e:	781b      	ldrb	r3, [r3, #0]
 8004590:	2b01      	cmp	r3, #1
 8004592:	d17d      	bne.n	8004690 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004594:	687a      	ldr	r2, [r7, #4]
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	212c      	movs	r1, #44	; 0x2c
 800459a:	fb01 f303 	mul.w	r3, r1, r3
 800459e:	4413      	add	r3, r2
 80045a0:	3360      	adds	r3, #96	; 0x60
 80045a2:	2201      	movs	r2, #1
 80045a4:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	212c      	movs	r1, #44	; 0x2c
 80045ac:	fb01 f303 	mul.w	r3, r1, r3
 80045b0:	4413      	add	r3, r2
 80045b2:	333f      	adds	r3, #63	; 0x3f
 80045b4:	781b      	ldrb	r3, [r3, #0]
 80045b6:	2b02      	cmp	r3, #2
 80045b8:	d00a      	beq.n	80045d0 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	212c      	movs	r1, #44	; 0x2c
 80045c0:	fb01 f303 	mul.w	r3, r1, r3
 80045c4:	4413      	add	r3, r2
 80045c6:	333f      	adds	r3, #63	; 0x3f
 80045c8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80045ca:	2b03      	cmp	r3, #3
 80045cc:	f040 8100 	bne.w	80047d0 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	691b      	ldr	r3, [r3, #16]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d113      	bne.n	8004600 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80045d8:	687a      	ldr	r2, [r7, #4]
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	212c      	movs	r1, #44	; 0x2c
 80045de:	fb01 f303 	mul.w	r3, r1, r3
 80045e2:	4413      	add	r3, r2
 80045e4:	3355      	adds	r3, #85	; 0x55
 80045e6:	781b      	ldrb	r3, [r3, #0]
 80045e8:	f083 0301 	eor.w	r3, r3, #1
 80045ec:	b2d8      	uxtb	r0, r3
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	212c      	movs	r1, #44	; 0x2c
 80045f4:	fb01 f303 	mul.w	r3, r1, r3
 80045f8:	4413      	add	r3, r2
 80045fa:	3355      	adds	r3, #85	; 0x55
 80045fc:	4602      	mov	r2, r0
 80045fe:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	691b      	ldr	r3, [r3, #16]
 8004604:	2b01      	cmp	r3, #1
 8004606:	f040 80e3 	bne.w	80047d0 <HCD_HC_OUT_IRQHandler+0x69c>
 800460a:	687a      	ldr	r2, [r7, #4]
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	212c      	movs	r1, #44	; 0x2c
 8004610:	fb01 f303 	mul.w	r3, r1, r3
 8004614:	4413      	add	r3, r2
 8004616:	334c      	adds	r3, #76	; 0x4c
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	2b00      	cmp	r3, #0
 800461c:	f000 80d8 	beq.w	80047d0 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8004620:	687a      	ldr	r2, [r7, #4]
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	212c      	movs	r1, #44	; 0x2c
 8004626:	fb01 f303 	mul.w	r3, r1, r3
 800462a:	4413      	add	r3, r2
 800462c:	334c      	adds	r3, #76	; 0x4c
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	6879      	ldr	r1, [r7, #4]
 8004632:	697a      	ldr	r2, [r7, #20]
 8004634:	202c      	movs	r0, #44	; 0x2c
 8004636:	fb00 f202 	mul.w	r2, r0, r2
 800463a:	440a      	add	r2, r1
 800463c:	3240      	adds	r2, #64	; 0x40
 800463e:	8812      	ldrh	r2, [r2, #0]
 8004640:	4413      	add	r3, r2
 8004642:	3b01      	subs	r3, #1
 8004644:	6879      	ldr	r1, [r7, #4]
 8004646:	697a      	ldr	r2, [r7, #20]
 8004648:	202c      	movs	r0, #44	; 0x2c
 800464a:	fb00 f202 	mul.w	r2, r0, r2
 800464e:	440a      	add	r2, r1
 8004650:	3240      	adds	r2, #64	; 0x40
 8004652:	8812      	ldrh	r2, [r2, #0]
 8004654:	fbb3 f3f2 	udiv	r3, r3, r2
 8004658:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	f003 0301 	and.w	r3, r3, #1
 8004660:	2b00      	cmp	r3, #0
 8004662:	f000 80b5 	beq.w	80047d0 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	212c      	movs	r1, #44	; 0x2c
 800466c:	fb01 f303 	mul.w	r3, r1, r3
 8004670:	4413      	add	r3, r2
 8004672:	3355      	adds	r3, #85	; 0x55
 8004674:	781b      	ldrb	r3, [r3, #0]
 8004676:	f083 0301 	eor.w	r3, r3, #1
 800467a:	b2d8      	uxtb	r0, r3
 800467c:	687a      	ldr	r2, [r7, #4]
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	212c      	movs	r1, #44	; 0x2c
 8004682:	fb01 f303 	mul.w	r3, r1, r3
 8004686:	4413      	add	r3, r2
 8004688:	3355      	adds	r3, #85	; 0x55
 800468a:	4602      	mov	r2, r0
 800468c:	701a      	strb	r2, [r3, #0]
 800468e:	e09f      	b.n	80047d0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	212c      	movs	r1, #44	; 0x2c
 8004696:	fb01 f303 	mul.w	r3, r1, r3
 800469a:	4413      	add	r3, r2
 800469c:	3361      	adds	r3, #97	; 0x61
 800469e:	781b      	ldrb	r3, [r3, #0]
 80046a0:	2b03      	cmp	r3, #3
 80046a2:	d109      	bne.n	80046b8 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80046a4:	687a      	ldr	r2, [r7, #4]
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	212c      	movs	r1, #44	; 0x2c
 80046aa:	fb01 f303 	mul.w	r3, r1, r3
 80046ae:	4413      	add	r3, r2
 80046b0:	3360      	adds	r3, #96	; 0x60
 80046b2:	2202      	movs	r2, #2
 80046b4:	701a      	strb	r2, [r3, #0]
 80046b6:	e08b      	b.n	80047d0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80046b8:	687a      	ldr	r2, [r7, #4]
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	212c      	movs	r1, #44	; 0x2c
 80046be:	fb01 f303 	mul.w	r3, r1, r3
 80046c2:	4413      	add	r3, r2
 80046c4:	3361      	adds	r3, #97	; 0x61
 80046c6:	781b      	ldrb	r3, [r3, #0]
 80046c8:	2b04      	cmp	r3, #4
 80046ca:	d109      	bne.n	80046e0 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80046cc:	687a      	ldr	r2, [r7, #4]
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	212c      	movs	r1, #44	; 0x2c
 80046d2:	fb01 f303 	mul.w	r3, r1, r3
 80046d6:	4413      	add	r3, r2
 80046d8:	3360      	adds	r3, #96	; 0x60
 80046da:	2202      	movs	r2, #2
 80046dc:	701a      	strb	r2, [r3, #0]
 80046de:	e077      	b.n	80047d0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	212c      	movs	r1, #44	; 0x2c
 80046e6:	fb01 f303 	mul.w	r3, r1, r3
 80046ea:	4413      	add	r3, r2
 80046ec:	3361      	adds	r3, #97	; 0x61
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	2b05      	cmp	r3, #5
 80046f2:	d109      	bne.n	8004708 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	212c      	movs	r1, #44	; 0x2c
 80046fa:	fb01 f303 	mul.w	r3, r1, r3
 80046fe:	4413      	add	r3, r2
 8004700:	3360      	adds	r3, #96	; 0x60
 8004702:	2205      	movs	r2, #5
 8004704:	701a      	strb	r2, [r3, #0]
 8004706:	e063      	b.n	80047d0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	212c      	movs	r1, #44	; 0x2c
 800470e:	fb01 f303 	mul.w	r3, r1, r3
 8004712:	4413      	add	r3, r2
 8004714:	3361      	adds	r3, #97	; 0x61
 8004716:	781b      	ldrb	r3, [r3, #0]
 8004718:	2b06      	cmp	r3, #6
 800471a:	d009      	beq.n	8004730 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	212c      	movs	r1, #44	; 0x2c
 8004722:	fb01 f303 	mul.w	r3, r1, r3
 8004726:	4413      	add	r3, r2
 8004728:	3361      	adds	r3, #97	; 0x61
 800472a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800472c:	2b08      	cmp	r3, #8
 800472e:	d14f      	bne.n	80047d0 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8004730:	687a      	ldr	r2, [r7, #4]
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	212c      	movs	r1, #44	; 0x2c
 8004736:	fb01 f303 	mul.w	r3, r1, r3
 800473a:	4413      	add	r3, r2
 800473c:	335c      	adds	r3, #92	; 0x5c
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	1c5a      	adds	r2, r3, #1
 8004742:	6879      	ldr	r1, [r7, #4]
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	202c      	movs	r0, #44	; 0x2c
 8004748:	fb00 f303 	mul.w	r3, r0, r3
 800474c:	440b      	add	r3, r1
 800474e:	335c      	adds	r3, #92	; 0x5c
 8004750:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	212c      	movs	r1, #44	; 0x2c
 8004758:	fb01 f303 	mul.w	r3, r1, r3
 800475c:	4413      	add	r3, r2
 800475e:	335c      	adds	r3, #92	; 0x5c
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	2b02      	cmp	r3, #2
 8004764:	d912      	bls.n	800478c <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	212c      	movs	r1, #44	; 0x2c
 800476c:	fb01 f303 	mul.w	r3, r1, r3
 8004770:	4413      	add	r3, r2
 8004772:	335c      	adds	r3, #92	; 0x5c
 8004774:	2200      	movs	r2, #0
 8004776:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004778:	687a      	ldr	r2, [r7, #4]
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	212c      	movs	r1, #44	; 0x2c
 800477e:	fb01 f303 	mul.w	r3, r1, r3
 8004782:	4413      	add	r3, r2
 8004784:	3360      	adds	r3, #96	; 0x60
 8004786:	2204      	movs	r2, #4
 8004788:	701a      	strb	r2, [r3, #0]
 800478a:	e021      	b.n	80047d0 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800478c:	687a      	ldr	r2, [r7, #4]
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	212c      	movs	r1, #44	; 0x2c
 8004792:	fb01 f303 	mul.w	r3, r1, r3
 8004796:	4413      	add	r3, r2
 8004798:	3360      	adds	r3, #96	; 0x60
 800479a:	2202      	movs	r2, #2
 800479c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	015a      	lsls	r2, r3, #5
 80047a2:	69bb      	ldr	r3, [r7, #24]
 80047a4:	4413      	add	r3, r2
 80047a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80047b4:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80047bc:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	015a      	lsls	r2, r3, #5
 80047c2:	69bb      	ldr	r3, [r7, #24]
 80047c4:	4413      	add	r3, r2
 80047c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047ca:	461a      	mov	r2, r3
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	015a      	lsls	r2, r3, #5
 80047d4:	69bb      	ldr	r3, [r7, #24]
 80047d6:	4413      	add	r3, r2
 80047d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047dc:	461a      	mov	r2, r3
 80047de:	2302      	movs	r3, #2
 80047e0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	b2d9      	uxtb	r1, r3
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	202c      	movs	r0, #44	; 0x2c
 80047ec:	fb00 f303 	mul.w	r3, r0, r3
 80047f0:	4413      	add	r3, r2
 80047f2:	3360      	adds	r3, #96	; 0x60
 80047f4:	781b      	ldrb	r3, [r3, #0]
 80047f6:	461a      	mov	r2, r3
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f00a ffad 	bl	800f758 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80047fe:	bf00      	nop
 8004800:	3720      	adds	r7, #32
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}

08004806 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004806:	b580      	push	{r7, lr}
 8004808:	b08a      	sub	sp, #40	; 0x28
 800480a:	af00      	add	r7, sp, #0
 800480c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004816:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	6a1b      	ldr	r3, [r3, #32]
 800481e:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004820:	69fb      	ldr	r3, [r7, #28]
 8004822:	f003 030f 	and.w	r3, r3, #15
 8004826:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004828:	69fb      	ldr	r3, [r7, #28]
 800482a:	0c5b      	lsrs	r3, r3, #17
 800482c:	f003 030f 	and.w	r3, r3, #15
 8004830:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004832:	69fb      	ldr	r3, [r7, #28]
 8004834:	091b      	lsrs	r3, r3, #4
 8004836:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800483a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	2b02      	cmp	r3, #2
 8004840:	d004      	beq.n	800484c <HCD_RXQLVL_IRQHandler+0x46>
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	2b05      	cmp	r3, #5
 8004846:	f000 80a9 	beq.w	800499c <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800484a:	e0aa      	b.n	80049a2 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	2b00      	cmp	r3, #0
 8004850:	f000 80a6 	beq.w	80049a0 <HCD_RXQLVL_IRQHandler+0x19a>
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	69bb      	ldr	r3, [r7, #24]
 8004858:	212c      	movs	r1, #44	; 0x2c
 800485a:	fb01 f303 	mul.w	r3, r1, r3
 800485e:	4413      	add	r3, r2
 8004860:	3344      	adds	r3, #68	; 0x44
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	2b00      	cmp	r3, #0
 8004866:	f000 809b 	beq.w	80049a0 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	69bb      	ldr	r3, [r7, #24]
 800486e:	212c      	movs	r1, #44	; 0x2c
 8004870:	fb01 f303 	mul.w	r3, r1, r3
 8004874:	4413      	add	r3, r2
 8004876:	3350      	adds	r3, #80	; 0x50
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	441a      	add	r2, r3
 800487e:	6879      	ldr	r1, [r7, #4]
 8004880:	69bb      	ldr	r3, [r7, #24]
 8004882:	202c      	movs	r0, #44	; 0x2c
 8004884:	fb00 f303 	mul.w	r3, r0, r3
 8004888:	440b      	add	r3, r1
 800488a:	334c      	adds	r3, #76	; 0x4c
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	429a      	cmp	r2, r3
 8004890:	d87a      	bhi.n	8004988 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6818      	ldr	r0, [r3, #0]
 8004896:	687a      	ldr	r2, [r7, #4]
 8004898:	69bb      	ldr	r3, [r7, #24]
 800489a:	212c      	movs	r1, #44	; 0x2c
 800489c:	fb01 f303 	mul.w	r3, r1, r3
 80048a0:	4413      	add	r3, r2
 80048a2:	3344      	adds	r3, #68	; 0x44
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	693a      	ldr	r2, [r7, #16]
 80048a8:	b292      	uxth	r2, r2
 80048aa:	4619      	mov	r1, r3
 80048ac:	f003 fbe4 	bl	8008078 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80048b0:	687a      	ldr	r2, [r7, #4]
 80048b2:	69bb      	ldr	r3, [r7, #24]
 80048b4:	212c      	movs	r1, #44	; 0x2c
 80048b6:	fb01 f303 	mul.w	r3, r1, r3
 80048ba:	4413      	add	r3, r2
 80048bc:	3344      	adds	r3, #68	; 0x44
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	441a      	add	r2, r3
 80048c4:	6879      	ldr	r1, [r7, #4]
 80048c6:	69bb      	ldr	r3, [r7, #24]
 80048c8:	202c      	movs	r0, #44	; 0x2c
 80048ca:	fb00 f303 	mul.w	r3, r0, r3
 80048ce:	440b      	add	r3, r1
 80048d0:	3344      	adds	r3, #68	; 0x44
 80048d2:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80048d4:	687a      	ldr	r2, [r7, #4]
 80048d6:	69bb      	ldr	r3, [r7, #24]
 80048d8:	212c      	movs	r1, #44	; 0x2c
 80048da:	fb01 f303 	mul.w	r3, r1, r3
 80048de:	4413      	add	r3, r2
 80048e0:	3350      	adds	r3, #80	; 0x50
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	441a      	add	r2, r3
 80048e8:	6879      	ldr	r1, [r7, #4]
 80048ea:	69bb      	ldr	r3, [r7, #24]
 80048ec:	202c      	movs	r0, #44	; 0x2c
 80048ee:	fb00 f303 	mul.w	r3, r0, r3
 80048f2:	440b      	add	r3, r1
 80048f4:	3350      	adds	r3, #80	; 0x50
 80048f6:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80048f8:	69bb      	ldr	r3, [r7, #24]
 80048fa:	015a      	lsls	r2, r3, #5
 80048fc:	6a3b      	ldr	r3, [r7, #32]
 80048fe:	4413      	add	r3, r2
 8004900:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004904:	691b      	ldr	r3, [r3, #16]
 8004906:	0cdb      	lsrs	r3, r3, #19
 8004908:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800490c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	69bb      	ldr	r3, [r7, #24]
 8004912:	212c      	movs	r1, #44	; 0x2c
 8004914:	fb01 f303 	mul.w	r3, r1, r3
 8004918:	4413      	add	r3, r2
 800491a:	3340      	adds	r3, #64	; 0x40
 800491c:	881b      	ldrh	r3, [r3, #0]
 800491e:	461a      	mov	r2, r3
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	4293      	cmp	r3, r2
 8004924:	d13c      	bne.n	80049a0 <HCD_RXQLVL_IRQHandler+0x19a>
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d039      	beq.n	80049a0 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 800492c:	69bb      	ldr	r3, [r7, #24]
 800492e:	015a      	lsls	r2, r3, #5
 8004930:	6a3b      	ldr	r3, [r7, #32]
 8004932:	4413      	add	r3, r2
 8004934:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004942:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800494a:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 800494c:	69bb      	ldr	r3, [r7, #24]
 800494e:	015a      	lsls	r2, r3, #5
 8004950:	6a3b      	ldr	r3, [r7, #32]
 8004952:	4413      	add	r3, r2
 8004954:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004958:	461a      	mov	r2, r3
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	69bb      	ldr	r3, [r7, #24]
 8004962:	212c      	movs	r1, #44	; 0x2c
 8004964:	fb01 f303 	mul.w	r3, r1, r3
 8004968:	4413      	add	r3, r2
 800496a:	3354      	adds	r3, #84	; 0x54
 800496c:	781b      	ldrb	r3, [r3, #0]
 800496e:	f083 0301 	eor.w	r3, r3, #1
 8004972:	b2d8      	uxtb	r0, r3
 8004974:	687a      	ldr	r2, [r7, #4]
 8004976:	69bb      	ldr	r3, [r7, #24]
 8004978:	212c      	movs	r1, #44	; 0x2c
 800497a:	fb01 f303 	mul.w	r3, r1, r3
 800497e:	4413      	add	r3, r2
 8004980:	3354      	adds	r3, #84	; 0x54
 8004982:	4602      	mov	r2, r0
 8004984:	701a      	strb	r2, [r3, #0]
      break;
 8004986:	e00b      	b.n	80049a0 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	69bb      	ldr	r3, [r7, #24]
 800498c:	212c      	movs	r1, #44	; 0x2c
 800498e:	fb01 f303 	mul.w	r3, r1, r3
 8004992:	4413      	add	r3, r2
 8004994:	3360      	adds	r3, #96	; 0x60
 8004996:	2204      	movs	r2, #4
 8004998:	701a      	strb	r2, [r3, #0]
      break;
 800499a:	e001      	b.n	80049a0 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800499c:	bf00      	nop
 800499e:	e000      	b.n	80049a2 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80049a0:	bf00      	nop
  }
}
 80049a2:	bf00      	nop
 80049a4:	3728      	adds	r7, #40	; 0x28
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}

080049aa <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80049aa:	b580      	push	{r7, lr}
 80049ac:	b086      	sub	sp, #24
 80049ae:	af00      	add	r7, sp, #0
 80049b0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80049d6:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f003 0302 	and.w	r3, r3, #2
 80049de:	2b02      	cmp	r3, #2
 80049e0:	d10b      	bne.n	80049fa <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	f003 0301 	and.w	r3, r3, #1
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d102      	bne.n	80049f2 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80049ec:	6878      	ldr	r0, [r7, #4]
 80049ee:	f00a fe97 	bl	800f720 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	f043 0302 	orr.w	r3, r3, #2
 80049f8:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	f003 0308 	and.w	r3, r3, #8
 8004a00:	2b08      	cmp	r3, #8
 8004a02:	d132      	bne.n	8004a6a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	f043 0308 	orr.w	r3, r3, #8
 8004a0a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f003 0304 	and.w	r3, r3, #4
 8004a12:	2b04      	cmp	r3, #4
 8004a14:	d126      	bne.n	8004a64 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	699b      	ldr	r3, [r3, #24]
 8004a1a:	2b02      	cmp	r3, #2
 8004a1c:	d113      	bne.n	8004a46 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004a24:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004a28:	d106      	bne.n	8004a38 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	2102      	movs	r1, #2
 8004a30:	4618      	mov	r0, r3
 8004a32:	f003 fc8f 	bl	8008354 <USB_InitFSLSPClkSel>
 8004a36:	e011      	b.n	8004a5c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	2101      	movs	r1, #1
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f003 fc88 	bl	8008354 <USB_InitFSLSPClkSel>
 8004a44:	e00a      	b.n	8004a5c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	68db      	ldr	r3, [r3, #12]
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d106      	bne.n	8004a5c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a54:	461a      	mov	r2, r3
 8004a56:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004a5a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f00a fe89 	bl	800f774 <HAL_HCD_PortEnabled_Callback>
 8004a62:	e002      	b.n	8004a6a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f00a fe93 	bl	800f790 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	f003 0320 	and.w	r3, r3, #32
 8004a70:	2b20      	cmp	r3, #32
 8004a72:	d103      	bne.n	8004a7c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	f043 0320 	orr.w	r3, r3, #32
 8004a7a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004a82:	461a      	mov	r2, r3
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	6013      	str	r3, [r2, #0]
}
 8004a88:	bf00      	nop
 8004a8a:	3718      	adds	r7, #24
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}

08004a90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b084      	sub	sp, #16
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d101      	bne.n	8004aa2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e12b      	b.n	8004cfa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d106      	bne.n	8004abc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f7fc ff5a 	bl	8001970 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2224      	movs	r2, #36	; 0x24
 8004ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f022 0201 	bic.w	r2, r2, #1
 8004ad2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ae2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	681a      	ldr	r2, [r3, #0]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004af2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004af4:	f002 fcda 	bl	80074ac <HAL_RCC_GetPCLK1Freq>
 8004af8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	4a81      	ldr	r2, [pc, #516]	; (8004d04 <HAL_I2C_Init+0x274>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d807      	bhi.n	8004b14 <HAL_I2C_Init+0x84>
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	4a80      	ldr	r2, [pc, #512]	; (8004d08 <HAL_I2C_Init+0x278>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	bf94      	ite	ls
 8004b0c:	2301      	movls	r3, #1
 8004b0e:	2300      	movhi	r3, #0
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	e006      	b.n	8004b22 <HAL_I2C_Init+0x92>
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	4a7d      	ldr	r2, [pc, #500]	; (8004d0c <HAL_I2C_Init+0x27c>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	bf94      	ite	ls
 8004b1c:	2301      	movls	r3, #1
 8004b1e:	2300      	movhi	r3, #0
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d001      	beq.n	8004b2a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e0e7      	b.n	8004cfa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	4a78      	ldr	r2, [pc, #480]	; (8004d10 <HAL_I2C_Init+0x280>)
 8004b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b32:	0c9b      	lsrs	r3, r3, #18
 8004b34:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	68ba      	ldr	r2, [r7, #8]
 8004b46:	430a      	orrs	r2, r1
 8004b48:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	6a1b      	ldr	r3, [r3, #32]
 8004b50:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	4a6a      	ldr	r2, [pc, #424]	; (8004d04 <HAL_I2C_Init+0x274>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d802      	bhi.n	8004b64 <HAL_I2C_Init+0xd4>
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	3301      	adds	r3, #1
 8004b62:	e009      	b.n	8004b78 <HAL_I2C_Init+0xe8>
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004b6a:	fb02 f303 	mul.w	r3, r2, r3
 8004b6e:	4a69      	ldr	r2, [pc, #420]	; (8004d14 <HAL_I2C_Init+0x284>)
 8004b70:	fba2 2303 	umull	r2, r3, r2, r3
 8004b74:	099b      	lsrs	r3, r3, #6
 8004b76:	3301      	adds	r3, #1
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	6812      	ldr	r2, [r2, #0]
 8004b7c:	430b      	orrs	r3, r1
 8004b7e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	69db      	ldr	r3, [r3, #28]
 8004b86:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004b8a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	495c      	ldr	r1, [pc, #368]	; (8004d04 <HAL_I2C_Init+0x274>)
 8004b94:	428b      	cmp	r3, r1
 8004b96:	d819      	bhi.n	8004bcc <HAL_I2C_Init+0x13c>
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	1e59      	subs	r1, r3, #1
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	005b      	lsls	r3, r3, #1
 8004ba2:	fbb1 f3f3 	udiv	r3, r1, r3
 8004ba6:	1c59      	adds	r1, r3, #1
 8004ba8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004bac:	400b      	ands	r3, r1
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d00a      	beq.n	8004bc8 <HAL_I2C_Init+0x138>
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	1e59      	subs	r1, r3, #1
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	005b      	lsls	r3, r3, #1
 8004bbc:	fbb1 f3f3 	udiv	r3, r1, r3
 8004bc0:	3301      	adds	r3, #1
 8004bc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bc6:	e051      	b.n	8004c6c <HAL_I2C_Init+0x1dc>
 8004bc8:	2304      	movs	r3, #4
 8004bca:	e04f      	b.n	8004c6c <HAL_I2C_Init+0x1dc>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d111      	bne.n	8004bf8 <HAL_I2C_Init+0x168>
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	1e58      	subs	r0, r3, #1
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6859      	ldr	r1, [r3, #4]
 8004bdc:	460b      	mov	r3, r1
 8004bde:	005b      	lsls	r3, r3, #1
 8004be0:	440b      	add	r3, r1
 8004be2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004be6:	3301      	adds	r3, #1
 8004be8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	bf0c      	ite	eq
 8004bf0:	2301      	moveq	r3, #1
 8004bf2:	2300      	movne	r3, #0
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	e012      	b.n	8004c1e <HAL_I2C_Init+0x18e>
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	1e58      	subs	r0, r3, #1
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6859      	ldr	r1, [r3, #4]
 8004c00:	460b      	mov	r3, r1
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	440b      	add	r3, r1
 8004c06:	0099      	lsls	r1, r3, #2
 8004c08:	440b      	add	r3, r1
 8004c0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c0e:	3301      	adds	r3, #1
 8004c10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	bf0c      	ite	eq
 8004c18:	2301      	moveq	r3, #1
 8004c1a:	2300      	movne	r3, #0
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d001      	beq.n	8004c26 <HAL_I2C_Init+0x196>
 8004c22:	2301      	movs	r3, #1
 8004c24:	e022      	b.n	8004c6c <HAL_I2C_Init+0x1dc>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d10e      	bne.n	8004c4c <HAL_I2C_Init+0x1bc>
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	1e58      	subs	r0, r3, #1
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6859      	ldr	r1, [r3, #4]
 8004c36:	460b      	mov	r3, r1
 8004c38:	005b      	lsls	r3, r3, #1
 8004c3a:	440b      	add	r3, r1
 8004c3c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c40:	3301      	adds	r3, #1
 8004c42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c4a:	e00f      	b.n	8004c6c <HAL_I2C_Init+0x1dc>
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	1e58      	subs	r0, r3, #1
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6859      	ldr	r1, [r3, #4]
 8004c54:	460b      	mov	r3, r1
 8004c56:	009b      	lsls	r3, r3, #2
 8004c58:	440b      	add	r3, r1
 8004c5a:	0099      	lsls	r1, r3, #2
 8004c5c:	440b      	add	r3, r1
 8004c5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c62:	3301      	adds	r3, #1
 8004c64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c68:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c6c:	6879      	ldr	r1, [r7, #4]
 8004c6e:	6809      	ldr	r1, [r1, #0]
 8004c70:	4313      	orrs	r3, r2
 8004c72:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	69da      	ldr	r2, [r3, #28]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6a1b      	ldr	r3, [r3, #32]
 8004c86:	431a      	orrs	r2, r3
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	430a      	orrs	r2, r1
 8004c8e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004c9a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	6911      	ldr	r1, [r2, #16]
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	68d2      	ldr	r2, [r2, #12]
 8004ca6:	4311      	orrs	r1, r2
 8004ca8:	687a      	ldr	r2, [r7, #4]
 8004caa:	6812      	ldr	r2, [r2, #0]
 8004cac:	430b      	orrs	r3, r1
 8004cae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	68db      	ldr	r3, [r3, #12]
 8004cb6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	695a      	ldr	r2, [r3, #20]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	699b      	ldr	r3, [r3, #24]
 8004cc2:	431a      	orrs	r2, r3
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	430a      	orrs	r2, r1
 8004cca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f042 0201 	orr.w	r2, r2, #1
 8004cda:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2220      	movs	r2, #32
 8004ce6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2200      	movs	r2, #0
 8004cee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004cf8:	2300      	movs	r3, #0
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3710      	adds	r7, #16
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}
 8004d02:	bf00      	nop
 8004d04:	000186a0 	.word	0x000186a0
 8004d08:	001e847f 	.word	0x001e847f
 8004d0c:	003d08ff 	.word	0x003d08ff
 8004d10:	431bde83 	.word	0x431bde83
 8004d14:	10624dd3 	.word	0x10624dd3

08004d18 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b082      	sub	sp, #8
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d101      	bne.n	8004d2a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	e021      	b.n	8004d6e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2224      	movs	r2, #36	; 0x24
 8004d2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f022 0201 	bic.w	r2, r2, #1
 8004d40:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f7fc fe5c 	bl	8001a00 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2200      	movs	r2, #0
 8004d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2200      	movs	r2, #0
 8004d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d6c:	2300      	movs	r3, #0
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3708      	adds	r7, #8
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
	...

08004d78 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b088      	sub	sp, #32
 8004d7c:	af02      	add	r7, sp, #8
 8004d7e:	60f8      	str	r0, [r7, #12]
 8004d80:	4608      	mov	r0, r1
 8004d82:	4611      	mov	r1, r2
 8004d84:	461a      	mov	r2, r3
 8004d86:	4603      	mov	r3, r0
 8004d88:	817b      	strh	r3, [r7, #10]
 8004d8a:	460b      	mov	r3, r1
 8004d8c:	813b      	strh	r3, [r7, #8]
 8004d8e:	4613      	mov	r3, r2
 8004d90:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004d92:	f7fd fa59 	bl	8002248 <HAL_GetTick>
 8004d96:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	2b20      	cmp	r3, #32
 8004da2:	f040 80d9 	bne.w	8004f58 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	9300      	str	r3, [sp, #0]
 8004daa:	2319      	movs	r3, #25
 8004dac:	2201      	movs	r2, #1
 8004dae:	496d      	ldr	r1, [pc, #436]	; (8004f64 <HAL_I2C_Mem_Write+0x1ec>)
 8004db0:	68f8      	ldr	r0, [r7, #12]
 8004db2:	f000 fc8d 	bl	80056d0 <I2C_WaitOnFlagUntilTimeout>
 8004db6:	4603      	mov	r3, r0
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d001      	beq.n	8004dc0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004dbc:	2302      	movs	r3, #2
 8004dbe:	e0cc      	b.n	8004f5a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dc6:	2b01      	cmp	r3, #1
 8004dc8:	d101      	bne.n	8004dce <HAL_I2C_Mem_Write+0x56>
 8004dca:	2302      	movs	r3, #2
 8004dcc:	e0c5      	b.n	8004f5a <HAL_I2C_Mem_Write+0x1e2>
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 0301 	and.w	r3, r3, #1
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d007      	beq.n	8004df4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f042 0201 	orr.w	r2, r2, #1
 8004df2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e02:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2221      	movs	r2, #33	; 0x21
 8004e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2240      	movs	r2, #64	; 0x40
 8004e10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2200      	movs	r2, #0
 8004e18:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	6a3a      	ldr	r2, [r7, #32]
 8004e1e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004e24:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e2a:	b29a      	uxth	r2, r3
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	4a4d      	ldr	r2, [pc, #308]	; (8004f68 <HAL_I2C_Mem_Write+0x1f0>)
 8004e34:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004e36:	88f8      	ldrh	r0, [r7, #6]
 8004e38:	893a      	ldrh	r2, [r7, #8]
 8004e3a:	8979      	ldrh	r1, [r7, #10]
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	9301      	str	r3, [sp, #4]
 8004e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e42:	9300      	str	r3, [sp, #0]
 8004e44:	4603      	mov	r3, r0
 8004e46:	68f8      	ldr	r0, [r7, #12]
 8004e48:	f000 fac4 	bl	80053d4 <I2C_RequestMemoryWrite>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d052      	beq.n	8004ef8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	e081      	b.n	8004f5a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e56:	697a      	ldr	r2, [r7, #20]
 8004e58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e5a:	68f8      	ldr	r0, [r7, #12]
 8004e5c:	f000 fd0e 	bl	800587c <I2C_WaitOnTXEFlagUntilTimeout>
 8004e60:	4603      	mov	r3, r0
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d00d      	beq.n	8004e82 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e6a:	2b04      	cmp	r3, #4
 8004e6c:	d107      	bne.n	8004e7e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e7c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e06b      	b.n	8004f5a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e86:	781a      	ldrb	r2, [r3, #0]
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e92:	1c5a      	adds	r2, r3, #1
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e9c:	3b01      	subs	r3, #1
 8004e9e:	b29a      	uxth	r2, r3
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ea8:	b29b      	uxth	r3, r3
 8004eaa:	3b01      	subs	r3, #1
 8004eac:	b29a      	uxth	r2, r3
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	695b      	ldr	r3, [r3, #20]
 8004eb8:	f003 0304 	and.w	r3, r3, #4
 8004ebc:	2b04      	cmp	r3, #4
 8004ebe:	d11b      	bne.n	8004ef8 <HAL_I2C_Mem_Write+0x180>
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d017      	beq.n	8004ef8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ecc:	781a      	ldrb	r2, [r3, #0]
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed8:	1c5a      	adds	r2, r3, #1
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ee2:	3b01      	subs	r3, #1
 8004ee4:	b29a      	uxth	r2, r3
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	3b01      	subs	r3, #1
 8004ef2:	b29a      	uxth	r2, r3
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d1aa      	bne.n	8004e56 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f00:	697a      	ldr	r2, [r7, #20]
 8004f02:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f04:	68f8      	ldr	r0, [r7, #12]
 8004f06:	f000 fcfa 	bl	80058fe <I2C_WaitOnBTFFlagUntilTimeout>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d00d      	beq.n	8004f2c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f14:	2b04      	cmp	r3, #4
 8004f16:	d107      	bne.n	8004f28 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	681a      	ldr	r2, [r3, #0]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f26:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	e016      	b.n	8004f5a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2220      	movs	r2, #32
 8004f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2200      	movs	r2, #0
 8004f48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004f54:	2300      	movs	r3, #0
 8004f56:	e000      	b.n	8004f5a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004f58:	2302      	movs	r3, #2
  }
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3718      	adds	r7, #24
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}
 8004f62:	bf00      	nop
 8004f64:	00100002 	.word	0x00100002
 8004f68:	ffff0000 	.word	0xffff0000

08004f6c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b08c      	sub	sp, #48	; 0x30
 8004f70:	af02      	add	r7, sp, #8
 8004f72:	60f8      	str	r0, [r7, #12]
 8004f74:	4608      	mov	r0, r1
 8004f76:	4611      	mov	r1, r2
 8004f78:	461a      	mov	r2, r3
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	817b      	strh	r3, [r7, #10]
 8004f7e:	460b      	mov	r3, r1
 8004f80:	813b      	strh	r3, [r7, #8]
 8004f82:	4613      	mov	r3, r2
 8004f84:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004f86:	f7fd f95f 	bl	8002248 <HAL_GetTick>
 8004f8a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f92:	b2db      	uxtb	r3, r3
 8004f94:	2b20      	cmp	r3, #32
 8004f96:	f040 8208 	bne.w	80053aa <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f9c:	9300      	str	r3, [sp, #0]
 8004f9e:	2319      	movs	r3, #25
 8004fa0:	2201      	movs	r2, #1
 8004fa2:	497b      	ldr	r1, [pc, #492]	; (8005190 <HAL_I2C_Mem_Read+0x224>)
 8004fa4:	68f8      	ldr	r0, [r7, #12]
 8004fa6:	f000 fb93 	bl	80056d0 <I2C_WaitOnFlagUntilTimeout>
 8004faa:	4603      	mov	r3, r0
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d001      	beq.n	8004fb4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004fb0:	2302      	movs	r3, #2
 8004fb2:	e1fb      	b.n	80053ac <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	d101      	bne.n	8004fc2 <HAL_I2C_Mem_Read+0x56>
 8004fbe:	2302      	movs	r3, #2
 8004fc0:	e1f4      	b.n	80053ac <HAL_I2C_Mem_Read+0x440>
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f003 0301 	and.w	r3, r3, #1
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d007      	beq.n	8004fe8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f042 0201 	orr.w	r2, r2, #1
 8004fe6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ff6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2222      	movs	r2, #34	; 0x22
 8004ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2240      	movs	r2, #64	; 0x40
 8005004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2200      	movs	r2, #0
 800500c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005012:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005018:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800501e:	b29a      	uxth	r2, r3
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	4a5b      	ldr	r2, [pc, #364]	; (8005194 <HAL_I2C_Mem_Read+0x228>)
 8005028:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800502a:	88f8      	ldrh	r0, [r7, #6]
 800502c:	893a      	ldrh	r2, [r7, #8]
 800502e:	8979      	ldrh	r1, [r7, #10]
 8005030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005032:	9301      	str	r3, [sp, #4]
 8005034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005036:	9300      	str	r3, [sp, #0]
 8005038:	4603      	mov	r3, r0
 800503a:	68f8      	ldr	r0, [r7, #12]
 800503c:	f000 fa60 	bl	8005500 <I2C_RequestMemoryRead>
 8005040:	4603      	mov	r3, r0
 8005042:	2b00      	cmp	r3, #0
 8005044:	d001      	beq.n	800504a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	e1b0      	b.n	80053ac <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800504e:	2b00      	cmp	r3, #0
 8005050:	d113      	bne.n	800507a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005052:	2300      	movs	r3, #0
 8005054:	623b      	str	r3, [r7, #32]
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	695b      	ldr	r3, [r3, #20]
 800505c:	623b      	str	r3, [r7, #32]
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	699b      	ldr	r3, [r3, #24]
 8005064:	623b      	str	r3, [r7, #32]
 8005066:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005076:	601a      	str	r2, [r3, #0]
 8005078:	e184      	b.n	8005384 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800507e:	2b01      	cmp	r3, #1
 8005080:	d11b      	bne.n	80050ba <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005090:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005092:	2300      	movs	r3, #0
 8005094:	61fb      	str	r3, [r7, #28]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	695b      	ldr	r3, [r3, #20]
 800509c:	61fb      	str	r3, [r7, #28]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	699b      	ldr	r3, [r3, #24]
 80050a4:	61fb      	str	r3, [r7, #28]
 80050a6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050b6:	601a      	str	r2, [r3, #0]
 80050b8:	e164      	b.n	8005384 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050be:	2b02      	cmp	r3, #2
 80050c0:	d11b      	bne.n	80050fa <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050d0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050e0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050e2:	2300      	movs	r3, #0
 80050e4:	61bb      	str	r3, [r7, #24]
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	695b      	ldr	r3, [r3, #20]
 80050ec:	61bb      	str	r3, [r7, #24]
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	699b      	ldr	r3, [r3, #24]
 80050f4:	61bb      	str	r3, [r7, #24]
 80050f6:	69bb      	ldr	r3, [r7, #24]
 80050f8:	e144      	b.n	8005384 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050fa:	2300      	movs	r3, #0
 80050fc:	617b      	str	r3, [r7, #20]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	695b      	ldr	r3, [r3, #20]
 8005104:	617b      	str	r3, [r7, #20]
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	699b      	ldr	r3, [r3, #24]
 800510c:	617b      	str	r3, [r7, #20]
 800510e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005110:	e138      	b.n	8005384 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005116:	2b03      	cmp	r3, #3
 8005118:	f200 80f1 	bhi.w	80052fe <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005120:	2b01      	cmp	r3, #1
 8005122:	d123      	bne.n	800516c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005124:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005126:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005128:	68f8      	ldr	r0, [r7, #12]
 800512a:	f000 fc29 	bl	8005980 <I2C_WaitOnRXNEFlagUntilTimeout>
 800512e:	4603      	mov	r3, r0
 8005130:	2b00      	cmp	r3, #0
 8005132:	d001      	beq.n	8005138 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	e139      	b.n	80053ac <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	691a      	ldr	r2, [r3, #16]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005142:	b2d2      	uxtb	r2, r2
 8005144:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800514a:	1c5a      	adds	r2, r3, #1
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005154:	3b01      	subs	r3, #1
 8005156:	b29a      	uxth	r2, r3
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005160:	b29b      	uxth	r3, r3
 8005162:	3b01      	subs	r3, #1
 8005164:	b29a      	uxth	r2, r3
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	855a      	strh	r2, [r3, #42]	; 0x2a
 800516a:	e10b      	b.n	8005384 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005170:	2b02      	cmp	r3, #2
 8005172:	d14e      	bne.n	8005212 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005176:	9300      	str	r3, [sp, #0]
 8005178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800517a:	2200      	movs	r2, #0
 800517c:	4906      	ldr	r1, [pc, #24]	; (8005198 <HAL_I2C_Mem_Read+0x22c>)
 800517e:	68f8      	ldr	r0, [r7, #12]
 8005180:	f000 faa6 	bl	80056d0 <I2C_WaitOnFlagUntilTimeout>
 8005184:	4603      	mov	r3, r0
 8005186:	2b00      	cmp	r3, #0
 8005188:	d008      	beq.n	800519c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800518a:	2301      	movs	r3, #1
 800518c:	e10e      	b.n	80053ac <HAL_I2C_Mem_Read+0x440>
 800518e:	bf00      	nop
 8005190:	00100002 	.word	0x00100002
 8005194:	ffff0000 	.word	0xffff0000
 8005198:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	691a      	ldr	r2, [r3, #16]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b6:	b2d2      	uxtb	r2, r2
 80051b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051be:	1c5a      	adds	r2, r3, #1
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051c8:	3b01      	subs	r3, #1
 80051ca:	b29a      	uxth	r2, r3
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051d4:	b29b      	uxth	r3, r3
 80051d6:	3b01      	subs	r3, #1
 80051d8:	b29a      	uxth	r2, r3
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	691a      	ldr	r2, [r3, #16]
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e8:	b2d2      	uxtb	r2, r2
 80051ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f0:	1c5a      	adds	r2, r3, #1
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051fa:	3b01      	subs	r3, #1
 80051fc:	b29a      	uxth	r2, r3
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005206:	b29b      	uxth	r3, r3
 8005208:	3b01      	subs	r3, #1
 800520a:	b29a      	uxth	r2, r3
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005210:	e0b8      	b.n	8005384 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005214:	9300      	str	r3, [sp, #0]
 8005216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005218:	2200      	movs	r2, #0
 800521a:	4966      	ldr	r1, [pc, #408]	; (80053b4 <HAL_I2C_Mem_Read+0x448>)
 800521c:	68f8      	ldr	r0, [r7, #12]
 800521e:	f000 fa57 	bl	80056d0 <I2C_WaitOnFlagUntilTimeout>
 8005222:	4603      	mov	r3, r0
 8005224:	2b00      	cmp	r3, #0
 8005226:	d001      	beq.n	800522c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	e0bf      	b.n	80053ac <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800523a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	691a      	ldr	r2, [r3, #16]
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005246:	b2d2      	uxtb	r2, r2
 8005248:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524e:	1c5a      	adds	r2, r3, #1
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005258:	3b01      	subs	r3, #1
 800525a:	b29a      	uxth	r2, r3
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005264:	b29b      	uxth	r3, r3
 8005266:	3b01      	subs	r3, #1
 8005268:	b29a      	uxth	r2, r3
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800526e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005270:	9300      	str	r3, [sp, #0]
 8005272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005274:	2200      	movs	r2, #0
 8005276:	494f      	ldr	r1, [pc, #316]	; (80053b4 <HAL_I2C_Mem_Read+0x448>)
 8005278:	68f8      	ldr	r0, [r7, #12]
 800527a:	f000 fa29 	bl	80056d0 <I2C_WaitOnFlagUntilTimeout>
 800527e:	4603      	mov	r3, r0
 8005280:	2b00      	cmp	r3, #0
 8005282:	d001      	beq.n	8005288 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005284:	2301      	movs	r3, #1
 8005286:	e091      	b.n	80053ac <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005296:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	691a      	ldr	r2, [r3, #16]
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a2:	b2d2      	uxtb	r2, r2
 80052a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052aa:	1c5a      	adds	r2, r3, #1
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052b4:	3b01      	subs	r3, #1
 80052b6:	b29a      	uxth	r2, r3
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052c0:	b29b      	uxth	r3, r3
 80052c2:	3b01      	subs	r3, #1
 80052c4:	b29a      	uxth	r2, r3
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	691a      	ldr	r2, [r3, #16]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d4:	b2d2      	uxtb	r2, r2
 80052d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052dc:	1c5a      	adds	r2, r3, #1
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052e6:	3b01      	subs	r3, #1
 80052e8:	b29a      	uxth	r2, r3
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052f2:	b29b      	uxth	r3, r3
 80052f4:	3b01      	subs	r3, #1
 80052f6:	b29a      	uxth	r2, r3
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80052fc:	e042      	b.n	8005384 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005300:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005302:	68f8      	ldr	r0, [r7, #12]
 8005304:	f000 fb3c 	bl	8005980 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005308:	4603      	mov	r3, r0
 800530a:	2b00      	cmp	r3, #0
 800530c:	d001      	beq.n	8005312 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	e04c      	b.n	80053ac <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	691a      	ldr	r2, [r3, #16]
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800531c:	b2d2      	uxtb	r2, r2
 800531e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005324:	1c5a      	adds	r2, r3, #1
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800532e:	3b01      	subs	r3, #1
 8005330:	b29a      	uxth	r2, r3
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800533a:	b29b      	uxth	r3, r3
 800533c:	3b01      	subs	r3, #1
 800533e:	b29a      	uxth	r2, r3
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	695b      	ldr	r3, [r3, #20]
 800534a:	f003 0304 	and.w	r3, r3, #4
 800534e:	2b04      	cmp	r3, #4
 8005350:	d118      	bne.n	8005384 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	691a      	ldr	r2, [r3, #16]
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800535c:	b2d2      	uxtb	r2, r2
 800535e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005364:	1c5a      	adds	r2, r3, #1
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800536e:	3b01      	subs	r3, #1
 8005370:	b29a      	uxth	r2, r3
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800537a:	b29b      	uxth	r3, r3
 800537c:	3b01      	subs	r3, #1
 800537e:	b29a      	uxth	r2, r3
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005388:	2b00      	cmp	r3, #0
 800538a:	f47f aec2 	bne.w	8005112 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2220      	movs	r2, #32
 8005392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2200      	movs	r2, #0
 800539a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2200      	movs	r2, #0
 80053a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80053a6:	2300      	movs	r3, #0
 80053a8:	e000      	b.n	80053ac <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80053aa:	2302      	movs	r3, #2
  }
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3728      	adds	r7, #40	; 0x28
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}
 80053b4:	00010004 	.word	0x00010004

080053b8 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b083      	sub	sp, #12
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053c6:	b2db      	uxtb	r3, r3
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	370c      	adds	r7, #12
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr

080053d4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b088      	sub	sp, #32
 80053d8:	af02      	add	r7, sp, #8
 80053da:	60f8      	str	r0, [r7, #12]
 80053dc:	4608      	mov	r0, r1
 80053de:	4611      	mov	r1, r2
 80053e0:	461a      	mov	r2, r3
 80053e2:	4603      	mov	r3, r0
 80053e4:	817b      	strh	r3, [r7, #10]
 80053e6:	460b      	mov	r3, r1
 80053e8:	813b      	strh	r3, [r7, #8]
 80053ea:	4613      	mov	r3, r2
 80053ec:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053fc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80053fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005400:	9300      	str	r3, [sp, #0]
 8005402:	6a3b      	ldr	r3, [r7, #32]
 8005404:	2200      	movs	r2, #0
 8005406:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800540a:	68f8      	ldr	r0, [r7, #12]
 800540c:	f000 f960 	bl	80056d0 <I2C_WaitOnFlagUntilTimeout>
 8005410:	4603      	mov	r3, r0
 8005412:	2b00      	cmp	r3, #0
 8005414:	d00d      	beq.n	8005432 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005420:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005424:	d103      	bne.n	800542e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	f44f 7200 	mov.w	r2, #512	; 0x200
 800542c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800542e:	2303      	movs	r3, #3
 8005430:	e05f      	b.n	80054f2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005432:	897b      	ldrh	r3, [r7, #10]
 8005434:	b2db      	uxtb	r3, r3
 8005436:	461a      	mov	r2, r3
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005440:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005444:	6a3a      	ldr	r2, [r7, #32]
 8005446:	492d      	ldr	r1, [pc, #180]	; (80054fc <I2C_RequestMemoryWrite+0x128>)
 8005448:	68f8      	ldr	r0, [r7, #12]
 800544a:	f000 f998 	bl	800577e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800544e:	4603      	mov	r3, r0
 8005450:	2b00      	cmp	r3, #0
 8005452:	d001      	beq.n	8005458 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	e04c      	b.n	80054f2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005458:	2300      	movs	r3, #0
 800545a:	617b      	str	r3, [r7, #20]
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	695b      	ldr	r3, [r3, #20]
 8005462:	617b      	str	r3, [r7, #20]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	699b      	ldr	r3, [r3, #24]
 800546a:	617b      	str	r3, [r7, #20]
 800546c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800546e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005470:	6a39      	ldr	r1, [r7, #32]
 8005472:	68f8      	ldr	r0, [r7, #12]
 8005474:	f000 fa02 	bl	800587c <I2C_WaitOnTXEFlagUntilTimeout>
 8005478:	4603      	mov	r3, r0
 800547a:	2b00      	cmp	r3, #0
 800547c:	d00d      	beq.n	800549a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005482:	2b04      	cmp	r3, #4
 8005484:	d107      	bne.n	8005496 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005494:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005496:	2301      	movs	r3, #1
 8005498:	e02b      	b.n	80054f2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800549a:	88fb      	ldrh	r3, [r7, #6]
 800549c:	2b01      	cmp	r3, #1
 800549e:	d105      	bne.n	80054ac <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80054a0:	893b      	ldrh	r3, [r7, #8]
 80054a2:	b2da      	uxtb	r2, r3
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	611a      	str	r2, [r3, #16]
 80054aa:	e021      	b.n	80054f0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80054ac:	893b      	ldrh	r3, [r7, #8]
 80054ae:	0a1b      	lsrs	r3, r3, #8
 80054b0:	b29b      	uxth	r3, r3
 80054b2:	b2da      	uxtb	r2, r3
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054bc:	6a39      	ldr	r1, [r7, #32]
 80054be:	68f8      	ldr	r0, [r7, #12]
 80054c0:	f000 f9dc 	bl	800587c <I2C_WaitOnTXEFlagUntilTimeout>
 80054c4:	4603      	mov	r3, r0
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d00d      	beq.n	80054e6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ce:	2b04      	cmp	r3, #4
 80054d0:	d107      	bne.n	80054e2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	681a      	ldr	r2, [r3, #0]
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054e0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	e005      	b.n	80054f2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80054e6:	893b      	ldrh	r3, [r7, #8]
 80054e8:	b2da      	uxtb	r2, r3
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80054f0:	2300      	movs	r3, #0
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3718      	adds	r7, #24
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}
 80054fa:	bf00      	nop
 80054fc:	00010002 	.word	0x00010002

08005500 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b088      	sub	sp, #32
 8005504:	af02      	add	r7, sp, #8
 8005506:	60f8      	str	r0, [r7, #12]
 8005508:	4608      	mov	r0, r1
 800550a:	4611      	mov	r1, r2
 800550c:	461a      	mov	r2, r3
 800550e:	4603      	mov	r3, r0
 8005510:	817b      	strh	r3, [r7, #10]
 8005512:	460b      	mov	r3, r1
 8005514:	813b      	strh	r3, [r7, #8]
 8005516:	4613      	mov	r3, r2
 8005518:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005528:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005538:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800553a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553c:	9300      	str	r3, [sp, #0]
 800553e:	6a3b      	ldr	r3, [r7, #32]
 8005540:	2200      	movs	r2, #0
 8005542:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005546:	68f8      	ldr	r0, [r7, #12]
 8005548:	f000 f8c2 	bl	80056d0 <I2C_WaitOnFlagUntilTimeout>
 800554c:	4603      	mov	r3, r0
 800554e:	2b00      	cmp	r3, #0
 8005550:	d00d      	beq.n	800556e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800555c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005560:	d103      	bne.n	800556a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005568:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800556a:	2303      	movs	r3, #3
 800556c:	e0aa      	b.n	80056c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800556e:	897b      	ldrh	r3, [r7, #10]
 8005570:	b2db      	uxtb	r3, r3
 8005572:	461a      	mov	r2, r3
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800557c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800557e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005580:	6a3a      	ldr	r2, [r7, #32]
 8005582:	4952      	ldr	r1, [pc, #328]	; (80056cc <I2C_RequestMemoryRead+0x1cc>)
 8005584:	68f8      	ldr	r0, [r7, #12]
 8005586:	f000 f8fa 	bl	800577e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800558a:	4603      	mov	r3, r0
 800558c:	2b00      	cmp	r3, #0
 800558e:	d001      	beq.n	8005594 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005590:	2301      	movs	r3, #1
 8005592:	e097      	b.n	80056c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005594:	2300      	movs	r3, #0
 8005596:	617b      	str	r3, [r7, #20]
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	695b      	ldr	r3, [r3, #20]
 800559e:	617b      	str	r3, [r7, #20]
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	699b      	ldr	r3, [r3, #24]
 80055a6:	617b      	str	r3, [r7, #20]
 80055a8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80055aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055ac:	6a39      	ldr	r1, [r7, #32]
 80055ae:	68f8      	ldr	r0, [r7, #12]
 80055b0:	f000 f964 	bl	800587c <I2C_WaitOnTXEFlagUntilTimeout>
 80055b4:	4603      	mov	r3, r0
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d00d      	beq.n	80055d6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055be:	2b04      	cmp	r3, #4
 80055c0:	d107      	bne.n	80055d2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055d0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80055d2:	2301      	movs	r3, #1
 80055d4:	e076      	b.n	80056c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80055d6:	88fb      	ldrh	r3, [r7, #6]
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d105      	bne.n	80055e8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80055dc:	893b      	ldrh	r3, [r7, #8]
 80055de:	b2da      	uxtb	r2, r3
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	611a      	str	r2, [r3, #16]
 80055e6:	e021      	b.n	800562c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80055e8:	893b      	ldrh	r3, [r7, #8]
 80055ea:	0a1b      	lsrs	r3, r3, #8
 80055ec:	b29b      	uxth	r3, r3
 80055ee:	b2da      	uxtb	r2, r3
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80055f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055f8:	6a39      	ldr	r1, [r7, #32]
 80055fa:	68f8      	ldr	r0, [r7, #12]
 80055fc:	f000 f93e 	bl	800587c <I2C_WaitOnTXEFlagUntilTimeout>
 8005600:	4603      	mov	r3, r0
 8005602:	2b00      	cmp	r3, #0
 8005604:	d00d      	beq.n	8005622 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800560a:	2b04      	cmp	r3, #4
 800560c:	d107      	bne.n	800561e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800561c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	e050      	b.n	80056c4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005622:	893b      	ldrh	r3, [r7, #8]
 8005624:	b2da      	uxtb	r2, r3
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800562c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800562e:	6a39      	ldr	r1, [r7, #32]
 8005630:	68f8      	ldr	r0, [r7, #12]
 8005632:	f000 f923 	bl	800587c <I2C_WaitOnTXEFlagUntilTimeout>
 8005636:	4603      	mov	r3, r0
 8005638:	2b00      	cmp	r3, #0
 800563a:	d00d      	beq.n	8005658 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005640:	2b04      	cmp	r3, #4
 8005642:	d107      	bne.n	8005654 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	681a      	ldr	r2, [r3, #0]
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005652:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005654:	2301      	movs	r3, #1
 8005656:	e035      	b.n	80056c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005666:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800566a:	9300      	str	r3, [sp, #0]
 800566c:	6a3b      	ldr	r3, [r7, #32]
 800566e:	2200      	movs	r2, #0
 8005670:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005674:	68f8      	ldr	r0, [r7, #12]
 8005676:	f000 f82b 	bl	80056d0 <I2C_WaitOnFlagUntilTimeout>
 800567a:	4603      	mov	r3, r0
 800567c:	2b00      	cmp	r3, #0
 800567e:	d00d      	beq.n	800569c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800568a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800568e:	d103      	bne.n	8005698 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005696:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005698:	2303      	movs	r3, #3
 800569a:	e013      	b.n	80056c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800569c:	897b      	ldrh	r3, [r7, #10]
 800569e:	b2db      	uxtb	r3, r3
 80056a0:	f043 0301 	orr.w	r3, r3, #1
 80056a4:	b2da      	uxtb	r2, r3
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80056ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ae:	6a3a      	ldr	r2, [r7, #32]
 80056b0:	4906      	ldr	r1, [pc, #24]	; (80056cc <I2C_RequestMemoryRead+0x1cc>)
 80056b2:	68f8      	ldr	r0, [r7, #12]
 80056b4:	f000 f863 	bl	800577e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80056b8:	4603      	mov	r3, r0
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d001      	beq.n	80056c2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	e000      	b.n	80056c4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80056c2:	2300      	movs	r3, #0
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	3718      	adds	r7, #24
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}
 80056cc:	00010002 	.word	0x00010002

080056d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b084      	sub	sp, #16
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	60f8      	str	r0, [r7, #12]
 80056d8:	60b9      	str	r1, [r7, #8]
 80056da:	603b      	str	r3, [r7, #0]
 80056dc:	4613      	mov	r3, r2
 80056de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80056e0:	e025      	b.n	800572e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056e8:	d021      	beq.n	800572e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056ea:	f7fc fdad 	bl	8002248 <HAL_GetTick>
 80056ee:	4602      	mov	r2, r0
 80056f0:	69bb      	ldr	r3, [r7, #24]
 80056f2:	1ad3      	subs	r3, r2, r3
 80056f4:	683a      	ldr	r2, [r7, #0]
 80056f6:	429a      	cmp	r2, r3
 80056f8:	d302      	bcc.n	8005700 <I2C_WaitOnFlagUntilTimeout+0x30>
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d116      	bne.n	800572e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2200      	movs	r2, #0
 8005704:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2220      	movs	r2, #32
 800570a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2200      	movs	r2, #0
 8005712:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800571a:	f043 0220 	orr.w	r2, r3, #32
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2200      	movs	r2, #0
 8005726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	e023      	b.n	8005776 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	0c1b      	lsrs	r3, r3, #16
 8005732:	b2db      	uxtb	r3, r3
 8005734:	2b01      	cmp	r3, #1
 8005736:	d10d      	bne.n	8005754 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	695b      	ldr	r3, [r3, #20]
 800573e:	43da      	mvns	r2, r3
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	4013      	ands	r3, r2
 8005744:	b29b      	uxth	r3, r3
 8005746:	2b00      	cmp	r3, #0
 8005748:	bf0c      	ite	eq
 800574a:	2301      	moveq	r3, #1
 800574c:	2300      	movne	r3, #0
 800574e:	b2db      	uxtb	r3, r3
 8005750:	461a      	mov	r2, r3
 8005752:	e00c      	b.n	800576e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	699b      	ldr	r3, [r3, #24]
 800575a:	43da      	mvns	r2, r3
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	4013      	ands	r3, r2
 8005760:	b29b      	uxth	r3, r3
 8005762:	2b00      	cmp	r3, #0
 8005764:	bf0c      	ite	eq
 8005766:	2301      	moveq	r3, #1
 8005768:	2300      	movne	r3, #0
 800576a:	b2db      	uxtb	r3, r3
 800576c:	461a      	mov	r2, r3
 800576e:	79fb      	ldrb	r3, [r7, #7]
 8005770:	429a      	cmp	r2, r3
 8005772:	d0b6      	beq.n	80056e2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005774:	2300      	movs	r3, #0
}
 8005776:	4618      	mov	r0, r3
 8005778:	3710      	adds	r7, #16
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}

0800577e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800577e:	b580      	push	{r7, lr}
 8005780:	b084      	sub	sp, #16
 8005782:	af00      	add	r7, sp, #0
 8005784:	60f8      	str	r0, [r7, #12]
 8005786:	60b9      	str	r1, [r7, #8]
 8005788:	607a      	str	r2, [r7, #4]
 800578a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800578c:	e051      	b.n	8005832 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	695b      	ldr	r3, [r3, #20]
 8005794:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005798:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800579c:	d123      	bne.n	80057e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057ac:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80057b6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2200      	movs	r2, #0
 80057bc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2220      	movs	r2, #32
 80057c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2200      	movs	r2, #0
 80057ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d2:	f043 0204 	orr.w	r2, r3, #4
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2200      	movs	r2, #0
 80057de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	e046      	b.n	8005874 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057ec:	d021      	beq.n	8005832 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057ee:	f7fc fd2b 	bl	8002248 <HAL_GetTick>
 80057f2:	4602      	mov	r2, r0
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	1ad3      	subs	r3, r2, r3
 80057f8:	687a      	ldr	r2, [r7, #4]
 80057fa:	429a      	cmp	r2, r3
 80057fc:	d302      	bcc.n	8005804 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d116      	bne.n	8005832 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2200      	movs	r2, #0
 8005808:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2220      	movs	r2, #32
 800580e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2200      	movs	r2, #0
 8005816:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800581e:	f043 0220 	orr.w	r2, r3, #32
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2200      	movs	r2, #0
 800582a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800582e:	2301      	movs	r3, #1
 8005830:	e020      	b.n	8005874 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	0c1b      	lsrs	r3, r3, #16
 8005836:	b2db      	uxtb	r3, r3
 8005838:	2b01      	cmp	r3, #1
 800583a:	d10c      	bne.n	8005856 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	695b      	ldr	r3, [r3, #20]
 8005842:	43da      	mvns	r2, r3
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	4013      	ands	r3, r2
 8005848:	b29b      	uxth	r3, r3
 800584a:	2b00      	cmp	r3, #0
 800584c:	bf14      	ite	ne
 800584e:	2301      	movne	r3, #1
 8005850:	2300      	moveq	r3, #0
 8005852:	b2db      	uxtb	r3, r3
 8005854:	e00b      	b.n	800586e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	699b      	ldr	r3, [r3, #24]
 800585c:	43da      	mvns	r2, r3
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	4013      	ands	r3, r2
 8005862:	b29b      	uxth	r3, r3
 8005864:	2b00      	cmp	r3, #0
 8005866:	bf14      	ite	ne
 8005868:	2301      	movne	r3, #1
 800586a:	2300      	moveq	r3, #0
 800586c:	b2db      	uxtb	r3, r3
 800586e:	2b00      	cmp	r3, #0
 8005870:	d18d      	bne.n	800578e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005872:	2300      	movs	r3, #0
}
 8005874:	4618      	mov	r0, r3
 8005876:	3710      	adds	r7, #16
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}

0800587c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b084      	sub	sp, #16
 8005880:	af00      	add	r7, sp, #0
 8005882:	60f8      	str	r0, [r7, #12]
 8005884:	60b9      	str	r1, [r7, #8]
 8005886:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005888:	e02d      	b.n	80058e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800588a:	68f8      	ldr	r0, [r7, #12]
 800588c:	f000 f8ce 	bl	8005a2c <I2C_IsAcknowledgeFailed>
 8005890:	4603      	mov	r3, r0
 8005892:	2b00      	cmp	r3, #0
 8005894:	d001      	beq.n	800589a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	e02d      	b.n	80058f6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058a0:	d021      	beq.n	80058e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058a2:	f7fc fcd1 	bl	8002248 <HAL_GetTick>
 80058a6:	4602      	mov	r2, r0
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	1ad3      	subs	r3, r2, r3
 80058ac:	68ba      	ldr	r2, [r7, #8]
 80058ae:	429a      	cmp	r2, r3
 80058b0:	d302      	bcc.n	80058b8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d116      	bne.n	80058e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2200      	movs	r2, #0
 80058bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2220      	movs	r2, #32
 80058c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2200      	movs	r2, #0
 80058ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d2:	f043 0220 	orr.w	r2, r3, #32
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2200      	movs	r2, #0
 80058de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80058e2:	2301      	movs	r3, #1
 80058e4:	e007      	b.n	80058f6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	695b      	ldr	r3, [r3, #20]
 80058ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058f0:	2b80      	cmp	r3, #128	; 0x80
 80058f2:	d1ca      	bne.n	800588a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80058f4:	2300      	movs	r3, #0
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3710      	adds	r7, #16
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}

080058fe <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80058fe:	b580      	push	{r7, lr}
 8005900:	b084      	sub	sp, #16
 8005902:	af00      	add	r7, sp, #0
 8005904:	60f8      	str	r0, [r7, #12]
 8005906:	60b9      	str	r1, [r7, #8]
 8005908:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800590a:	e02d      	b.n	8005968 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800590c:	68f8      	ldr	r0, [r7, #12]
 800590e:	f000 f88d 	bl	8005a2c <I2C_IsAcknowledgeFailed>
 8005912:	4603      	mov	r3, r0
 8005914:	2b00      	cmp	r3, #0
 8005916:	d001      	beq.n	800591c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005918:	2301      	movs	r3, #1
 800591a:	e02d      	b.n	8005978 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005922:	d021      	beq.n	8005968 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005924:	f7fc fc90 	bl	8002248 <HAL_GetTick>
 8005928:	4602      	mov	r2, r0
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	1ad3      	subs	r3, r2, r3
 800592e:	68ba      	ldr	r2, [r7, #8]
 8005930:	429a      	cmp	r2, r3
 8005932:	d302      	bcc.n	800593a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d116      	bne.n	8005968 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	2200      	movs	r2, #0
 800593e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2220      	movs	r2, #32
 8005944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2200      	movs	r2, #0
 800594c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005954:	f043 0220 	orr.w	r2, r3, #32
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	2200      	movs	r2, #0
 8005960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005964:	2301      	movs	r3, #1
 8005966:	e007      	b.n	8005978 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	695b      	ldr	r3, [r3, #20]
 800596e:	f003 0304 	and.w	r3, r3, #4
 8005972:	2b04      	cmp	r3, #4
 8005974:	d1ca      	bne.n	800590c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005976:	2300      	movs	r3, #0
}
 8005978:	4618      	mov	r0, r3
 800597a:	3710      	adds	r7, #16
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}

08005980 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b084      	sub	sp, #16
 8005984:	af00      	add	r7, sp, #0
 8005986:	60f8      	str	r0, [r7, #12]
 8005988:	60b9      	str	r1, [r7, #8]
 800598a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800598c:	e042      	b.n	8005a14 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	695b      	ldr	r3, [r3, #20]
 8005994:	f003 0310 	and.w	r3, r3, #16
 8005998:	2b10      	cmp	r3, #16
 800599a:	d119      	bne.n	80059d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f06f 0210 	mvn.w	r2, #16
 80059a4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2200      	movs	r2, #0
 80059aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2220      	movs	r2, #32
 80059b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2200      	movs	r2, #0
 80059b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2200      	movs	r2, #0
 80059c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80059cc:	2301      	movs	r3, #1
 80059ce:	e029      	b.n	8005a24 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059d0:	f7fc fc3a 	bl	8002248 <HAL_GetTick>
 80059d4:	4602      	mov	r2, r0
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	1ad3      	subs	r3, r2, r3
 80059da:	68ba      	ldr	r2, [r7, #8]
 80059dc:	429a      	cmp	r2, r3
 80059de:	d302      	bcc.n	80059e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d116      	bne.n	8005a14 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2200      	movs	r2, #0
 80059ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2220      	movs	r2, #32
 80059f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2200      	movs	r2, #0
 80059f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a00:	f043 0220 	orr.w	r2, r3, #32
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005a10:	2301      	movs	r3, #1
 8005a12:	e007      	b.n	8005a24 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	695b      	ldr	r3, [r3, #20]
 8005a1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a1e:	2b40      	cmp	r3, #64	; 0x40
 8005a20:	d1b5      	bne.n	800598e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005a22:	2300      	movs	r3, #0
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3710      	adds	r7, #16
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}

08005a2c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b083      	sub	sp, #12
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	695b      	ldr	r3, [r3, #20]
 8005a3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a42:	d11b      	bne.n	8005a7c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005a4c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2200      	movs	r2, #0
 8005a52:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2220      	movs	r2, #32
 8005a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a68:	f043 0204 	orr.w	r2, r3, #4
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2200      	movs	r2, #0
 8005a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	e000      	b.n	8005a7e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005a7c:	2300      	movs	r3, #0
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	370c      	adds	r7, #12
 8005a82:	46bd      	mov	sp, r7
 8005a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a88:	4770      	bx	lr
	...

08005a8c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b088      	sub	sp, #32
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d101      	bne.n	8005a9e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	e128      	b.n	8005cf0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005aa4:	b2db      	uxtb	r3, r3
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d109      	bne.n	8005abe <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2200      	movs	r2, #0
 8005aae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	4a90      	ldr	r2, [pc, #576]	; (8005cf8 <HAL_I2S_Init+0x26c>)
 8005ab6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f7fb ffc3 	bl	8001a44 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2202      	movs	r2, #2
 8005ac2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	69db      	ldr	r3, [r3, #28]
 8005acc:	687a      	ldr	r2, [r7, #4]
 8005ace:	6812      	ldr	r2, [r2, #0]
 8005ad0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005ad4:	f023 030f 	bic.w	r3, r3, #15
 8005ad8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	2202      	movs	r2, #2
 8005ae0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	695b      	ldr	r3, [r3, #20]
 8005ae6:	2b02      	cmp	r3, #2
 8005ae8:	d060      	beq.n	8005bac <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	68db      	ldr	r3, [r3, #12]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d102      	bne.n	8005af8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8005af2:	2310      	movs	r3, #16
 8005af4:	617b      	str	r3, [r7, #20]
 8005af6:	e001      	b.n	8005afc <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8005af8:	2320      	movs	r3, #32
 8005afa:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	2b20      	cmp	r3, #32
 8005b02:	d802      	bhi.n	8005b0a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	005b      	lsls	r3, r3, #1
 8005b08:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8005b0a:	2001      	movs	r0, #1
 8005b0c:	f001 fe36 	bl	800777c <HAL_RCCEx_GetPeriphCLKFreq>
 8005b10:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	691b      	ldr	r3, [r3, #16]
 8005b16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b1a:	d125      	bne.n	8005b68 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	68db      	ldr	r3, [r3, #12]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d010      	beq.n	8005b46 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	009b      	lsls	r3, r3, #2
 8005b28:	68fa      	ldr	r2, [r7, #12]
 8005b2a:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b2e:	4613      	mov	r3, r2
 8005b30:	009b      	lsls	r3, r3, #2
 8005b32:	4413      	add	r3, r2
 8005b34:	005b      	lsls	r3, r3, #1
 8005b36:	461a      	mov	r2, r3
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	695b      	ldr	r3, [r3, #20]
 8005b3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b40:	3305      	adds	r3, #5
 8005b42:	613b      	str	r3, [r7, #16]
 8005b44:	e01f      	b.n	8005b86 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	00db      	lsls	r3, r3, #3
 8005b4a:	68fa      	ldr	r2, [r7, #12]
 8005b4c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b50:	4613      	mov	r3, r2
 8005b52:	009b      	lsls	r3, r3, #2
 8005b54:	4413      	add	r3, r2
 8005b56:	005b      	lsls	r3, r3, #1
 8005b58:	461a      	mov	r2, r3
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	695b      	ldr	r3, [r3, #20]
 8005b5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b62:	3305      	adds	r3, #5
 8005b64:	613b      	str	r3, [r7, #16]
 8005b66:	e00e      	b.n	8005b86 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005b68:	68fa      	ldr	r2, [r7, #12]
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b70:	4613      	mov	r3, r2
 8005b72:	009b      	lsls	r3, r3, #2
 8005b74:	4413      	add	r3, r2
 8005b76:	005b      	lsls	r3, r3, #1
 8005b78:	461a      	mov	r2, r3
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	695b      	ldr	r3, [r3, #20]
 8005b7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b82:	3305      	adds	r3, #5
 8005b84:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	4a5c      	ldr	r2, [pc, #368]	; (8005cfc <HAL_I2S_Init+0x270>)
 8005b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b8e:	08db      	lsrs	r3, r3, #3
 8005b90:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	f003 0301 	and.w	r3, r3, #1
 8005b98:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8005b9a:	693a      	ldr	r2, [r7, #16]
 8005b9c:	69bb      	ldr	r3, [r7, #24]
 8005b9e:	1ad3      	subs	r3, r2, r3
 8005ba0:	085b      	lsrs	r3, r3, #1
 8005ba2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005ba4:	69bb      	ldr	r3, [r7, #24]
 8005ba6:	021b      	lsls	r3, r3, #8
 8005ba8:	61bb      	str	r3, [r7, #24]
 8005baa:	e003      	b.n	8005bb4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005bac:	2302      	movs	r3, #2
 8005bae:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005bb4:	69fb      	ldr	r3, [r7, #28]
 8005bb6:	2b01      	cmp	r3, #1
 8005bb8:	d902      	bls.n	8005bc0 <HAL_I2S_Init+0x134>
 8005bba:	69fb      	ldr	r3, [r7, #28]
 8005bbc:	2bff      	cmp	r3, #255	; 0xff
 8005bbe:	d907      	bls.n	8005bd0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bc4:	f043 0210 	orr.w	r2, r3, #16
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	e08f      	b.n	8005cf0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	691a      	ldr	r2, [r3, #16]
 8005bd4:	69bb      	ldr	r3, [r7, #24]
 8005bd6:	ea42 0103 	orr.w	r1, r2, r3
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	69fa      	ldr	r2, [r7, #28]
 8005be0:	430a      	orrs	r2, r1
 8005be2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	69db      	ldr	r3, [r3, #28]
 8005bea:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005bee:	f023 030f 	bic.w	r3, r3, #15
 8005bf2:	687a      	ldr	r2, [r7, #4]
 8005bf4:	6851      	ldr	r1, [r2, #4]
 8005bf6:	687a      	ldr	r2, [r7, #4]
 8005bf8:	6892      	ldr	r2, [r2, #8]
 8005bfa:	4311      	orrs	r1, r2
 8005bfc:	687a      	ldr	r2, [r7, #4]
 8005bfe:	68d2      	ldr	r2, [r2, #12]
 8005c00:	4311      	orrs	r1, r2
 8005c02:	687a      	ldr	r2, [r7, #4]
 8005c04:	6992      	ldr	r2, [r2, #24]
 8005c06:	430a      	orrs	r2, r1
 8005c08:	431a      	orrs	r2, r3
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c12:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6a1b      	ldr	r3, [r3, #32]
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d161      	bne.n	8005ce0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	4a38      	ldr	r2, [pc, #224]	; (8005d00 <HAL_I2S_Init+0x274>)
 8005c20:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a37      	ldr	r2, [pc, #220]	; (8005d04 <HAL_I2S_Init+0x278>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d101      	bne.n	8005c30 <HAL_I2S_Init+0x1a4>
 8005c2c:	4b36      	ldr	r3, [pc, #216]	; (8005d08 <HAL_I2S_Init+0x27c>)
 8005c2e:	e001      	b.n	8005c34 <HAL_I2S_Init+0x1a8>
 8005c30:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005c34:	69db      	ldr	r3, [r3, #28]
 8005c36:	687a      	ldr	r2, [r7, #4]
 8005c38:	6812      	ldr	r2, [r2, #0]
 8005c3a:	4932      	ldr	r1, [pc, #200]	; (8005d04 <HAL_I2S_Init+0x278>)
 8005c3c:	428a      	cmp	r2, r1
 8005c3e:	d101      	bne.n	8005c44 <HAL_I2S_Init+0x1b8>
 8005c40:	4a31      	ldr	r2, [pc, #196]	; (8005d08 <HAL_I2S_Init+0x27c>)
 8005c42:	e001      	b.n	8005c48 <HAL_I2S_Init+0x1bc>
 8005c44:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8005c48:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005c4c:	f023 030f 	bic.w	r3, r3, #15
 8005c50:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a2b      	ldr	r2, [pc, #172]	; (8005d04 <HAL_I2S_Init+0x278>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d101      	bne.n	8005c60 <HAL_I2S_Init+0x1d4>
 8005c5c:	4b2a      	ldr	r3, [pc, #168]	; (8005d08 <HAL_I2S_Init+0x27c>)
 8005c5e:	e001      	b.n	8005c64 <HAL_I2S_Init+0x1d8>
 8005c60:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005c64:	2202      	movs	r2, #2
 8005c66:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a25      	ldr	r2, [pc, #148]	; (8005d04 <HAL_I2S_Init+0x278>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d101      	bne.n	8005c76 <HAL_I2S_Init+0x1ea>
 8005c72:	4b25      	ldr	r3, [pc, #148]	; (8005d08 <HAL_I2S_Init+0x27c>)
 8005c74:	e001      	b.n	8005c7a <HAL_I2S_Init+0x1ee>
 8005c76:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005c7a:	69db      	ldr	r3, [r3, #28]
 8005c7c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c86:	d003      	beq.n	8005c90 <HAL_I2S_Init+0x204>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d103      	bne.n	8005c98 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8005c90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005c94:	613b      	str	r3, [r7, #16]
 8005c96:	e001      	b.n	8005c9c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	68db      	ldr	r3, [r3, #12]
 8005cae:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	699b      	ldr	r3, [r3, #24]
 8005cb8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	b29a      	uxth	r2, r3
 8005cbe:	897b      	ldrh	r3, [r7, #10]
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005cc8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a0d      	ldr	r2, [pc, #52]	; (8005d04 <HAL_I2S_Init+0x278>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d101      	bne.n	8005cd8 <HAL_I2S_Init+0x24c>
 8005cd4:	4b0c      	ldr	r3, [pc, #48]	; (8005d08 <HAL_I2S_Init+0x27c>)
 8005cd6:	e001      	b.n	8005cdc <HAL_I2S_Init+0x250>
 8005cd8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005cdc:	897a      	ldrh	r2, [r7, #10]
 8005cde:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2201      	movs	r2, #1
 8005cea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8005cee:	2300      	movs	r3, #0
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3720      	adds	r7, #32
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}
 8005cf8:	08006591 	.word	0x08006591
 8005cfc:	cccccccd 	.word	0xcccccccd
 8005d00:	08006719 	.word	0x08006719
 8005d04:	40003800 	.word	0x40003800
 8005d08:	40003400 	.word	0x40003400

08005d0c <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b086      	sub	sp, #24
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	60f8      	str	r0, [r7, #12]
 8005d14:	60b9      	str	r1, [r7, #8]
 8005d16:	4613      	mov	r3, r2
 8005d18:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d002      	beq.n	8005d26 <HAL_I2S_Transmit_DMA+0x1a>
 8005d20:	88fb      	ldrh	r3, [r7, #6]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d101      	bne.n	8005d2a <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8005d26:	2301      	movs	r3, #1
 8005d28:	e08e      	b.n	8005e48 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005d30:	b2db      	uxtb	r3, r3
 8005d32:	2b01      	cmp	r3, #1
 8005d34:	d101      	bne.n	8005d3a <HAL_I2S_Transmit_DMA+0x2e>
 8005d36:	2302      	movs	r3, #2
 8005d38:	e086      	b.n	8005e48 <HAL_I2S_Transmit_DMA+0x13c>
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d48:	b2db      	uxtb	r3, r3
 8005d4a:	2b01      	cmp	r3, #1
 8005d4c:	d005      	beq.n	8005d5a <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2200      	movs	r2, #0
 8005d52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8005d56:	2302      	movs	r3, #2
 8005d58:	e076      	b.n	8005e48 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2203      	movs	r2, #3
 8005d5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2200      	movs	r2, #0
 8005d66:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	68ba      	ldr	r2, [r7, #8]
 8005d6c:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	69db      	ldr	r3, [r3, #28]
 8005d74:	f003 0307 	and.w	r3, r3, #7
 8005d78:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	2b03      	cmp	r3, #3
 8005d7e:	d002      	beq.n	8005d86 <HAL_I2S_Transmit_DMA+0x7a>
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	2b05      	cmp	r3, #5
 8005d84:	d10a      	bne.n	8005d9c <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 8005d86:	88fb      	ldrh	r3, [r7, #6]
 8005d88:	005b      	lsls	r3, r3, #1
 8005d8a:	b29a      	uxth	r2, r3
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8005d90:	88fb      	ldrh	r3, [r7, #6]
 8005d92:	005b      	lsls	r3, r3, #1
 8005d94:	b29a      	uxth	r2, r3
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005d9a:	e005      	b.n	8005da8 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	88fa      	ldrh	r2, [r7, #6]
 8005da0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	88fa      	ldrh	r2, [r7, #6]
 8005da6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dac:	4a28      	ldr	r2, [pc, #160]	; (8005e50 <HAL_I2S_Transmit_DMA+0x144>)
 8005dae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005db4:	4a27      	ldr	r2, [pc, #156]	; (8005e54 <HAL_I2S_Transmit_DMA+0x148>)
 8005db6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dbc:	4a26      	ldr	r2, [pc, #152]	; (8005e58 <HAL_I2S_Transmit_DMA+0x14c>)
 8005dbe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005dc8:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005dd0:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dd6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005dd8:	f7fc fc54 	bl	8002684 <HAL_DMA_Start_IT>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d00f      	beq.n	8005e02 <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005de6:	f043 0208 	orr.w	r2, r3, #8
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2201      	movs	r2, #1
 8005df2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	e022      	b.n	8005e48 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	69db      	ldr	r3, [r3, #28]
 8005e08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d107      	bne.n	8005e20 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	69da      	ldr	r2, [r3, #28]
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005e1e:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	f003 0302 	and.w	r3, r3, #2
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d107      	bne.n	8005e3e <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	685a      	ldr	r2, [r3, #4]
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f042 0202 	orr.w	r2, r2, #2
 8005e3c:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	2200      	movs	r2, #0
 8005e42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8005e46:	2300      	movs	r3, #0
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3718      	adds	r7, #24
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}
 8005e50:	0800646f 	.word	0x0800646f
 8005e54:	0800642d 	.word	0x0800642d
 8005e58:	0800648b 	.word	0x0800648b

08005e5c <HAL_I2S_DMAPause>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAPause(I2S_HandleTypeDef *hi2s)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b083      	sub	sp, #12
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hi2s);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e6a:	b2db      	uxtb	r3, r3
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	d101      	bne.n	8005e74 <HAL_I2S_DMAPause+0x18>
 8005e70:	2302      	movs	r3, #2
 8005e72:	e04a      	b.n	8005f0a <HAL_I2S_DMAPause+0xae>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2201      	movs	r2, #1
 8005e78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e82:	b2db      	uxtb	r3, r3
 8005e84:	2b03      	cmp	r3, #3
 8005e86:	d108      	bne.n	8005e9a <HAL_I2S_DMAPause+0x3e>
  {
    /* Disable the I2S DMA Tx request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	685a      	ldr	r2, [r3, #4]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f022 0202 	bic.w	r2, r2, #2
 8005e96:	605a      	str	r2, [r3, #4]
 8005e98:	e032      	b.n	8005f00 <HAL_I2S_DMAPause+0xa4>
  }
  else if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ea0:	b2db      	uxtb	r3, r3
 8005ea2:	2b04      	cmp	r3, #4
 8005ea4:	d108      	bne.n	8005eb8 <HAL_I2S_DMAPause+0x5c>
  {
    /* Disable the I2S DMA Rx request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	685a      	ldr	r2, [r3, #4]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f022 0201 	bic.w	r2, r2, #1
 8005eb4:	605a      	str	r2, [r3, #4]
 8005eb6:	e023      	b.n	8005f00 <HAL_I2S_DMAPause+0xa4>
  }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  else if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ebe:	b2db      	uxtb	r3, r3
 8005ec0:	2b05      	cmp	r3, #5
 8005ec2:	d11d      	bne.n	8005f00 <HAL_I2S_DMAPause+0xa4>
  {
    /* Pause the audio file playing by disabling the I2S DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	685a      	ldr	r2, [r3, #4]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f022 0203 	bic.w	r2, r2, #3
 8005ed2:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a0f      	ldr	r2, [pc, #60]	; (8005f18 <HAL_I2S_DMAPause+0xbc>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d101      	bne.n	8005ee2 <HAL_I2S_DMAPause+0x86>
 8005ede:	4b0f      	ldr	r3, [pc, #60]	; (8005f1c <HAL_I2S_DMAPause+0xc0>)
 8005ee0:	e001      	b.n	8005ee6 <HAL_I2S_DMAPause+0x8a>
 8005ee2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005ee6:	685a      	ldr	r2, [r3, #4]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	490a      	ldr	r1, [pc, #40]	; (8005f18 <HAL_I2S_DMAPause+0xbc>)
 8005eee:	428b      	cmp	r3, r1
 8005ef0:	d101      	bne.n	8005ef6 <HAL_I2S_DMAPause+0x9a>
 8005ef2:	4b0a      	ldr	r3, [pc, #40]	; (8005f1c <HAL_I2S_DMAPause+0xc0>)
 8005ef4:	e001      	b.n	8005efa <HAL_I2S_DMAPause+0x9e>
 8005ef6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005efa:	f022 0203 	bic.w	r2, r2, #3
 8005efe:	605a      	str	r2, [r3, #4]
  {
    /* nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2s);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2200      	movs	r2, #0
 8005f04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005f08:	2300      	movs	r3, #0
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	370c      	adds	r7, #12
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr
 8005f16:	bf00      	nop
 8005f18:	40003800 	.word	0x40003800
 8005f1c:	40003400 	.word	0x40003400

08005f20 <HAL_I2S_DMAResume>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAResume(I2S_HandleTypeDef *hi2s)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b083      	sub	sp, #12
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hi2s);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005f2e:	b2db      	uxtb	r3, r3
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d101      	bne.n	8005f38 <HAL_I2S_DMAResume+0x18>
 8005f34:	2302      	movs	r3, #2
 8005f36:	e07d      	b.n	8006034 <HAL_I2S_DMAResume+0x114>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f46:	b2db      	uxtb	r3, r3
 8005f48:	2b03      	cmp	r3, #3
 8005f4a:	d108      	bne.n	8005f5e <HAL_I2S_DMAResume+0x3e>
  {
    /* Enable the I2S DMA Tx request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	685a      	ldr	r2, [r3, #4]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f042 0202 	orr.w	r2, r2, #2
 8005f5a:	605a      	str	r2, [r3, #4]
 8005f5c:	e056      	b.n	800600c <HAL_I2S_DMAResume+0xec>
  }
  else if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f64:	b2db      	uxtb	r3, r3
 8005f66:	2b04      	cmp	r3, #4
 8005f68:	d108      	bne.n	8005f7c <HAL_I2S_DMAResume+0x5c>
  {
    /* Enable the I2S DMA Rx request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	685a      	ldr	r2, [r3, #4]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f042 0201 	orr.w	r2, r2, #1
 8005f78:	605a      	str	r2, [r3, #4]
 8005f7a:	e047      	b.n	800600c <HAL_I2S_DMAResume+0xec>
  }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  else if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f82:	b2db      	uxtb	r3, r3
 8005f84:	2b05      	cmp	r3, #5
 8005f86:	d141      	bne.n	800600c <HAL_I2S_DMAResume+0xec>
  {
    /* Pause the audio file playing by disabling the I2S DMA request */
    SET_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	685a      	ldr	r2, [r3, #4]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f042 0203 	orr.w	r2, r2, #3
 8005f96:	605a      	str	r2, [r3, #4]
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a28      	ldr	r2, [pc, #160]	; (8006040 <HAL_I2S_DMAResume+0x120>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d101      	bne.n	8005fa6 <HAL_I2S_DMAResume+0x86>
 8005fa2:	4b28      	ldr	r3, [pc, #160]	; (8006044 <HAL_I2S_DMAResume+0x124>)
 8005fa4:	e001      	b.n	8005faa <HAL_I2S_DMAResume+0x8a>
 8005fa6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005faa:	685a      	ldr	r2, [r3, #4]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4923      	ldr	r1, [pc, #140]	; (8006040 <HAL_I2S_DMAResume+0x120>)
 8005fb2:	428b      	cmp	r3, r1
 8005fb4:	d101      	bne.n	8005fba <HAL_I2S_DMAResume+0x9a>
 8005fb6:	4b23      	ldr	r3, [pc, #140]	; (8006044 <HAL_I2S_DMAResume+0x124>)
 8005fb8:	e001      	b.n	8005fbe <HAL_I2S_DMAResume+0x9e>
 8005fba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005fbe:	f042 0203 	orr.w	r2, r2, #3
 8005fc2:	605a      	str	r2, [r3, #4]

    /* If the I2Sext peripheral is still not enabled, enable it */
    if ((I2SxEXT(hi2s->Instance)->I2SCFGR & SPI_I2SCFGR_I2SE) == 0U)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a1d      	ldr	r2, [pc, #116]	; (8006040 <HAL_I2S_DMAResume+0x120>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d101      	bne.n	8005fd2 <HAL_I2S_DMAResume+0xb2>
 8005fce:	4b1d      	ldr	r3, [pc, #116]	; (8006044 <HAL_I2S_DMAResume+0x124>)
 8005fd0:	e001      	b.n	8005fd6 <HAL_I2S_DMAResume+0xb6>
 8005fd2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005fd6:	69db      	ldr	r3, [r3, #28]
 8005fd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d115      	bne.n	800600c <HAL_I2S_DMAResume+0xec>
    {
      /* Enable I2Sext peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a16      	ldr	r2, [pc, #88]	; (8006040 <HAL_I2S_DMAResume+0x120>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d101      	bne.n	8005fee <HAL_I2S_DMAResume+0xce>
 8005fea:	4b16      	ldr	r3, [pc, #88]	; (8006044 <HAL_I2S_DMAResume+0x124>)
 8005fec:	e001      	b.n	8005ff2 <HAL_I2S_DMAResume+0xd2>
 8005fee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005ff2:	69da      	ldr	r2, [r3, #28]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4911      	ldr	r1, [pc, #68]	; (8006040 <HAL_I2S_DMAResume+0x120>)
 8005ffa:	428b      	cmp	r3, r1
 8005ffc:	d101      	bne.n	8006002 <HAL_I2S_DMAResume+0xe2>
 8005ffe:	4b11      	ldr	r3, [pc, #68]	; (8006044 <HAL_I2S_DMAResume+0x124>)
 8006000:	e001      	b.n	8006006 <HAL_I2S_DMAResume+0xe6>
 8006002:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006006:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800600a:	61da      	str	r2, [r3, #28]
  {
    /* nothing to do */
  }

  /* If the I2S peripheral is still not enabled, enable it */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	69db      	ldr	r3, [r3, #28]
 8006012:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006016:	2b00      	cmp	r3, #0
 8006018:	d107      	bne.n	800602a <HAL_I2S_DMAResume+0x10a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	69da      	ldr	r2, [r3, #28]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006028:	61da      	str	r2, [r3, #28]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2s);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2200      	movs	r2, #0
 800602e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006032:	2300      	movs	r3, #0
}
 8006034:	4618      	mov	r0, r3
 8006036:	370c      	adds	r7, #12
 8006038:	46bd      	mov	sp, r7
 800603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603e:	4770      	bx	lr
 8006040:	40003800 	.word	0x40003800
 8006044:	40003400 	.word	0x40003400

08006048 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b088      	sub	sp, #32
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006050:	2300      	movs	r3, #0
 8006052:	77fb      	strb	r3, [r7, #31]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800605c:	d004      	beq.n	8006068 <HAL_I2S_DMAStop+0x20>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	2b00      	cmp	r3, #0
 8006064:	f040 80d1 	bne.w	800620a <HAL_I2S_DMAStop+0x1c2>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800606c:	2b00      	cmp	r3, #0
 800606e:	d00f      	beq.n	8006090 <HAL_I2S_DMAStop+0x48>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006074:	4618      	mov	r0, r3
 8006076:	f7fc fb5d 	bl	8002734 <HAL_DMA_Abort>
 800607a:	4603      	mov	r3, r0
 800607c:	2b00      	cmp	r3, #0
 800607e:	d007      	beq.n	8006090 <HAL_I2S_DMAStop+0x48>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006084:	f043 0208 	orr.w	r2, r3, #8
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 800608c:	2301      	movs	r3, #1
 800608e:	77fb      	strb	r3, [r7, #31]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8006090:	2364      	movs	r3, #100	; 0x64
 8006092:	2201      	movs	r2, #1
 8006094:	2102      	movs	r1, #2
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f000 fb04 	bl	80066a4 <I2S_WaitFlagStateUntilTimeout>
 800609c:	4603      	mov	r3, r0
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d00b      	beq.n	80060ba <HAL_I2S_DMAStop+0x72>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060a6:	f043 0201 	orr.w	r2, r3, #1
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2201      	movs	r2, #1
 80060b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 80060b6:	2301      	movs	r3, #1
 80060b8:	77fb      	strb	r3, [r7, #31]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80060ba:	2364      	movs	r3, #100	; 0x64
 80060bc:	2200      	movs	r2, #0
 80060be:	2180      	movs	r1, #128	; 0x80
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	f000 faef 	bl	80066a4 <I2S_WaitFlagStateUntilTimeout>
 80060c6:	4603      	mov	r3, r0
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d00b      	beq.n	80060e4 <HAL_I2S_DMAStop+0x9c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060d0:	f043 0201 	orr.w	r2, r3, #1
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2201      	movs	r2, #1
 80060dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 80060e0:	2301      	movs	r3, #1
 80060e2:	77fb      	strb	r3, [r7, #31]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	69da      	ldr	r2, [r3, #28]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060f2:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80060f4:	2300      	movs	r3, #0
 80060f6:	617b      	str	r3, [r7, #20]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	689b      	ldr	r3, [r3, #8]
 80060fe:	617b      	str	r3, [r7, #20]
 8006100:	697b      	ldr	r3, [r7, #20]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	685a      	ldr	r2, [r3, #4]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f022 0202 	bic.w	r2, r2, #2
 8006110:	605a      	str	r2, [r3, #4]

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006118:	b2db      	uxtb	r3, r3
 800611a:	2b05      	cmp	r3, #5
 800611c:	f040 8165 	bne.w	80063ea <HAL_I2S_DMAStop+0x3a2>
    {
      /* Abort the I2S DMA rx Stream/Channel */
      if (hi2s->hdmarx != NULL)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006124:	2b00      	cmp	r3, #0
 8006126:	d00f      	beq.n	8006148 <HAL_I2S_DMAStop+0x100>
      {
        /* Disable the I2S DMA rx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800612c:	4618      	mov	r0, r3
 800612e:	f7fc fb01 	bl	8002734 <HAL_DMA_Abort>
 8006132:	4603      	mov	r3, r0
 8006134:	2b00      	cmp	r3, #0
 8006136:	d007      	beq.n	8006148 <HAL_I2S_DMAStop+0x100>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800613c:	f043 0208 	orr.w	r2, r3, #8
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 8006144:	2301      	movs	r3, #1
 8006146:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a8a      	ldr	r2, [pc, #552]	; (8006378 <HAL_I2S_DMAStop+0x330>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d101      	bne.n	8006156 <HAL_I2S_DMAStop+0x10e>
 8006152:	4b8a      	ldr	r3, [pc, #552]	; (800637c <HAL_I2S_DMAStop+0x334>)
 8006154:	e001      	b.n	800615a <HAL_I2S_DMAStop+0x112>
 8006156:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800615a:	69da      	ldr	r2, [r3, #28]
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4985      	ldr	r1, [pc, #532]	; (8006378 <HAL_I2S_DMAStop+0x330>)
 8006162:	428b      	cmp	r3, r1
 8006164:	d101      	bne.n	800616a <HAL_I2S_DMAStop+0x122>
 8006166:	4b85      	ldr	r3, [pc, #532]	; (800637c <HAL_I2S_DMAStop+0x334>)
 8006168:	e001      	b.n	800616e <HAL_I2S_DMAStop+0x126>
 800616a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800616e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006172:	61da      	str	r2, [r3, #28]

      /* Clear OVR flag */
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 8006174:	2300      	movs	r3, #0
 8006176:	613b      	str	r3, [r7, #16]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a7e      	ldr	r2, [pc, #504]	; (8006378 <HAL_I2S_DMAStop+0x330>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d101      	bne.n	8006186 <HAL_I2S_DMAStop+0x13e>
 8006182:	4b7e      	ldr	r3, [pc, #504]	; (800637c <HAL_I2S_DMAStop+0x334>)
 8006184:	e001      	b.n	800618a <HAL_I2S_DMAStop+0x142>
 8006186:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800618a:	68db      	ldr	r3, [r3, #12]
 800618c:	613b      	str	r3, [r7, #16]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4a79      	ldr	r2, [pc, #484]	; (8006378 <HAL_I2S_DMAStop+0x330>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d101      	bne.n	800619c <HAL_I2S_DMAStop+0x154>
 8006198:	4b78      	ldr	r3, [pc, #480]	; (800637c <HAL_I2S_DMAStop+0x334>)
 800619a:	e001      	b.n	80061a0 <HAL_I2S_DMAStop+0x158>
 800619c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80061a0:	689b      	ldr	r3, [r3, #8]
 80061a2:	613b      	str	r3, [r7, #16]
 80061a4:	693b      	ldr	r3, [r7, #16]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a73      	ldr	r2, [pc, #460]	; (8006378 <HAL_I2S_DMAStop+0x330>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d101      	bne.n	80061b4 <HAL_I2S_DMAStop+0x16c>
 80061b0:	4b72      	ldr	r3, [pc, #456]	; (800637c <HAL_I2S_DMAStop+0x334>)
 80061b2:	e001      	b.n	80061b8 <HAL_I2S_DMAStop+0x170>
 80061b4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80061b8:	685a      	ldr	r2, [r3, #4]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	496e      	ldr	r1, [pc, #440]	; (8006378 <HAL_I2S_DMAStop+0x330>)
 80061c0:	428b      	cmp	r3, r1
 80061c2:	d101      	bne.n	80061c8 <HAL_I2S_DMAStop+0x180>
 80061c4:	4b6d      	ldr	r3, [pc, #436]	; (800637c <HAL_I2S_DMAStop+0x334>)
 80061c6:	e001      	b.n	80061cc <HAL_I2S_DMAStop+0x184>
 80061c8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80061cc:	f022 0201 	bic.w	r2, r2, #1
 80061d0:	605a      	str	r2, [r3, #4]

      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d10c      	bne.n	80061f4 <HAL_I2S_DMAStop+0x1ac>
      {
        /* Set the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061de:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	645a      	str	r2, [r3, #68]	; 0x44

        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2201      	movs	r2, #1
 80061ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        errorcode = HAL_ERROR;
 80061ee:	2301      	movs	r3, #1
 80061f0:	77fb      	strb	r3, [r7, #31]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80061f2:	e0fa      	b.n	80063ea <HAL_I2S_DMAStop+0x3a2>
      }
      else
      {
        /* Read DR to Flush RX Data */
        READ_REG(I2SxEXT(hi2s->Instance)->DR);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a5f      	ldr	r2, [pc, #380]	; (8006378 <HAL_I2S_DMAStop+0x330>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d101      	bne.n	8006202 <HAL_I2S_DMAStop+0x1ba>
 80061fe:	4b5f      	ldr	r3, [pc, #380]	; (800637c <HAL_I2S_DMAStop+0x334>)
 8006200:	e001      	b.n	8006206 <HAL_I2S_DMAStop+0x1be>
 8006202:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006206:	68db      	ldr	r3, [r3, #12]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8006208:	e0ef      	b.n	80063ea <HAL_I2S_DMAStop+0x3a2>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006212:	d005      	beq.n	8006220 <HAL_I2S_DMAStop+0x1d8>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800621c:	f040 80e5 	bne.w	80063ea <HAL_I2S_DMAStop+0x3a2>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006224:	2b00      	cmp	r3, #0
 8006226:	d00f      	beq.n	8006248 <HAL_I2S_DMAStop+0x200>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800622c:	4618      	mov	r0, r3
 800622e:	f7fc fa81 	bl	8002734 <HAL_DMA_Abort>
 8006232:	4603      	mov	r3, r0
 8006234:	2b00      	cmp	r3, #0
 8006236:	d007      	beq.n	8006248 <HAL_I2S_DMAStop+0x200>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800623c:	f043 0208 	orr.w	r2, r3, #8
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 8006244:	2301      	movs	r3, #1
 8006246:	77fb      	strb	r3, [r7, #31]
      }
    }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800624e:	b2db      	uxtb	r3, r3
 8006250:	2b05      	cmp	r3, #5
 8006252:	f040 809a 	bne.w	800638a <HAL_I2S_DMAStop+0x342>
    {
      /* Abort the I2S DMA tx Stream/Channel */
      if (hi2s->hdmatx != NULL)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800625a:	2b00      	cmp	r3, #0
 800625c:	d00f      	beq.n	800627e <HAL_I2S_DMAStop+0x236>
      {
        /* Disable the I2S DMA tx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006262:	4618      	mov	r0, r3
 8006264:	f7fc fa66 	bl	8002734 <HAL_DMA_Abort>
 8006268:	4603      	mov	r3, r0
 800626a:	2b00      	cmp	r3, #0
 800626c:	d007      	beq.n	800627e <HAL_I2S_DMAStop+0x236>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006272:	f043 0208 	orr.w	r2, r3, #8
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 800627a:	2301      	movs	r3, #1
 800627c:	77fb      	strb	r3, [r7, #31]
        }
      }

      tickstart = HAL_GetTick();
 800627e:	f7fb ffe3 	bl	8002248 <HAL_GetTick>
 8006282:	61b8      	str	r0, [r7, #24]

      /* Wait until TXE flag is set */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8006284:	e012      	b.n	80062ac <HAL_I2S_DMAStop+0x264>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8006286:	f7fb ffdf 	bl	8002248 <HAL_GetTick>
 800628a:	4602      	mov	r2, r0
 800628c:	69bb      	ldr	r3, [r7, #24]
 800628e:	1ad3      	subs	r3, r2, r3
 8006290:	2b64      	cmp	r3, #100	; 0x64
 8006292:	d90b      	bls.n	80062ac <HAL_I2S_DMAStop+0x264>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006298:	f043 0201 	orr.w	r2, r3, #1
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2201      	movs	r2, #1
 80062a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 80062a8:	2301      	movs	r3, #1
 80062aa:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a31      	ldr	r2, [pc, #196]	; (8006378 <HAL_I2S_DMAStop+0x330>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d101      	bne.n	80062ba <HAL_I2S_DMAStop+0x272>
 80062b6:	4b31      	ldr	r3, [pc, #196]	; (800637c <HAL_I2S_DMAStop+0x334>)
 80062b8:	e001      	b.n	80062be <HAL_I2S_DMAStop+0x276>
 80062ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	f003 0302 	and.w	r3, r3, #2
 80062c4:	2b02      	cmp	r3, #2
 80062c6:	d1de      	bne.n	8006286 <HAL_I2S_DMAStop+0x23e>
        }
      }

      /* Wait until BSY flag is Reset */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 80062c8:	e012      	b.n	80062f0 <HAL_I2S_DMAStop+0x2a8>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 80062ca:	f7fb ffbd 	bl	8002248 <HAL_GetTick>
 80062ce:	4602      	mov	r2, r0
 80062d0:	69bb      	ldr	r3, [r7, #24]
 80062d2:	1ad3      	subs	r3, r2, r3
 80062d4:	2b64      	cmp	r3, #100	; 0x64
 80062d6:	d90b      	bls.n	80062f0 <HAL_I2S_DMAStop+0x2a8>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062dc:	f043 0201 	orr.w	r2, r3, #1
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2201      	movs	r2, #1
 80062e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 80062ec:	2301      	movs	r3, #1
 80062ee:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a20      	ldr	r2, [pc, #128]	; (8006378 <HAL_I2S_DMAStop+0x330>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d101      	bne.n	80062fe <HAL_I2S_DMAStop+0x2b6>
 80062fa:	4b20      	ldr	r3, [pc, #128]	; (800637c <HAL_I2S_DMAStop+0x334>)
 80062fc:	e001      	b.n	8006302 <HAL_I2S_DMAStop+0x2ba>
 80062fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006302:	689b      	ldr	r3, [r3, #8]
 8006304:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006308:	2b80      	cmp	r3, #128	; 0x80
 800630a:	d0de      	beq.n	80062ca <HAL_I2S_DMAStop+0x282>
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a19      	ldr	r2, [pc, #100]	; (8006378 <HAL_I2S_DMAStop+0x330>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d101      	bne.n	800631a <HAL_I2S_DMAStop+0x2d2>
 8006316:	4b19      	ldr	r3, [pc, #100]	; (800637c <HAL_I2S_DMAStop+0x334>)
 8006318:	e001      	b.n	800631e <HAL_I2S_DMAStop+0x2d6>
 800631a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800631e:	69da      	ldr	r2, [r3, #28]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4914      	ldr	r1, [pc, #80]	; (8006378 <HAL_I2S_DMAStop+0x330>)
 8006326:	428b      	cmp	r3, r1
 8006328:	d101      	bne.n	800632e <HAL_I2S_DMAStop+0x2e6>
 800632a:	4b14      	ldr	r3, [pc, #80]	; (800637c <HAL_I2S_DMAStop+0x334>)
 800632c:	e001      	b.n	8006332 <HAL_I2S_DMAStop+0x2ea>
 800632e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006332:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006336:	61da      	str	r2, [r3, #28]

      /* Clear UDR flag */
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 8006338:	2300      	movs	r3, #0
 800633a:	60fb      	str	r3, [r7, #12]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a0d      	ldr	r2, [pc, #52]	; (8006378 <HAL_I2S_DMAStop+0x330>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d101      	bne.n	800634a <HAL_I2S_DMAStop+0x302>
 8006346:	4b0d      	ldr	r3, [pc, #52]	; (800637c <HAL_I2S_DMAStop+0x334>)
 8006348:	e001      	b.n	800634e <HAL_I2S_DMAStop+0x306>
 800634a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	60fb      	str	r3, [r7, #12]
 8006352:	68fb      	ldr	r3, [r7, #12]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a07      	ldr	r2, [pc, #28]	; (8006378 <HAL_I2S_DMAStop+0x330>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d101      	bne.n	8006362 <HAL_I2S_DMAStop+0x31a>
 800635e:	4b07      	ldr	r3, [pc, #28]	; (800637c <HAL_I2S_DMAStop+0x334>)
 8006360:	e001      	b.n	8006366 <HAL_I2S_DMAStop+0x31e>
 8006362:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006366:	685a      	ldr	r2, [r3, #4]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4902      	ldr	r1, [pc, #8]	; (8006378 <HAL_I2S_DMAStop+0x330>)
 800636e:	428b      	cmp	r3, r1
 8006370:	d106      	bne.n	8006380 <HAL_I2S_DMAStop+0x338>
 8006372:	4b02      	ldr	r3, [pc, #8]	; (800637c <HAL_I2S_DMAStop+0x334>)
 8006374:	e006      	b.n	8006384 <HAL_I2S_DMAStop+0x33c>
 8006376:	bf00      	nop
 8006378:	40003800 	.word	0x40003800
 800637c:	40003400 	.word	0x40003400
 8006380:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006384:	f022 0202 	bic.w	r2, r2, #2
 8006388:	605a      	str	r2, [r3, #4]
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	69da      	ldr	r2, [r3, #28]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006398:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800639a:	2300      	movs	r3, #0
 800639c:	60bb      	str	r3, [r7, #8]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	68db      	ldr	r3, [r3, #12]
 80063a4:	60bb      	str	r3, [r7, #8]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	689b      	ldr	r3, [r3, #8]
 80063ac:	60bb      	str	r3, [r7, #8]
 80063ae:	68bb      	ldr	r3, [r7, #8]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	685a      	ldr	r2, [r3, #4]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f022 0201 	bic.w	r2, r2, #1
 80063be:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063c8:	d10c      	bne.n	80063e4 <HAL_I2S_DMAStop+0x39c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063ce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	645a      	str	r2, [r3, #68]	; 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2201      	movs	r2, #1
 80063da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode = HAL_ERROR;
 80063de:	2301      	movs	r3, #1
 80063e0:	77fb      	strb	r3, [r7, #31]
 80063e2:	e002      	b.n	80063ea <HAL_I2S_DMAStop+0x3a2>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2201      	movs	r2, #1
 80063ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return errorcode;
 80063f2:	7ffb      	ldrb	r3, [r7, #31]
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	3720      	adds	r7, #32
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}

080063fc <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b083      	sub	sp, #12
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8006404:	bf00      	nop
 8006406:	370c      	adds	r7, #12
 8006408:	46bd      	mov	sp, r7
 800640a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640e:	4770      	bx	lr

08006410 <HAL_I2S_GetState>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL state
  */
HAL_I2S_StateTypeDef HAL_I2S_GetState(I2S_HandleTypeDef *hi2s)
{
 8006410:	b480      	push	{r7}
 8006412:	b083      	sub	sp, #12
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
  return hi2s->State;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800641e:	b2db      	uxtb	r3, r3
}
 8006420:	4618      	mov	r0, r3
 8006422:	370c      	adds	r7, #12
 8006424:	46bd      	mov	sp, r7
 8006426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642a:	4770      	bx	lr

0800642c <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b084      	sub	sp, #16
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006438:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	69db      	ldr	r3, [r3, #28]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d10e      	bne.n	8006460 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	685a      	ldr	r2, [r3, #4]
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f022 0202 	bic.w	r2, r2, #2
 8006450:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2200      	movs	r2, #0
 8006456:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	2201      	movs	r2, #1
 800645c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8006460:	68f8      	ldr	r0, [r7, #12]
 8006462:	f7fa f913 	bl	800068c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8006466:	bf00      	nop
 8006468:	3710      	adds	r7, #16
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}

0800646e <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800646e:	b580      	push	{r7, lr}
 8006470:	b084      	sub	sp, #16
 8006472:	af00      	add	r7, sp, #0
 8006474:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800647a:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 800647c:	68f8      	ldr	r0, [r7, #12]
 800647e:	f7fa f917 	bl	80006b0 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8006482:	bf00      	nop
 8006484:	3710      	adds	r7, #16
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}

0800648a <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 800648a:	b580      	push	{r7, lr}
 800648c:	b084      	sub	sp, #16
 800648e:	af00      	add	r7, sp, #0
 8006490:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006496:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	685a      	ldr	r2, [r3, #4]
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f022 0203 	bic.w	r2, r2, #3
 80064a6:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	2200      	movs	r2, #0
 80064ac:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	2200      	movs	r2, #0
 80064b2:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2201      	movs	r2, #1
 80064b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064c0:	f043 0208 	orr.w	r2, r3, #8
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80064c8:	68f8      	ldr	r0, [r7, #12]
 80064ca:	f7fa fa5d 	bl	8000988 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80064ce:	bf00      	nop
 80064d0:	3710      	adds	r7, #16
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}

080064d6 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80064d6:	b580      	push	{r7, lr}
 80064d8:	b082      	sub	sp, #8
 80064da:	af00      	add	r7, sp, #0
 80064dc:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e2:	881a      	ldrh	r2, [r3, #0]
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ee:	1c9a      	adds	r2, r3, #2
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064f8:	b29b      	uxth	r3, r3
 80064fa:	3b01      	subs	r3, #1
 80064fc:	b29a      	uxth	r2, r3
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006506:	b29b      	uxth	r3, r3
 8006508:	2b00      	cmp	r3, #0
 800650a:	d10e      	bne.n	800652a <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	685a      	ldr	r2, [r3, #4]
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800651a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2201      	movs	r2, #1
 8006520:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f7fa f8b1 	bl	800068c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800652a:	bf00      	nop
 800652c:	3708      	adds	r7, #8
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}

08006532 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8006532:	b580      	push	{r7, lr}
 8006534:	b082      	sub	sp, #8
 8006536:	af00      	add	r7, sp, #0
 8006538:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	68da      	ldr	r2, [r3, #12]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006544:	b292      	uxth	r2, r2
 8006546:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800654c:	1c9a      	adds	r2, r3, #2
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006556:	b29b      	uxth	r3, r3
 8006558:	3b01      	subs	r3, #1
 800655a:	b29a      	uxth	r2, r3
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006564:	b29b      	uxth	r3, r3
 8006566:	2b00      	cmp	r3, #0
 8006568:	d10e      	bne.n	8006588 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	685a      	ldr	r2, [r3, #4]
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006578:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2201      	movs	r2, #1
 800657e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f7ff ff3a 	bl	80063fc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006588:	bf00      	nop
 800658a:	3708      	adds	r7, #8
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}

08006590 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b086      	sub	sp, #24
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	689b      	ldr	r3, [r3, #8]
 800659e:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80065a6:	b2db      	uxtb	r3, r3
 80065a8:	2b04      	cmp	r3, #4
 80065aa:	d13a      	bne.n	8006622 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	f003 0301 	and.w	r3, r3, #1
 80065b2:	2b01      	cmp	r3, #1
 80065b4:	d109      	bne.n	80065ca <I2S_IRQHandler+0x3a>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065c0:	2b40      	cmp	r3, #64	; 0x40
 80065c2:	d102      	bne.n	80065ca <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f7ff ffb4 	bl	8006532 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065d0:	2b40      	cmp	r3, #64	; 0x40
 80065d2:	d126      	bne.n	8006622 <I2S_IRQHandler+0x92>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	f003 0320 	and.w	r3, r3, #32
 80065de:	2b20      	cmp	r3, #32
 80065e0:	d11f      	bne.n	8006622 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	685a      	ldr	r2, [r3, #4]
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80065f0:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80065f2:	2300      	movs	r3, #0
 80065f4:	613b      	str	r3, [r7, #16]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	68db      	ldr	r3, [r3, #12]
 80065fc:	613b      	str	r3, [r7, #16]
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	689b      	ldr	r3, [r3, #8]
 8006604:	613b      	str	r3, [r7, #16]
 8006606:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2201      	movs	r2, #1
 800660c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006614:	f043 0202 	orr.w	r2, r3, #2
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f7fa f9b3 	bl	8000988 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006628:	b2db      	uxtb	r3, r3
 800662a:	2b03      	cmp	r3, #3
 800662c:	d136      	bne.n	800669c <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	f003 0302 	and.w	r3, r3, #2
 8006634:	2b02      	cmp	r3, #2
 8006636:	d109      	bne.n	800664c <I2S_IRQHandler+0xbc>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006642:	2b80      	cmp	r3, #128	; 0x80
 8006644:	d102      	bne.n	800664c <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f7ff ff45 	bl	80064d6 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	f003 0308 	and.w	r3, r3, #8
 8006652:	2b08      	cmp	r3, #8
 8006654:	d122      	bne.n	800669c <I2S_IRQHandler+0x10c>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	f003 0320 	and.w	r3, r3, #32
 8006660:	2b20      	cmp	r3, #32
 8006662:	d11b      	bne.n	800669c <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	685a      	ldr	r2, [r3, #4]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006672:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006674:	2300      	movs	r3, #0
 8006676:	60fb      	str	r3, [r7, #12]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	689b      	ldr	r3, [r3, #8]
 800667e:	60fb      	str	r3, [r7, #12]
 8006680:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2201      	movs	r2, #1
 8006686:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800668e:	f043 0204 	orr.w	r2, r3, #4
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f7fa f976 	bl	8000988 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800669c:	bf00      	nop
 800669e:	3718      	adds	r7, #24
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd80      	pop	{r7, pc}

080066a4 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b086      	sub	sp, #24
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	60f8      	str	r0, [r7, #12]
 80066ac:	60b9      	str	r1, [r7, #8]
 80066ae:	603b      	str	r3, [r7, #0]
 80066b0:	4613      	mov	r3, r2
 80066b2:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 80066b4:	f7fb fdc8 	bl	8002248 <HAL_GetTick>
 80066b8:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80066ba:	e018      	b.n	80066ee <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066c2:	d014      	beq.n	80066ee <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 80066c4:	f7fb fdc0 	bl	8002248 <HAL_GetTick>
 80066c8:	4602      	mov	r2, r0
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	1ad3      	subs	r3, r2, r3
 80066ce:	683a      	ldr	r2, [r7, #0]
 80066d0:	429a      	cmp	r2, r3
 80066d2:	d902      	bls.n	80066da <I2S_WaitFlagStateUntilTimeout+0x36>
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d109      	bne.n	80066ee <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	2201      	movs	r2, #1
 80066de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2200      	movs	r2, #0
 80066e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80066ea:	2303      	movs	r3, #3
 80066ec:	e00f      	b.n	800670e <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	689a      	ldr	r2, [r3, #8]
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	4013      	ands	r3, r2
 80066f8:	68ba      	ldr	r2, [r7, #8]
 80066fa:	429a      	cmp	r2, r3
 80066fc:	bf0c      	ite	eq
 80066fe:	2301      	moveq	r3, #1
 8006700:	2300      	movne	r3, #0
 8006702:	b2db      	uxtb	r3, r3
 8006704:	461a      	mov	r2, r3
 8006706:	79fb      	ldrb	r3, [r7, #7]
 8006708:	429a      	cmp	r2, r3
 800670a:	d1d7      	bne.n	80066bc <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 800670c:	2300      	movs	r3, #0
}
 800670e:	4618      	mov	r0, r3
 8006710:	3718      	adds	r7, #24
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}
	...

08006718 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b088      	sub	sp, #32
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	689b      	ldr	r3, [r3, #8]
 8006726:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a92      	ldr	r2, [pc, #584]	; (8006978 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d101      	bne.n	8006736 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8006732:	4b92      	ldr	r3, [pc, #584]	; (800697c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006734:	e001      	b.n	800673a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8006736:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a8b      	ldr	r2, [pc, #556]	; (8006978 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d101      	bne.n	8006754 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8006750:	4b8a      	ldr	r3, [pc, #552]	; (800697c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006752:	e001      	b.n	8006758 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8006754:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006764:	d004      	beq.n	8006770 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	2b00      	cmp	r3, #0
 800676c:	f040 8099 	bne.w	80068a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8006770:	69fb      	ldr	r3, [r7, #28]
 8006772:	f003 0302 	and.w	r3, r3, #2
 8006776:	2b02      	cmp	r3, #2
 8006778:	d107      	bne.n	800678a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006780:	2b00      	cmp	r3, #0
 8006782:	d002      	beq.n	800678a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f000 f925 	bl	80069d4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800678a:	69bb      	ldr	r3, [r7, #24]
 800678c:	f003 0301 	and.w	r3, r3, #1
 8006790:	2b01      	cmp	r3, #1
 8006792:	d107      	bne.n	80067a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800679a:	2b00      	cmp	r3, #0
 800679c:	d002      	beq.n	80067a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f000 f9c8 	bl	8006b34 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80067a4:	69bb      	ldr	r3, [r7, #24]
 80067a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067aa:	2b40      	cmp	r3, #64	; 0x40
 80067ac:	d13a      	bne.n	8006824 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	f003 0320 	and.w	r3, r3, #32
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d035      	beq.n	8006824 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a6e      	ldr	r2, [pc, #440]	; (8006978 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d101      	bne.n	80067c6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80067c2:	4b6e      	ldr	r3, [pc, #440]	; (800697c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80067c4:	e001      	b.n	80067ca <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80067c6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80067ca:	685a      	ldr	r2, [r3, #4]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4969      	ldr	r1, [pc, #420]	; (8006978 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80067d2:	428b      	cmp	r3, r1
 80067d4:	d101      	bne.n	80067da <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80067d6:	4b69      	ldr	r3, [pc, #420]	; (800697c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80067d8:	e001      	b.n	80067de <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80067da:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80067de:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80067e2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	685a      	ldr	r2, [r3, #4]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80067f2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80067f4:	2300      	movs	r3, #0
 80067f6:	60fb      	str	r3, [r7, #12]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	68db      	ldr	r3, [r3, #12]
 80067fe:	60fb      	str	r3, [r7, #12]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	689b      	ldr	r3, [r3, #8]
 8006806:	60fb      	str	r3, [r7, #12]
 8006808:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2201      	movs	r2, #1
 800680e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006816:	f043 0202 	orr.w	r2, r3, #2
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f7fa f8b2 	bl	8000988 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006824:	69fb      	ldr	r3, [r7, #28]
 8006826:	f003 0308 	and.w	r3, r3, #8
 800682a:	2b08      	cmp	r3, #8
 800682c:	f040 80c3 	bne.w	80069b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8006830:	697b      	ldr	r3, [r7, #20]
 8006832:	f003 0320 	and.w	r3, r3, #32
 8006836:	2b00      	cmp	r3, #0
 8006838:	f000 80bd 	beq.w	80069b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	685a      	ldr	r2, [r3, #4]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800684a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a49      	ldr	r2, [pc, #292]	; (8006978 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d101      	bne.n	800685a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8006856:	4b49      	ldr	r3, [pc, #292]	; (800697c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006858:	e001      	b.n	800685e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800685a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800685e:	685a      	ldr	r2, [r3, #4]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4944      	ldr	r1, [pc, #272]	; (8006978 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006866:	428b      	cmp	r3, r1
 8006868:	d101      	bne.n	800686e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800686a:	4b44      	ldr	r3, [pc, #272]	; (800697c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800686c:	e001      	b.n	8006872 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800686e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006872:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006876:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006878:	2300      	movs	r3, #0
 800687a:	60bb      	str	r3, [r7, #8]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	60bb      	str	r3, [r7, #8]
 8006884:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2201      	movs	r2, #1
 800688a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006892:	f043 0204 	orr.w	r2, r3, #4
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f7fa f874 	bl	8000988 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80068a0:	e089      	b.n	80069b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80068a2:	69bb      	ldr	r3, [r7, #24]
 80068a4:	f003 0302 	and.w	r3, r3, #2
 80068a8:	2b02      	cmp	r3, #2
 80068aa:	d107      	bne.n	80068bc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d002      	beq.n	80068bc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f000 f8be 	bl	8006a38 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80068bc:	69fb      	ldr	r3, [r7, #28]
 80068be:	f003 0301 	and.w	r3, r3, #1
 80068c2:	2b01      	cmp	r3, #1
 80068c4:	d107      	bne.n	80068d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d002      	beq.n	80068d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f000 f8fd 	bl	8006ad0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80068d6:	69fb      	ldr	r3, [r7, #28]
 80068d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068dc:	2b40      	cmp	r3, #64	; 0x40
 80068de:	d12f      	bne.n	8006940 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	f003 0320 	and.w	r3, r3, #32
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d02a      	beq.n	8006940 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	685a      	ldr	r2, [r3, #4]
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80068f8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a1e      	ldr	r2, [pc, #120]	; (8006978 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d101      	bne.n	8006908 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8006904:	4b1d      	ldr	r3, [pc, #116]	; (800697c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006906:	e001      	b.n	800690c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8006908:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800690c:	685a      	ldr	r2, [r3, #4]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4919      	ldr	r1, [pc, #100]	; (8006978 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006914:	428b      	cmp	r3, r1
 8006916:	d101      	bne.n	800691c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8006918:	4b18      	ldr	r3, [pc, #96]	; (800697c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800691a:	e001      	b.n	8006920 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800691c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006920:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006924:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2201      	movs	r2, #1
 800692a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006932:	f043 0202 	orr.w	r2, r3, #2
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f7fa f824 	bl	8000988 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006940:	69bb      	ldr	r3, [r7, #24]
 8006942:	f003 0308 	and.w	r3, r3, #8
 8006946:	2b08      	cmp	r3, #8
 8006948:	d136      	bne.n	80069b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	f003 0320 	and.w	r3, r3, #32
 8006950:	2b00      	cmp	r3, #0
 8006952:	d031      	beq.n	80069b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a07      	ldr	r2, [pc, #28]	; (8006978 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d101      	bne.n	8006962 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800695e:	4b07      	ldr	r3, [pc, #28]	; (800697c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006960:	e001      	b.n	8006966 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8006962:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006966:	685a      	ldr	r2, [r3, #4]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4902      	ldr	r1, [pc, #8]	; (8006978 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800696e:	428b      	cmp	r3, r1
 8006970:	d106      	bne.n	8006980 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8006972:	4b02      	ldr	r3, [pc, #8]	; (800697c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006974:	e006      	b.n	8006984 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8006976:	bf00      	nop
 8006978:	40003800 	.word	0x40003800
 800697c:	40003400 	.word	0x40003400
 8006980:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006984:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006988:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	685a      	ldr	r2, [r3, #4]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006998:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2201      	movs	r2, #1
 800699e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069a6:	f043 0204 	orr.w	r2, r3, #4
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f7f9 ffea 	bl	8000988 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80069b4:	e000      	b.n	80069b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80069b6:	bf00      	nop
}
 80069b8:	bf00      	nop
 80069ba:	3720      	adds	r7, #32
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}

080069c0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b083      	sub	sp, #12
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80069c8:	bf00      	nop
 80069ca:	370c      	adds	r7, #12
 80069cc:	46bd      	mov	sp, r7
 80069ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d2:	4770      	bx	lr

080069d4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b082      	sub	sp, #8
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e0:	1c99      	adds	r1, r3, #2
 80069e2:	687a      	ldr	r2, [r7, #4]
 80069e4:	6251      	str	r1, [r2, #36]	; 0x24
 80069e6:	881a      	ldrh	r2, [r3, #0]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069f2:	b29b      	uxth	r3, r3
 80069f4:	3b01      	subs	r3, #1
 80069f6:	b29a      	uxth	r2, r3
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a00:	b29b      	uxth	r3, r3
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d113      	bne.n	8006a2e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	685a      	ldr	r2, [r3, #4]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006a14:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006a1a:	b29b      	uxth	r3, r3
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d106      	bne.n	8006a2e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2201      	movs	r2, #1
 8006a24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f7ff ffc9 	bl	80069c0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006a2e:	bf00      	nop
 8006a30:	3708      	adds	r7, #8
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}
	...

08006a38 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b082      	sub	sp, #8
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a44:	1c99      	adds	r1, r3, #2
 8006a46:	687a      	ldr	r2, [r7, #4]
 8006a48:	6251      	str	r1, [r2, #36]	; 0x24
 8006a4a:	8819      	ldrh	r1, [r3, #0]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a1d      	ldr	r2, [pc, #116]	; (8006ac8 <I2SEx_TxISR_I2SExt+0x90>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d101      	bne.n	8006a5a <I2SEx_TxISR_I2SExt+0x22>
 8006a56:	4b1d      	ldr	r3, [pc, #116]	; (8006acc <I2SEx_TxISR_I2SExt+0x94>)
 8006a58:	e001      	b.n	8006a5e <I2SEx_TxISR_I2SExt+0x26>
 8006a5a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006a5e:	460a      	mov	r2, r1
 8006a60:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a66:	b29b      	uxth	r3, r3
 8006a68:	3b01      	subs	r3, #1
 8006a6a:	b29a      	uxth	r2, r3
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a74:	b29b      	uxth	r3, r3
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d121      	bne.n	8006abe <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4a12      	ldr	r2, [pc, #72]	; (8006ac8 <I2SEx_TxISR_I2SExt+0x90>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d101      	bne.n	8006a88 <I2SEx_TxISR_I2SExt+0x50>
 8006a84:	4b11      	ldr	r3, [pc, #68]	; (8006acc <I2SEx_TxISR_I2SExt+0x94>)
 8006a86:	e001      	b.n	8006a8c <I2SEx_TxISR_I2SExt+0x54>
 8006a88:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006a8c:	685a      	ldr	r2, [r3, #4]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	490d      	ldr	r1, [pc, #52]	; (8006ac8 <I2SEx_TxISR_I2SExt+0x90>)
 8006a94:	428b      	cmp	r3, r1
 8006a96:	d101      	bne.n	8006a9c <I2SEx_TxISR_I2SExt+0x64>
 8006a98:	4b0c      	ldr	r3, [pc, #48]	; (8006acc <I2SEx_TxISR_I2SExt+0x94>)
 8006a9a:	e001      	b.n	8006aa0 <I2SEx_TxISR_I2SExt+0x68>
 8006a9c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006aa0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006aa4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006aaa:	b29b      	uxth	r3, r3
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d106      	bne.n	8006abe <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f7ff ff81 	bl	80069c0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006abe:	bf00      	nop
 8006ac0:	3708      	adds	r7, #8
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}
 8006ac6:	bf00      	nop
 8006ac8:	40003800 	.word	0x40003800
 8006acc:	40003400 	.word	0x40003400

08006ad0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b082      	sub	sp, #8
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	68d8      	ldr	r0, [r3, #12]
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ae2:	1c99      	adds	r1, r3, #2
 8006ae4:	687a      	ldr	r2, [r7, #4]
 8006ae6:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006ae8:	b282      	uxth	r2, r0
 8006aea:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006af0:	b29b      	uxth	r3, r3
 8006af2:	3b01      	subs	r3, #1
 8006af4:	b29a      	uxth	r2, r3
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006afe:	b29b      	uxth	r3, r3
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d113      	bne.n	8006b2c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	685a      	ldr	r2, [r3, #4]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006b12:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b18:	b29b      	uxth	r3, r3
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d106      	bne.n	8006b2c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2201      	movs	r2, #1
 8006b22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f7ff ff4a 	bl	80069c0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006b2c:	bf00      	nop
 8006b2e:	3708      	adds	r7, #8
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}

08006b34 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b082      	sub	sp, #8
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a20      	ldr	r2, [pc, #128]	; (8006bc4 <I2SEx_RxISR_I2SExt+0x90>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d101      	bne.n	8006b4a <I2SEx_RxISR_I2SExt+0x16>
 8006b46:	4b20      	ldr	r3, [pc, #128]	; (8006bc8 <I2SEx_RxISR_I2SExt+0x94>)
 8006b48:	e001      	b.n	8006b4e <I2SEx_RxISR_I2SExt+0x1a>
 8006b4a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006b4e:	68d8      	ldr	r0, [r3, #12]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b54:	1c99      	adds	r1, r3, #2
 8006b56:	687a      	ldr	r2, [r7, #4]
 8006b58:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006b5a:	b282      	uxth	r2, r0
 8006b5c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006b62:	b29b      	uxth	r3, r3
 8006b64:	3b01      	subs	r3, #1
 8006b66:	b29a      	uxth	r2, r3
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006b70:	b29b      	uxth	r3, r3
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d121      	bne.n	8006bba <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a12      	ldr	r2, [pc, #72]	; (8006bc4 <I2SEx_RxISR_I2SExt+0x90>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d101      	bne.n	8006b84 <I2SEx_RxISR_I2SExt+0x50>
 8006b80:	4b11      	ldr	r3, [pc, #68]	; (8006bc8 <I2SEx_RxISR_I2SExt+0x94>)
 8006b82:	e001      	b.n	8006b88 <I2SEx_RxISR_I2SExt+0x54>
 8006b84:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006b88:	685a      	ldr	r2, [r3, #4]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	490d      	ldr	r1, [pc, #52]	; (8006bc4 <I2SEx_RxISR_I2SExt+0x90>)
 8006b90:	428b      	cmp	r3, r1
 8006b92:	d101      	bne.n	8006b98 <I2SEx_RxISR_I2SExt+0x64>
 8006b94:	4b0c      	ldr	r3, [pc, #48]	; (8006bc8 <I2SEx_RxISR_I2SExt+0x94>)
 8006b96:	e001      	b.n	8006b9c <I2SEx_RxISR_I2SExt+0x68>
 8006b98:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006b9c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006ba0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ba6:	b29b      	uxth	r3, r3
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d106      	bne.n	8006bba <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2201      	movs	r2, #1
 8006bb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f7ff ff03 	bl	80069c0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006bba:	bf00      	nop
 8006bbc:	3708      	adds	r7, #8
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}
 8006bc2:	bf00      	nop
 8006bc4:	40003800 	.word	0x40003800
 8006bc8:	40003400 	.word	0x40003400

08006bcc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b086      	sub	sp, #24
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d101      	bne.n	8006bde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006bda:	2301      	movs	r3, #1
 8006bdc:	e267      	b.n	80070ae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f003 0301 	and.w	r3, r3, #1
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d075      	beq.n	8006cd6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006bea:	4b88      	ldr	r3, [pc, #544]	; (8006e0c <HAL_RCC_OscConfig+0x240>)
 8006bec:	689b      	ldr	r3, [r3, #8]
 8006bee:	f003 030c 	and.w	r3, r3, #12
 8006bf2:	2b04      	cmp	r3, #4
 8006bf4:	d00c      	beq.n	8006c10 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006bf6:	4b85      	ldr	r3, [pc, #532]	; (8006e0c <HAL_RCC_OscConfig+0x240>)
 8006bf8:	689b      	ldr	r3, [r3, #8]
 8006bfa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006bfe:	2b08      	cmp	r3, #8
 8006c00:	d112      	bne.n	8006c28 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006c02:	4b82      	ldr	r3, [pc, #520]	; (8006e0c <HAL_RCC_OscConfig+0x240>)
 8006c04:	685b      	ldr	r3, [r3, #4]
 8006c06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006c0e:	d10b      	bne.n	8006c28 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c10:	4b7e      	ldr	r3, [pc, #504]	; (8006e0c <HAL_RCC_OscConfig+0x240>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d05b      	beq.n	8006cd4 <HAL_RCC_OscConfig+0x108>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d157      	bne.n	8006cd4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006c24:	2301      	movs	r3, #1
 8006c26:	e242      	b.n	80070ae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	685b      	ldr	r3, [r3, #4]
 8006c2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c30:	d106      	bne.n	8006c40 <HAL_RCC_OscConfig+0x74>
 8006c32:	4b76      	ldr	r3, [pc, #472]	; (8006e0c <HAL_RCC_OscConfig+0x240>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a75      	ldr	r2, [pc, #468]	; (8006e0c <HAL_RCC_OscConfig+0x240>)
 8006c38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c3c:	6013      	str	r3, [r2, #0]
 8006c3e:	e01d      	b.n	8006c7c <HAL_RCC_OscConfig+0xb0>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006c48:	d10c      	bne.n	8006c64 <HAL_RCC_OscConfig+0x98>
 8006c4a:	4b70      	ldr	r3, [pc, #448]	; (8006e0c <HAL_RCC_OscConfig+0x240>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a6f      	ldr	r2, [pc, #444]	; (8006e0c <HAL_RCC_OscConfig+0x240>)
 8006c50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006c54:	6013      	str	r3, [r2, #0]
 8006c56:	4b6d      	ldr	r3, [pc, #436]	; (8006e0c <HAL_RCC_OscConfig+0x240>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a6c      	ldr	r2, [pc, #432]	; (8006e0c <HAL_RCC_OscConfig+0x240>)
 8006c5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c60:	6013      	str	r3, [r2, #0]
 8006c62:	e00b      	b.n	8006c7c <HAL_RCC_OscConfig+0xb0>
 8006c64:	4b69      	ldr	r3, [pc, #420]	; (8006e0c <HAL_RCC_OscConfig+0x240>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4a68      	ldr	r2, [pc, #416]	; (8006e0c <HAL_RCC_OscConfig+0x240>)
 8006c6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c6e:	6013      	str	r3, [r2, #0]
 8006c70:	4b66      	ldr	r3, [pc, #408]	; (8006e0c <HAL_RCC_OscConfig+0x240>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a65      	ldr	r2, [pc, #404]	; (8006e0c <HAL_RCC_OscConfig+0x240>)
 8006c76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d013      	beq.n	8006cac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c84:	f7fb fae0 	bl	8002248 <HAL_GetTick>
 8006c88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c8a:	e008      	b.n	8006c9e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006c8c:	f7fb fadc 	bl	8002248 <HAL_GetTick>
 8006c90:	4602      	mov	r2, r0
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	1ad3      	subs	r3, r2, r3
 8006c96:	2b64      	cmp	r3, #100	; 0x64
 8006c98:	d901      	bls.n	8006c9e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006c9a:	2303      	movs	r3, #3
 8006c9c:	e207      	b.n	80070ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c9e:	4b5b      	ldr	r3, [pc, #364]	; (8006e0c <HAL_RCC_OscConfig+0x240>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d0f0      	beq.n	8006c8c <HAL_RCC_OscConfig+0xc0>
 8006caa:	e014      	b.n	8006cd6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cac:	f7fb facc 	bl	8002248 <HAL_GetTick>
 8006cb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006cb2:	e008      	b.n	8006cc6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006cb4:	f7fb fac8 	bl	8002248 <HAL_GetTick>
 8006cb8:	4602      	mov	r2, r0
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	1ad3      	subs	r3, r2, r3
 8006cbe:	2b64      	cmp	r3, #100	; 0x64
 8006cc0:	d901      	bls.n	8006cc6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006cc2:	2303      	movs	r3, #3
 8006cc4:	e1f3      	b.n	80070ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006cc6:	4b51      	ldr	r3, [pc, #324]	; (8006e0c <HAL_RCC_OscConfig+0x240>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d1f0      	bne.n	8006cb4 <HAL_RCC_OscConfig+0xe8>
 8006cd2:	e000      	b.n	8006cd6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006cd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f003 0302 	and.w	r3, r3, #2
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d063      	beq.n	8006daa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006ce2:	4b4a      	ldr	r3, [pc, #296]	; (8006e0c <HAL_RCC_OscConfig+0x240>)
 8006ce4:	689b      	ldr	r3, [r3, #8]
 8006ce6:	f003 030c 	and.w	r3, r3, #12
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d00b      	beq.n	8006d06 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006cee:	4b47      	ldr	r3, [pc, #284]	; (8006e0c <HAL_RCC_OscConfig+0x240>)
 8006cf0:	689b      	ldr	r3, [r3, #8]
 8006cf2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006cf6:	2b08      	cmp	r3, #8
 8006cf8:	d11c      	bne.n	8006d34 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006cfa:	4b44      	ldr	r3, [pc, #272]	; (8006e0c <HAL_RCC_OscConfig+0x240>)
 8006cfc:	685b      	ldr	r3, [r3, #4]
 8006cfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d116      	bne.n	8006d34 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006d06:	4b41      	ldr	r3, [pc, #260]	; (8006e0c <HAL_RCC_OscConfig+0x240>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f003 0302 	and.w	r3, r3, #2
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d005      	beq.n	8006d1e <HAL_RCC_OscConfig+0x152>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	68db      	ldr	r3, [r3, #12]
 8006d16:	2b01      	cmp	r3, #1
 8006d18:	d001      	beq.n	8006d1e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	e1c7      	b.n	80070ae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d1e:	4b3b      	ldr	r3, [pc, #236]	; (8006e0c <HAL_RCC_OscConfig+0x240>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	691b      	ldr	r3, [r3, #16]
 8006d2a:	00db      	lsls	r3, r3, #3
 8006d2c:	4937      	ldr	r1, [pc, #220]	; (8006e0c <HAL_RCC_OscConfig+0x240>)
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006d32:	e03a      	b.n	8006daa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	68db      	ldr	r3, [r3, #12]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d020      	beq.n	8006d7e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006d3c:	4b34      	ldr	r3, [pc, #208]	; (8006e10 <HAL_RCC_OscConfig+0x244>)
 8006d3e:	2201      	movs	r2, #1
 8006d40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d42:	f7fb fa81 	bl	8002248 <HAL_GetTick>
 8006d46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d48:	e008      	b.n	8006d5c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006d4a:	f7fb fa7d 	bl	8002248 <HAL_GetTick>
 8006d4e:	4602      	mov	r2, r0
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	1ad3      	subs	r3, r2, r3
 8006d54:	2b02      	cmp	r3, #2
 8006d56:	d901      	bls.n	8006d5c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006d58:	2303      	movs	r3, #3
 8006d5a:	e1a8      	b.n	80070ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d5c:	4b2b      	ldr	r3, [pc, #172]	; (8006e0c <HAL_RCC_OscConfig+0x240>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f003 0302 	and.w	r3, r3, #2
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d0f0      	beq.n	8006d4a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d68:	4b28      	ldr	r3, [pc, #160]	; (8006e0c <HAL_RCC_OscConfig+0x240>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	691b      	ldr	r3, [r3, #16]
 8006d74:	00db      	lsls	r3, r3, #3
 8006d76:	4925      	ldr	r1, [pc, #148]	; (8006e0c <HAL_RCC_OscConfig+0x240>)
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	600b      	str	r3, [r1, #0]
 8006d7c:	e015      	b.n	8006daa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006d7e:	4b24      	ldr	r3, [pc, #144]	; (8006e10 <HAL_RCC_OscConfig+0x244>)
 8006d80:	2200      	movs	r2, #0
 8006d82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d84:	f7fb fa60 	bl	8002248 <HAL_GetTick>
 8006d88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d8a:	e008      	b.n	8006d9e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006d8c:	f7fb fa5c 	bl	8002248 <HAL_GetTick>
 8006d90:	4602      	mov	r2, r0
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	1ad3      	subs	r3, r2, r3
 8006d96:	2b02      	cmp	r3, #2
 8006d98:	d901      	bls.n	8006d9e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006d9a:	2303      	movs	r3, #3
 8006d9c:	e187      	b.n	80070ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d9e:	4b1b      	ldr	r3, [pc, #108]	; (8006e0c <HAL_RCC_OscConfig+0x240>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f003 0302 	and.w	r3, r3, #2
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d1f0      	bne.n	8006d8c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f003 0308 	and.w	r3, r3, #8
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d036      	beq.n	8006e24 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	695b      	ldr	r3, [r3, #20]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d016      	beq.n	8006dec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006dbe:	4b15      	ldr	r3, [pc, #84]	; (8006e14 <HAL_RCC_OscConfig+0x248>)
 8006dc0:	2201      	movs	r2, #1
 8006dc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006dc4:	f7fb fa40 	bl	8002248 <HAL_GetTick>
 8006dc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006dca:	e008      	b.n	8006dde <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006dcc:	f7fb fa3c 	bl	8002248 <HAL_GetTick>
 8006dd0:	4602      	mov	r2, r0
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	1ad3      	subs	r3, r2, r3
 8006dd6:	2b02      	cmp	r3, #2
 8006dd8:	d901      	bls.n	8006dde <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006dda:	2303      	movs	r3, #3
 8006ddc:	e167      	b.n	80070ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006dde:	4b0b      	ldr	r3, [pc, #44]	; (8006e0c <HAL_RCC_OscConfig+0x240>)
 8006de0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006de2:	f003 0302 	and.w	r3, r3, #2
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d0f0      	beq.n	8006dcc <HAL_RCC_OscConfig+0x200>
 8006dea:	e01b      	b.n	8006e24 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006dec:	4b09      	ldr	r3, [pc, #36]	; (8006e14 <HAL_RCC_OscConfig+0x248>)
 8006dee:	2200      	movs	r2, #0
 8006df0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006df2:	f7fb fa29 	bl	8002248 <HAL_GetTick>
 8006df6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006df8:	e00e      	b.n	8006e18 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006dfa:	f7fb fa25 	bl	8002248 <HAL_GetTick>
 8006dfe:	4602      	mov	r2, r0
 8006e00:	693b      	ldr	r3, [r7, #16]
 8006e02:	1ad3      	subs	r3, r2, r3
 8006e04:	2b02      	cmp	r3, #2
 8006e06:	d907      	bls.n	8006e18 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006e08:	2303      	movs	r3, #3
 8006e0a:	e150      	b.n	80070ae <HAL_RCC_OscConfig+0x4e2>
 8006e0c:	40023800 	.word	0x40023800
 8006e10:	42470000 	.word	0x42470000
 8006e14:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006e18:	4b88      	ldr	r3, [pc, #544]	; (800703c <HAL_RCC_OscConfig+0x470>)
 8006e1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e1c:	f003 0302 	and.w	r3, r3, #2
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d1ea      	bne.n	8006dfa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f003 0304 	and.w	r3, r3, #4
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	f000 8097 	beq.w	8006f60 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006e32:	2300      	movs	r3, #0
 8006e34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006e36:	4b81      	ldr	r3, [pc, #516]	; (800703c <HAL_RCC_OscConfig+0x470>)
 8006e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d10f      	bne.n	8006e62 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006e42:	2300      	movs	r3, #0
 8006e44:	60bb      	str	r3, [r7, #8]
 8006e46:	4b7d      	ldr	r3, [pc, #500]	; (800703c <HAL_RCC_OscConfig+0x470>)
 8006e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e4a:	4a7c      	ldr	r2, [pc, #496]	; (800703c <HAL_RCC_OscConfig+0x470>)
 8006e4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e50:	6413      	str	r3, [r2, #64]	; 0x40
 8006e52:	4b7a      	ldr	r3, [pc, #488]	; (800703c <HAL_RCC_OscConfig+0x470>)
 8006e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e5a:	60bb      	str	r3, [r7, #8]
 8006e5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e62:	4b77      	ldr	r3, [pc, #476]	; (8007040 <HAL_RCC_OscConfig+0x474>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d118      	bne.n	8006ea0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006e6e:	4b74      	ldr	r3, [pc, #464]	; (8007040 <HAL_RCC_OscConfig+0x474>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4a73      	ldr	r2, [pc, #460]	; (8007040 <HAL_RCC_OscConfig+0x474>)
 8006e74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006e7a:	f7fb f9e5 	bl	8002248 <HAL_GetTick>
 8006e7e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e80:	e008      	b.n	8006e94 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e82:	f7fb f9e1 	bl	8002248 <HAL_GetTick>
 8006e86:	4602      	mov	r2, r0
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	1ad3      	subs	r3, r2, r3
 8006e8c:	2b02      	cmp	r3, #2
 8006e8e:	d901      	bls.n	8006e94 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006e90:	2303      	movs	r3, #3
 8006e92:	e10c      	b.n	80070ae <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e94:	4b6a      	ldr	r3, [pc, #424]	; (8007040 <HAL_RCC_OscConfig+0x474>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d0f0      	beq.n	8006e82 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	689b      	ldr	r3, [r3, #8]
 8006ea4:	2b01      	cmp	r3, #1
 8006ea6:	d106      	bne.n	8006eb6 <HAL_RCC_OscConfig+0x2ea>
 8006ea8:	4b64      	ldr	r3, [pc, #400]	; (800703c <HAL_RCC_OscConfig+0x470>)
 8006eaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eac:	4a63      	ldr	r2, [pc, #396]	; (800703c <HAL_RCC_OscConfig+0x470>)
 8006eae:	f043 0301 	orr.w	r3, r3, #1
 8006eb2:	6713      	str	r3, [r2, #112]	; 0x70
 8006eb4:	e01c      	b.n	8006ef0 <HAL_RCC_OscConfig+0x324>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	689b      	ldr	r3, [r3, #8]
 8006eba:	2b05      	cmp	r3, #5
 8006ebc:	d10c      	bne.n	8006ed8 <HAL_RCC_OscConfig+0x30c>
 8006ebe:	4b5f      	ldr	r3, [pc, #380]	; (800703c <HAL_RCC_OscConfig+0x470>)
 8006ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ec2:	4a5e      	ldr	r2, [pc, #376]	; (800703c <HAL_RCC_OscConfig+0x470>)
 8006ec4:	f043 0304 	orr.w	r3, r3, #4
 8006ec8:	6713      	str	r3, [r2, #112]	; 0x70
 8006eca:	4b5c      	ldr	r3, [pc, #368]	; (800703c <HAL_RCC_OscConfig+0x470>)
 8006ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ece:	4a5b      	ldr	r2, [pc, #364]	; (800703c <HAL_RCC_OscConfig+0x470>)
 8006ed0:	f043 0301 	orr.w	r3, r3, #1
 8006ed4:	6713      	str	r3, [r2, #112]	; 0x70
 8006ed6:	e00b      	b.n	8006ef0 <HAL_RCC_OscConfig+0x324>
 8006ed8:	4b58      	ldr	r3, [pc, #352]	; (800703c <HAL_RCC_OscConfig+0x470>)
 8006eda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006edc:	4a57      	ldr	r2, [pc, #348]	; (800703c <HAL_RCC_OscConfig+0x470>)
 8006ede:	f023 0301 	bic.w	r3, r3, #1
 8006ee2:	6713      	str	r3, [r2, #112]	; 0x70
 8006ee4:	4b55      	ldr	r3, [pc, #340]	; (800703c <HAL_RCC_OscConfig+0x470>)
 8006ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ee8:	4a54      	ldr	r2, [pc, #336]	; (800703c <HAL_RCC_OscConfig+0x470>)
 8006eea:	f023 0304 	bic.w	r3, r3, #4
 8006eee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	689b      	ldr	r3, [r3, #8]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d015      	beq.n	8006f24 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ef8:	f7fb f9a6 	bl	8002248 <HAL_GetTick>
 8006efc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006efe:	e00a      	b.n	8006f16 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006f00:	f7fb f9a2 	bl	8002248 <HAL_GetTick>
 8006f04:	4602      	mov	r2, r0
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	1ad3      	subs	r3, r2, r3
 8006f0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d901      	bls.n	8006f16 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006f12:	2303      	movs	r3, #3
 8006f14:	e0cb      	b.n	80070ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f16:	4b49      	ldr	r3, [pc, #292]	; (800703c <HAL_RCC_OscConfig+0x470>)
 8006f18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f1a:	f003 0302 	and.w	r3, r3, #2
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d0ee      	beq.n	8006f00 <HAL_RCC_OscConfig+0x334>
 8006f22:	e014      	b.n	8006f4e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f24:	f7fb f990 	bl	8002248 <HAL_GetTick>
 8006f28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f2a:	e00a      	b.n	8006f42 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006f2c:	f7fb f98c 	bl	8002248 <HAL_GetTick>
 8006f30:	4602      	mov	r2, r0
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	1ad3      	subs	r3, r2, r3
 8006f36:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d901      	bls.n	8006f42 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006f3e:	2303      	movs	r3, #3
 8006f40:	e0b5      	b.n	80070ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f42:	4b3e      	ldr	r3, [pc, #248]	; (800703c <HAL_RCC_OscConfig+0x470>)
 8006f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f46:	f003 0302 	and.w	r3, r3, #2
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d1ee      	bne.n	8006f2c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006f4e:	7dfb      	ldrb	r3, [r7, #23]
 8006f50:	2b01      	cmp	r3, #1
 8006f52:	d105      	bne.n	8006f60 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006f54:	4b39      	ldr	r3, [pc, #228]	; (800703c <HAL_RCC_OscConfig+0x470>)
 8006f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f58:	4a38      	ldr	r2, [pc, #224]	; (800703c <HAL_RCC_OscConfig+0x470>)
 8006f5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f5e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	699b      	ldr	r3, [r3, #24]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	f000 80a1 	beq.w	80070ac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006f6a:	4b34      	ldr	r3, [pc, #208]	; (800703c <HAL_RCC_OscConfig+0x470>)
 8006f6c:	689b      	ldr	r3, [r3, #8]
 8006f6e:	f003 030c 	and.w	r3, r3, #12
 8006f72:	2b08      	cmp	r3, #8
 8006f74:	d05c      	beq.n	8007030 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	699b      	ldr	r3, [r3, #24]
 8006f7a:	2b02      	cmp	r3, #2
 8006f7c:	d141      	bne.n	8007002 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f7e:	4b31      	ldr	r3, [pc, #196]	; (8007044 <HAL_RCC_OscConfig+0x478>)
 8006f80:	2200      	movs	r2, #0
 8006f82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f84:	f7fb f960 	bl	8002248 <HAL_GetTick>
 8006f88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f8a:	e008      	b.n	8006f9e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f8c:	f7fb f95c 	bl	8002248 <HAL_GetTick>
 8006f90:	4602      	mov	r2, r0
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	1ad3      	subs	r3, r2, r3
 8006f96:	2b02      	cmp	r3, #2
 8006f98:	d901      	bls.n	8006f9e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006f9a:	2303      	movs	r3, #3
 8006f9c:	e087      	b.n	80070ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f9e:	4b27      	ldr	r3, [pc, #156]	; (800703c <HAL_RCC_OscConfig+0x470>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d1f0      	bne.n	8006f8c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	69da      	ldr	r2, [r3, #28]
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6a1b      	ldr	r3, [r3, #32]
 8006fb2:	431a      	orrs	r2, r3
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb8:	019b      	lsls	r3, r3, #6
 8006fba:	431a      	orrs	r2, r3
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fc0:	085b      	lsrs	r3, r3, #1
 8006fc2:	3b01      	subs	r3, #1
 8006fc4:	041b      	lsls	r3, r3, #16
 8006fc6:	431a      	orrs	r2, r3
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fcc:	061b      	lsls	r3, r3, #24
 8006fce:	491b      	ldr	r1, [pc, #108]	; (800703c <HAL_RCC_OscConfig+0x470>)
 8006fd0:	4313      	orrs	r3, r2
 8006fd2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006fd4:	4b1b      	ldr	r3, [pc, #108]	; (8007044 <HAL_RCC_OscConfig+0x478>)
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fda:	f7fb f935 	bl	8002248 <HAL_GetTick>
 8006fde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006fe0:	e008      	b.n	8006ff4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006fe2:	f7fb f931 	bl	8002248 <HAL_GetTick>
 8006fe6:	4602      	mov	r2, r0
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	1ad3      	subs	r3, r2, r3
 8006fec:	2b02      	cmp	r3, #2
 8006fee:	d901      	bls.n	8006ff4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006ff0:	2303      	movs	r3, #3
 8006ff2:	e05c      	b.n	80070ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ff4:	4b11      	ldr	r3, [pc, #68]	; (800703c <HAL_RCC_OscConfig+0x470>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d0f0      	beq.n	8006fe2 <HAL_RCC_OscConfig+0x416>
 8007000:	e054      	b.n	80070ac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007002:	4b10      	ldr	r3, [pc, #64]	; (8007044 <HAL_RCC_OscConfig+0x478>)
 8007004:	2200      	movs	r2, #0
 8007006:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007008:	f7fb f91e 	bl	8002248 <HAL_GetTick>
 800700c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800700e:	e008      	b.n	8007022 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007010:	f7fb f91a 	bl	8002248 <HAL_GetTick>
 8007014:	4602      	mov	r2, r0
 8007016:	693b      	ldr	r3, [r7, #16]
 8007018:	1ad3      	subs	r3, r2, r3
 800701a:	2b02      	cmp	r3, #2
 800701c:	d901      	bls.n	8007022 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800701e:	2303      	movs	r3, #3
 8007020:	e045      	b.n	80070ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007022:	4b06      	ldr	r3, [pc, #24]	; (800703c <HAL_RCC_OscConfig+0x470>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800702a:	2b00      	cmp	r3, #0
 800702c:	d1f0      	bne.n	8007010 <HAL_RCC_OscConfig+0x444>
 800702e:	e03d      	b.n	80070ac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	699b      	ldr	r3, [r3, #24]
 8007034:	2b01      	cmp	r3, #1
 8007036:	d107      	bne.n	8007048 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007038:	2301      	movs	r3, #1
 800703a:	e038      	b.n	80070ae <HAL_RCC_OscConfig+0x4e2>
 800703c:	40023800 	.word	0x40023800
 8007040:	40007000 	.word	0x40007000
 8007044:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007048:	4b1b      	ldr	r3, [pc, #108]	; (80070b8 <HAL_RCC_OscConfig+0x4ec>)
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	699b      	ldr	r3, [r3, #24]
 8007052:	2b01      	cmp	r3, #1
 8007054:	d028      	beq.n	80070a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007060:	429a      	cmp	r2, r3
 8007062:	d121      	bne.n	80070a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800706e:	429a      	cmp	r2, r3
 8007070:	d11a      	bne.n	80070a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007072:	68fa      	ldr	r2, [r7, #12]
 8007074:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007078:	4013      	ands	r3, r2
 800707a:	687a      	ldr	r2, [r7, #4]
 800707c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800707e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007080:	4293      	cmp	r3, r2
 8007082:	d111      	bne.n	80070a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800708e:	085b      	lsrs	r3, r3, #1
 8007090:	3b01      	subs	r3, #1
 8007092:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007094:	429a      	cmp	r2, r3
 8007096:	d107      	bne.n	80070a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80070a4:	429a      	cmp	r2, r3
 80070a6:	d001      	beq.n	80070ac <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80070a8:	2301      	movs	r3, #1
 80070aa:	e000      	b.n	80070ae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80070ac:	2300      	movs	r3, #0
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	3718      	adds	r7, #24
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}
 80070b6:	bf00      	nop
 80070b8:	40023800 	.word	0x40023800

080070bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b084      	sub	sp, #16
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
 80070c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d101      	bne.n	80070d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80070cc:	2301      	movs	r3, #1
 80070ce:	e0cc      	b.n	800726a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80070d0:	4b68      	ldr	r3, [pc, #416]	; (8007274 <HAL_RCC_ClockConfig+0x1b8>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f003 0307 	and.w	r3, r3, #7
 80070d8:	683a      	ldr	r2, [r7, #0]
 80070da:	429a      	cmp	r2, r3
 80070dc:	d90c      	bls.n	80070f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070de:	4b65      	ldr	r3, [pc, #404]	; (8007274 <HAL_RCC_ClockConfig+0x1b8>)
 80070e0:	683a      	ldr	r2, [r7, #0]
 80070e2:	b2d2      	uxtb	r2, r2
 80070e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80070e6:	4b63      	ldr	r3, [pc, #396]	; (8007274 <HAL_RCC_ClockConfig+0x1b8>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f003 0307 	and.w	r3, r3, #7
 80070ee:	683a      	ldr	r2, [r7, #0]
 80070f0:	429a      	cmp	r2, r3
 80070f2:	d001      	beq.n	80070f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80070f4:	2301      	movs	r3, #1
 80070f6:	e0b8      	b.n	800726a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f003 0302 	and.w	r3, r3, #2
 8007100:	2b00      	cmp	r3, #0
 8007102:	d020      	beq.n	8007146 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f003 0304 	and.w	r3, r3, #4
 800710c:	2b00      	cmp	r3, #0
 800710e:	d005      	beq.n	800711c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007110:	4b59      	ldr	r3, [pc, #356]	; (8007278 <HAL_RCC_ClockConfig+0x1bc>)
 8007112:	689b      	ldr	r3, [r3, #8]
 8007114:	4a58      	ldr	r2, [pc, #352]	; (8007278 <HAL_RCC_ClockConfig+0x1bc>)
 8007116:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800711a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f003 0308 	and.w	r3, r3, #8
 8007124:	2b00      	cmp	r3, #0
 8007126:	d005      	beq.n	8007134 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007128:	4b53      	ldr	r3, [pc, #332]	; (8007278 <HAL_RCC_ClockConfig+0x1bc>)
 800712a:	689b      	ldr	r3, [r3, #8]
 800712c:	4a52      	ldr	r2, [pc, #328]	; (8007278 <HAL_RCC_ClockConfig+0x1bc>)
 800712e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007132:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007134:	4b50      	ldr	r3, [pc, #320]	; (8007278 <HAL_RCC_ClockConfig+0x1bc>)
 8007136:	689b      	ldr	r3, [r3, #8]
 8007138:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	689b      	ldr	r3, [r3, #8]
 8007140:	494d      	ldr	r1, [pc, #308]	; (8007278 <HAL_RCC_ClockConfig+0x1bc>)
 8007142:	4313      	orrs	r3, r2
 8007144:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f003 0301 	and.w	r3, r3, #1
 800714e:	2b00      	cmp	r3, #0
 8007150:	d044      	beq.n	80071dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	685b      	ldr	r3, [r3, #4]
 8007156:	2b01      	cmp	r3, #1
 8007158:	d107      	bne.n	800716a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800715a:	4b47      	ldr	r3, [pc, #284]	; (8007278 <HAL_RCC_ClockConfig+0x1bc>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007162:	2b00      	cmp	r3, #0
 8007164:	d119      	bne.n	800719a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007166:	2301      	movs	r3, #1
 8007168:	e07f      	b.n	800726a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	685b      	ldr	r3, [r3, #4]
 800716e:	2b02      	cmp	r3, #2
 8007170:	d003      	beq.n	800717a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007176:	2b03      	cmp	r3, #3
 8007178:	d107      	bne.n	800718a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800717a:	4b3f      	ldr	r3, [pc, #252]	; (8007278 <HAL_RCC_ClockConfig+0x1bc>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007182:	2b00      	cmp	r3, #0
 8007184:	d109      	bne.n	800719a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007186:	2301      	movs	r3, #1
 8007188:	e06f      	b.n	800726a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800718a:	4b3b      	ldr	r3, [pc, #236]	; (8007278 <HAL_RCC_ClockConfig+0x1bc>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f003 0302 	and.w	r3, r3, #2
 8007192:	2b00      	cmp	r3, #0
 8007194:	d101      	bne.n	800719a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007196:	2301      	movs	r3, #1
 8007198:	e067      	b.n	800726a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800719a:	4b37      	ldr	r3, [pc, #220]	; (8007278 <HAL_RCC_ClockConfig+0x1bc>)
 800719c:	689b      	ldr	r3, [r3, #8]
 800719e:	f023 0203 	bic.w	r2, r3, #3
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	685b      	ldr	r3, [r3, #4]
 80071a6:	4934      	ldr	r1, [pc, #208]	; (8007278 <HAL_RCC_ClockConfig+0x1bc>)
 80071a8:	4313      	orrs	r3, r2
 80071aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80071ac:	f7fb f84c 	bl	8002248 <HAL_GetTick>
 80071b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80071b2:	e00a      	b.n	80071ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80071b4:	f7fb f848 	bl	8002248 <HAL_GetTick>
 80071b8:	4602      	mov	r2, r0
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	1ad3      	subs	r3, r2, r3
 80071be:	f241 3288 	movw	r2, #5000	; 0x1388
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d901      	bls.n	80071ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80071c6:	2303      	movs	r3, #3
 80071c8:	e04f      	b.n	800726a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80071ca:	4b2b      	ldr	r3, [pc, #172]	; (8007278 <HAL_RCC_ClockConfig+0x1bc>)
 80071cc:	689b      	ldr	r3, [r3, #8]
 80071ce:	f003 020c 	and.w	r2, r3, #12
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	685b      	ldr	r3, [r3, #4]
 80071d6:	009b      	lsls	r3, r3, #2
 80071d8:	429a      	cmp	r2, r3
 80071da:	d1eb      	bne.n	80071b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80071dc:	4b25      	ldr	r3, [pc, #148]	; (8007274 <HAL_RCC_ClockConfig+0x1b8>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f003 0307 	and.w	r3, r3, #7
 80071e4:	683a      	ldr	r2, [r7, #0]
 80071e6:	429a      	cmp	r2, r3
 80071e8:	d20c      	bcs.n	8007204 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071ea:	4b22      	ldr	r3, [pc, #136]	; (8007274 <HAL_RCC_ClockConfig+0x1b8>)
 80071ec:	683a      	ldr	r2, [r7, #0]
 80071ee:	b2d2      	uxtb	r2, r2
 80071f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80071f2:	4b20      	ldr	r3, [pc, #128]	; (8007274 <HAL_RCC_ClockConfig+0x1b8>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f003 0307 	and.w	r3, r3, #7
 80071fa:	683a      	ldr	r2, [r7, #0]
 80071fc:	429a      	cmp	r2, r3
 80071fe:	d001      	beq.n	8007204 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007200:	2301      	movs	r3, #1
 8007202:	e032      	b.n	800726a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f003 0304 	and.w	r3, r3, #4
 800720c:	2b00      	cmp	r3, #0
 800720e:	d008      	beq.n	8007222 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007210:	4b19      	ldr	r3, [pc, #100]	; (8007278 <HAL_RCC_ClockConfig+0x1bc>)
 8007212:	689b      	ldr	r3, [r3, #8]
 8007214:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	68db      	ldr	r3, [r3, #12]
 800721c:	4916      	ldr	r1, [pc, #88]	; (8007278 <HAL_RCC_ClockConfig+0x1bc>)
 800721e:	4313      	orrs	r3, r2
 8007220:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f003 0308 	and.w	r3, r3, #8
 800722a:	2b00      	cmp	r3, #0
 800722c:	d009      	beq.n	8007242 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800722e:	4b12      	ldr	r3, [pc, #72]	; (8007278 <HAL_RCC_ClockConfig+0x1bc>)
 8007230:	689b      	ldr	r3, [r3, #8]
 8007232:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	691b      	ldr	r3, [r3, #16]
 800723a:	00db      	lsls	r3, r3, #3
 800723c:	490e      	ldr	r1, [pc, #56]	; (8007278 <HAL_RCC_ClockConfig+0x1bc>)
 800723e:	4313      	orrs	r3, r2
 8007240:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007242:	f000 f821 	bl	8007288 <HAL_RCC_GetSysClockFreq>
 8007246:	4602      	mov	r2, r0
 8007248:	4b0b      	ldr	r3, [pc, #44]	; (8007278 <HAL_RCC_ClockConfig+0x1bc>)
 800724a:	689b      	ldr	r3, [r3, #8]
 800724c:	091b      	lsrs	r3, r3, #4
 800724e:	f003 030f 	and.w	r3, r3, #15
 8007252:	490a      	ldr	r1, [pc, #40]	; (800727c <HAL_RCC_ClockConfig+0x1c0>)
 8007254:	5ccb      	ldrb	r3, [r1, r3]
 8007256:	fa22 f303 	lsr.w	r3, r2, r3
 800725a:	4a09      	ldr	r2, [pc, #36]	; (8007280 <HAL_RCC_ClockConfig+0x1c4>)
 800725c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800725e:	4b09      	ldr	r3, [pc, #36]	; (8007284 <HAL_RCC_ClockConfig+0x1c8>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4618      	mov	r0, r3
 8007264:	f7fa fcac 	bl	8001bc0 <HAL_InitTick>

  return HAL_OK;
 8007268:	2300      	movs	r3, #0
}
 800726a:	4618      	mov	r0, r3
 800726c:	3710      	adds	r7, #16
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}
 8007272:	bf00      	nop
 8007274:	40023c00 	.word	0x40023c00
 8007278:	40023800 	.word	0x40023800
 800727c:	0800ffc8 	.word	0x0800ffc8
 8007280:	20000038 	.word	0x20000038
 8007284:	20000040 	.word	0x20000040

08007288 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007288:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800728c:	b094      	sub	sp, #80	; 0x50
 800728e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007290:	2300      	movs	r3, #0
 8007292:	647b      	str	r3, [r7, #68]	; 0x44
 8007294:	2300      	movs	r3, #0
 8007296:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007298:	2300      	movs	r3, #0
 800729a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800729c:	2300      	movs	r3, #0
 800729e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80072a0:	4b79      	ldr	r3, [pc, #484]	; (8007488 <HAL_RCC_GetSysClockFreq+0x200>)
 80072a2:	689b      	ldr	r3, [r3, #8]
 80072a4:	f003 030c 	and.w	r3, r3, #12
 80072a8:	2b08      	cmp	r3, #8
 80072aa:	d00d      	beq.n	80072c8 <HAL_RCC_GetSysClockFreq+0x40>
 80072ac:	2b08      	cmp	r3, #8
 80072ae:	f200 80e1 	bhi.w	8007474 <HAL_RCC_GetSysClockFreq+0x1ec>
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d002      	beq.n	80072bc <HAL_RCC_GetSysClockFreq+0x34>
 80072b6:	2b04      	cmp	r3, #4
 80072b8:	d003      	beq.n	80072c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80072ba:	e0db      	b.n	8007474 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80072bc:	4b73      	ldr	r3, [pc, #460]	; (800748c <HAL_RCC_GetSysClockFreq+0x204>)
 80072be:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80072c0:	e0db      	b.n	800747a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80072c2:	4b73      	ldr	r3, [pc, #460]	; (8007490 <HAL_RCC_GetSysClockFreq+0x208>)
 80072c4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80072c6:	e0d8      	b.n	800747a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80072c8:	4b6f      	ldr	r3, [pc, #444]	; (8007488 <HAL_RCC_GetSysClockFreq+0x200>)
 80072ca:	685b      	ldr	r3, [r3, #4]
 80072cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80072d0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80072d2:	4b6d      	ldr	r3, [pc, #436]	; (8007488 <HAL_RCC_GetSysClockFreq+0x200>)
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d063      	beq.n	80073a6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80072de:	4b6a      	ldr	r3, [pc, #424]	; (8007488 <HAL_RCC_GetSysClockFreq+0x200>)
 80072e0:	685b      	ldr	r3, [r3, #4]
 80072e2:	099b      	lsrs	r3, r3, #6
 80072e4:	2200      	movs	r2, #0
 80072e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80072e8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80072ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072f0:	633b      	str	r3, [r7, #48]	; 0x30
 80072f2:	2300      	movs	r3, #0
 80072f4:	637b      	str	r3, [r7, #52]	; 0x34
 80072f6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80072fa:	4622      	mov	r2, r4
 80072fc:	462b      	mov	r3, r5
 80072fe:	f04f 0000 	mov.w	r0, #0
 8007302:	f04f 0100 	mov.w	r1, #0
 8007306:	0159      	lsls	r1, r3, #5
 8007308:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800730c:	0150      	lsls	r0, r2, #5
 800730e:	4602      	mov	r2, r0
 8007310:	460b      	mov	r3, r1
 8007312:	4621      	mov	r1, r4
 8007314:	1a51      	subs	r1, r2, r1
 8007316:	6139      	str	r1, [r7, #16]
 8007318:	4629      	mov	r1, r5
 800731a:	eb63 0301 	sbc.w	r3, r3, r1
 800731e:	617b      	str	r3, [r7, #20]
 8007320:	f04f 0200 	mov.w	r2, #0
 8007324:	f04f 0300 	mov.w	r3, #0
 8007328:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800732c:	4659      	mov	r1, fp
 800732e:	018b      	lsls	r3, r1, #6
 8007330:	4651      	mov	r1, sl
 8007332:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007336:	4651      	mov	r1, sl
 8007338:	018a      	lsls	r2, r1, #6
 800733a:	4651      	mov	r1, sl
 800733c:	ebb2 0801 	subs.w	r8, r2, r1
 8007340:	4659      	mov	r1, fp
 8007342:	eb63 0901 	sbc.w	r9, r3, r1
 8007346:	f04f 0200 	mov.w	r2, #0
 800734a:	f04f 0300 	mov.w	r3, #0
 800734e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007352:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007356:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800735a:	4690      	mov	r8, r2
 800735c:	4699      	mov	r9, r3
 800735e:	4623      	mov	r3, r4
 8007360:	eb18 0303 	adds.w	r3, r8, r3
 8007364:	60bb      	str	r3, [r7, #8]
 8007366:	462b      	mov	r3, r5
 8007368:	eb49 0303 	adc.w	r3, r9, r3
 800736c:	60fb      	str	r3, [r7, #12]
 800736e:	f04f 0200 	mov.w	r2, #0
 8007372:	f04f 0300 	mov.w	r3, #0
 8007376:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800737a:	4629      	mov	r1, r5
 800737c:	024b      	lsls	r3, r1, #9
 800737e:	4621      	mov	r1, r4
 8007380:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007384:	4621      	mov	r1, r4
 8007386:	024a      	lsls	r2, r1, #9
 8007388:	4610      	mov	r0, r2
 800738a:	4619      	mov	r1, r3
 800738c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800738e:	2200      	movs	r2, #0
 8007390:	62bb      	str	r3, [r7, #40]	; 0x28
 8007392:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007394:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007398:	f7f8 ff16 	bl	80001c8 <__aeabi_uldivmod>
 800739c:	4602      	mov	r2, r0
 800739e:	460b      	mov	r3, r1
 80073a0:	4613      	mov	r3, r2
 80073a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80073a4:	e058      	b.n	8007458 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80073a6:	4b38      	ldr	r3, [pc, #224]	; (8007488 <HAL_RCC_GetSysClockFreq+0x200>)
 80073a8:	685b      	ldr	r3, [r3, #4]
 80073aa:	099b      	lsrs	r3, r3, #6
 80073ac:	2200      	movs	r2, #0
 80073ae:	4618      	mov	r0, r3
 80073b0:	4611      	mov	r1, r2
 80073b2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80073b6:	623b      	str	r3, [r7, #32]
 80073b8:	2300      	movs	r3, #0
 80073ba:	627b      	str	r3, [r7, #36]	; 0x24
 80073bc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80073c0:	4642      	mov	r2, r8
 80073c2:	464b      	mov	r3, r9
 80073c4:	f04f 0000 	mov.w	r0, #0
 80073c8:	f04f 0100 	mov.w	r1, #0
 80073cc:	0159      	lsls	r1, r3, #5
 80073ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80073d2:	0150      	lsls	r0, r2, #5
 80073d4:	4602      	mov	r2, r0
 80073d6:	460b      	mov	r3, r1
 80073d8:	4641      	mov	r1, r8
 80073da:	ebb2 0a01 	subs.w	sl, r2, r1
 80073de:	4649      	mov	r1, r9
 80073e0:	eb63 0b01 	sbc.w	fp, r3, r1
 80073e4:	f04f 0200 	mov.w	r2, #0
 80073e8:	f04f 0300 	mov.w	r3, #0
 80073ec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80073f0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80073f4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80073f8:	ebb2 040a 	subs.w	r4, r2, sl
 80073fc:	eb63 050b 	sbc.w	r5, r3, fp
 8007400:	f04f 0200 	mov.w	r2, #0
 8007404:	f04f 0300 	mov.w	r3, #0
 8007408:	00eb      	lsls	r3, r5, #3
 800740a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800740e:	00e2      	lsls	r2, r4, #3
 8007410:	4614      	mov	r4, r2
 8007412:	461d      	mov	r5, r3
 8007414:	4643      	mov	r3, r8
 8007416:	18e3      	adds	r3, r4, r3
 8007418:	603b      	str	r3, [r7, #0]
 800741a:	464b      	mov	r3, r9
 800741c:	eb45 0303 	adc.w	r3, r5, r3
 8007420:	607b      	str	r3, [r7, #4]
 8007422:	f04f 0200 	mov.w	r2, #0
 8007426:	f04f 0300 	mov.w	r3, #0
 800742a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800742e:	4629      	mov	r1, r5
 8007430:	028b      	lsls	r3, r1, #10
 8007432:	4621      	mov	r1, r4
 8007434:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007438:	4621      	mov	r1, r4
 800743a:	028a      	lsls	r2, r1, #10
 800743c:	4610      	mov	r0, r2
 800743e:	4619      	mov	r1, r3
 8007440:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007442:	2200      	movs	r2, #0
 8007444:	61bb      	str	r3, [r7, #24]
 8007446:	61fa      	str	r2, [r7, #28]
 8007448:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800744c:	f7f8 febc 	bl	80001c8 <__aeabi_uldivmod>
 8007450:	4602      	mov	r2, r0
 8007452:	460b      	mov	r3, r1
 8007454:	4613      	mov	r3, r2
 8007456:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007458:	4b0b      	ldr	r3, [pc, #44]	; (8007488 <HAL_RCC_GetSysClockFreq+0x200>)
 800745a:	685b      	ldr	r3, [r3, #4]
 800745c:	0c1b      	lsrs	r3, r3, #16
 800745e:	f003 0303 	and.w	r3, r3, #3
 8007462:	3301      	adds	r3, #1
 8007464:	005b      	lsls	r3, r3, #1
 8007466:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8007468:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800746a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800746c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007470:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007472:	e002      	b.n	800747a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007474:	4b05      	ldr	r3, [pc, #20]	; (800748c <HAL_RCC_GetSysClockFreq+0x204>)
 8007476:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007478:	bf00      	nop
    }
  }
  return sysclockfreq;
 800747a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800747c:	4618      	mov	r0, r3
 800747e:	3750      	adds	r7, #80	; 0x50
 8007480:	46bd      	mov	sp, r7
 8007482:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007486:	bf00      	nop
 8007488:	40023800 	.word	0x40023800
 800748c:	00f42400 	.word	0x00f42400
 8007490:	007a1200 	.word	0x007a1200

08007494 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007494:	b480      	push	{r7}
 8007496:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007498:	4b03      	ldr	r3, [pc, #12]	; (80074a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800749a:	681b      	ldr	r3, [r3, #0]
}
 800749c:	4618      	mov	r0, r3
 800749e:	46bd      	mov	sp, r7
 80074a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a4:	4770      	bx	lr
 80074a6:	bf00      	nop
 80074a8:	20000038 	.word	0x20000038

080074ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80074b0:	f7ff fff0 	bl	8007494 <HAL_RCC_GetHCLKFreq>
 80074b4:	4602      	mov	r2, r0
 80074b6:	4b05      	ldr	r3, [pc, #20]	; (80074cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80074b8:	689b      	ldr	r3, [r3, #8]
 80074ba:	0a9b      	lsrs	r3, r3, #10
 80074bc:	f003 0307 	and.w	r3, r3, #7
 80074c0:	4903      	ldr	r1, [pc, #12]	; (80074d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80074c2:	5ccb      	ldrb	r3, [r1, r3]
 80074c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	bd80      	pop	{r7, pc}
 80074cc:	40023800 	.word	0x40023800
 80074d0:	0800ffd8 	.word	0x0800ffd8

080074d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80074d8:	f7ff ffdc 	bl	8007494 <HAL_RCC_GetHCLKFreq>
 80074dc:	4602      	mov	r2, r0
 80074de:	4b05      	ldr	r3, [pc, #20]	; (80074f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80074e0:	689b      	ldr	r3, [r3, #8]
 80074e2:	0b5b      	lsrs	r3, r3, #13
 80074e4:	f003 0307 	and.w	r3, r3, #7
 80074e8:	4903      	ldr	r1, [pc, #12]	; (80074f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80074ea:	5ccb      	ldrb	r3, [r1, r3]
 80074ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	bd80      	pop	{r7, pc}
 80074f4:	40023800 	.word	0x40023800
 80074f8:	0800ffd8 	.word	0x0800ffd8

080074fc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80074fc:	b480      	push	{r7}
 80074fe:	b083      	sub	sp, #12
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
 8007504:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	220f      	movs	r2, #15
 800750a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800750c:	4b12      	ldr	r3, [pc, #72]	; (8007558 <HAL_RCC_GetClockConfig+0x5c>)
 800750e:	689b      	ldr	r3, [r3, #8]
 8007510:	f003 0203 	and.w	r2, r3, #3
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007518:	4b0f      	ldr	r3, [pc, #60]	; (8007558 <HAL_RCC_GetClockConfig+0x5c>)
 800751a:	689b      	ldr	r3, [r3, #8]
 800751c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007524:	4b0c      	ldr	r3, [pc, #48]	; (8007558 <HAL_RCC_GetClockConfig+0x5c>)
 8007526:	689b      	ldr	r3, [r3, #8]
 8007528:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007530:	4b09      	ldr	r3, [pc, #36]	; (8007558 <HAL_RCC_GetClockConfig+0x5c>)
 8007532:	689b      	ldr	r3, [r3, #8]
 8007534:	08db      	lsrs	r3, r3, #3
 8007536:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800753e:	4b07      	ldr	r3, [pc, #28]	; (800755c <HAL_RCC_GetClockConfig+0x60>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f003 0207 	and.w	r2, r3, #7
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	601a      	str	r2, [r3, #0]
}
 800754a:	bf00      	nop
 800754c:	370c      	adds	r7, #12
 800754e:	46bd      	mov	sp, r7
 8007550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007554:	4770      	bx	lr
 8007556:	bf00      	nop
 8007558:	40023800 	.word	0x40023800
 800755c:	40023c00 	.word	0x40023c00

08007560 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b086      	sub	sp, #24
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007568:	2300      	movs	r3, #0
 800756a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800756c:	2300      	movs	r3, #0
 800756e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f003 0301 	and.w	r3, r3, #1
 8007578:	2b00      	cmp	r3, #0
 800757a:	d105      	bne.n	8007588 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007584:	2b00      	cmp	r3, #0
 8007586:	d035      	beq.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007588:	4b62      	ldr	r3, [pc, #392]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800758a:	2200      	movs	r2, #0
 800758c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800758e:	f7fa fe5b 	bl	8002248 <HAL_GetTick>
 8007592:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007594:	e008      	b.n	80075a8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007596:	f7fa fe57 	bl	8002248 <HAL_GetTick>
 800759a:	4602      	mov	r2, r0
 800759c:	697b      	ldr	r3, [r7, #20]
 800759e:	1ad3      	subs	r3, r2, r3
 80075a0:	2b02      	cmp	r3, #2
 80075a2:	d901      	bls.n	80075a8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80075a4:	2303      	movs	r3, #3
 80075a6:	e0b0      	b.n	800770a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80075a8:	4b5b      	ldr	r3, [pc, #364]	; (8007718 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d1f0      	bne.n	8007596 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	685b      	ldr	r3, [r3, #4]
 80075b8:	019a      	lsls	r2, r3, #6
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	689b      	ldr	r3, [r3, #8]
 80075be:	071b      	lsls	r3, r3, #28
 80075c0:	4955      	ldr	r1, [pc, #340]	; (8007718 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80075c2:	4313      	orrs	r3, r2
 80075c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80075c8:	4b52      	ldr	r3, [pc, #328]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80075ca:	2201      	movs	r2, #1
 80075cc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80075ce:	f7fa fe3b 	bl	8002248 <HAL_GetTick>
 80075d2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80075d4:	e008      	b.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80075d6:	f7fa fe37 	bl	8002248 <HAL_GetTick>
 80075da:	4602      	mov	r2, r0
 80075dc:	697b      	ldr	r3, [r7, #20]
 80075de:	1ad3      	subs	r3, r2, r3
 80075e0:	2b02      	cmp	r3, #2
 80075e2:	d901      	bls.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80075e4:	2303      	movs	r3, #3
 80075e6:	e090      	b.n	800770a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80075e8:	4b4b      	ldr	r3, [pc, #300]	; (8007718 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d0f0      	beq.n	80075d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f003 0302 	and.w	r3, r3, #2
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	f000 8083 	beq.w	8007708 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007602:	2300      	movs	r3, #0
 8007604:	60fb      	str	r3, [r7, #12]
 8007606:	4b44      	ldr	r3, [pc, #272]	; (8007718 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800760a:	4a43      	ldr	r2, [pc, #268]	; (8007718 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800760c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007610:	6413      	str	r3, [r2, #64]	; 0x40
 8007612:	4b41      	ldr	r3, [pc, #260]	; (8007718 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800761a:	60fb      	str	r3, [r7, #12]
 800761c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800761e:	4b3f      	ldr	r3, [pc, #252]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	4a3e      	ldr	r2, [pc, #248]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007624:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007628:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800762a:	f7fa fe0d 	bl	8002248 <HAL_GetTick>
 800762e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007630:	e008      	b.n	8007644 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007632:	f7fa fe09 	bl	8002248 <HAL_GetTick>
 8007636:	4602      	mov	r2, r0
 8007638:	697b      	ldr	r3, [r7, #20]
 800763a:	1ad3      	subs	r3, r2, r3
 800763c:	2b02      	cmp	r3, #2
 800763e:	d901      	bls.n	8007644 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8007640:	2303      	movs	r3, #3
 8007642:	e062      	b.n	800770a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007644:	4b35      	ldr	r3, [pc, #212]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800764c:	2b00      	cmp	r3, #0
 800764e:	d0f0      	beq.n	8007632 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007650:	4b31      	ldr	r3, [pc, #196]	; (8007718 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007654:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007658:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d02f      	beq.n	80076c0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	68db      	ldr	r3, [r3, #12]
 8007664:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007668:	693a      	ldr	r2, [r7, #16]
 800766a:	429a      	cmp	r2, r3
 800766c:	d028      	beq.n	80076c0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800766e:	4b2a      	ldr	r3, [pc, #168]	; (8007718 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007672:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007676:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007678:	4b29      	ldr	r3, [pc, #164]	; (8007720 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800767a:	2201      	movs	r2, #1
 800767c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800767e:	4b28      	ldr	r3, [pc, #160]	; (8007720 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007680:	2200      	movs	r2, #0
 8007682:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007684:	4a24      	ldr	r2, [pc, #144]	; (8007718 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007686:	693b      	ldr	r3, [r7, #16]
 8007688:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800768a:	4b23      	ldr	r3, [pc, #140]	; (8007718 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800768c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800768e:	f003 0301 	and.w	r3, r3, #1
 8007692:	2b01      	cmp	r3, #1
 8007694:	d114      	bne.n	80076c0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007696:	f7fa fdd7 	bl	8002248 <HAL_GetTick>
 800769a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800769c:	e00a      	b.n	80076b4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800769e:	f7fa fdd3 	bl	8002248 <HAL_GetTick>
 80076a2:	4602      	mov	r2, r0
 80076a4:	697b      	ldr	r3, [r7, #20]
 80076a6:	1ad3      	subs	r3, r2, r3
 80076a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d901      	bls.n	80076b4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80076b0:	2303      	movs	r3, #3
 80076b2:	e02a      	b.n	800770a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80076b4:	4b18      	ldr	r3, [pc, #96]	; (8007718 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80076b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076b8:	f003 0302 	and.w	r3, r3, #2
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d0ee      	beq.n	800769e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	68db      	ldr	r3, [r3, #12]
 80076c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80076cc:	d10d      	bne.n	80076ea <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80076ce:	4b12      	ldr	r3, [pc, #72]	; (8007718 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80076d0:	689b      	ldr	r3, [r3, #8]
 80076d2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	68db      	ldr	r3, [r3, #12]
 80076da:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80076de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076e2:	490d      	ldr	r1, [pc, #52]	; (8007718 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80076e4:	4313      	orrs	r3, r2
 80076e6:	608b      	str	r3, [r1, #8]
 80076e8:	e005      	b.n	80076f6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80076ea:	4b0b      	ldr	r3, [pc, #44]	; (8007718 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80076ec:	689b      	ldr	r3, [r3, #8]
 80076ee:	4a0a      	ldr	r2, [pc, #40]	; (8007718 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80076f0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80076f4:	6093      	str	r3, [r2, #8]
 80076f6:	4b08      	ldr	r3, [pc, #32]	; (8007718 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80076f8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	68db      	ldr	r3, [r3, #12]
 80076fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007702:	4905      	ldr	r1, [pc, #20]	; (8007718 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007704:	4313      	orrs	r3, r2
 8007706:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8007708:	2300      	movs	r3, #0
}
 800770a:	4618      	mov	r0, r3
 800770c:	3718      	adds	r7, #24
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}
 8007712:	bf00      	nop
 8007714:	42470068 	.word	0x42470068
 8007718:	40023800 	.word	0x40023800
 800771c:	40007000 	.word	0x40007000
 8007720:	42470e40 	.word	0x42470e40

08007724 <HAL_RCCEx_GetPeriphCLKConfig>:
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  * will be configured.
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007724:	b480      	push	{r7}
 8007726:	b085      	sub	sp, #20
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
  uint32_t tempreg;

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2203      	movs	r2, #3
 8007730:	601a      	str	r2, [r3, #0]

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 8007732:	4b11      	ldr	r3, [pc, #68]	; (8007778 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8007734:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007738:	099b      	lsrs	r3, r3, #6
 800773a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007742:	4b0d      	ldr	r3, [pc, #52]	; (8007778 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8007744:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007748:	0f1b      	lsrs	r3, r3, #28
 800774a:	f003 0207 	and.w	r2, r3, #7
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	609a      	str	r2, [r3, #8]
#if defined(STM32F411xE)
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM);
#endif /* STM32F411xE */
  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8007752:	4b09      	ldr	r3, [pc, #36]	; (8007778 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8007754:	689b      	ldr	r3, [r3, #8]
 8007756:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800775a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 800775c:	4b06      	ldr	r3, [pc, #24]	; (8007778 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 800775e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007760:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	431a      	orrs	r2, r3
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	60da      	str	r2, [r3, #12]
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
}
 800776c:	bf00      	nop
 800776e:	3714      	adds	r7, #20
 8007770:	46bd      	mov	sp, r7
 8007772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007776:	4770      	bx	lr
 8007778:	40023800 	.word	0x40023800

0800777c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800777c:	b480      	push	{r7}
 800777e:	b087      	sub	sp, #28
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8007784:	2300      	movs	r3, #0
 8007786:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8007788:	2300      	movs	r3, #0
 800778a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800778c:	2300      	movs	r3, #0
 800778e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8007790:	2300      	movs	r3, #0
 8007792:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2b01      	cmp	r3, #1
 8007798:	d13e      	bne.n	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800779a:	4b23      	ldr	r3, [pc, #140]	; (8007828 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800779c:	689b      	ldr	r3, [r3, #8]
 800779e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80077a2:	60fb      	str	r3, [r7, #12]
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d005      	beq.n	80077b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	2b01      	cmp	r3, #1
 80077ae:	d12f      	bne.n	8007810 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80077b0:	4b1e      	ldr	r3, [pc, #120]	; (800782c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80077b2:	617b      	str	r3, [r7, #20]
          break;
 80077b4:	e02f      	b.n	8007816 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80077b6:	4b1c      	ldr	r3, [pc, #112]	; (8007828 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80077b8:	685b      	ldr	r3, [r3, #4]
 80077ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80077be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80077c2:	d108      	bne.n	80077d6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80077c4:	4b18      	ldr	r3, [pc, #96]	; (8007828 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80077c6:	685b      	ldr	r3, [r3, #4]
 80077c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80077cc:	4a18      	ldr	r2, [pc, #96]	; (8007830 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80077ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80077d2:	613b      	str	r3, [r7, #16]
 80077d4:	e007      	b.n	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80077d6:	4b14      	ldr	r3, [pc, #80]	; (8007828 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80077d8:	685b      	ldr	r3, [r3, #4]
 80077da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80077de:	4a15      	ldr	r2, [pc, #84]	; (8007834 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80077e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80077e4:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80077e6:	4b10      	ldr	r3, [pc, #64]	; (8007828 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80077e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077ec:	099b      	lsrs	r3, r3, #6
 80077ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80077f2:	693b      	ldr	r3, [r7, #16]
 80077f4:	fb02 f303 	mul.w	r3, r2, r3
 80077f8:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80077fa:	4b0b      	ldr	r3, [pc, #44]	; (8007828 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80077fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007800:	0f1b      	lsrs	r3, r3, #28
 8007802:	f003 0307 	and.w	r3, r3, #7
 8007806:	68ba      	ldr	r2, [r7, #8]
 8007808:	fbb2 f3f3 	udiv	r3, r2, r3
 800780c:	617b      	str	r3, [r7, #20]
          break;
 800780e:	e002      	b.n	8007816 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8007810:	2300      	movs	r3, #0
 8007812:	617b      	str	r3, [r7, #20]
          break;
 8007814:	bf00      	nop
        }
      }
      break;
 8007816:	bf00      	nop
    }
  }
  return frequency;
 8007818:	697b      	ldr	r3, [r7, #20]
}
 800781a:	4618      	mov	r0, r3
 800781c:	371c      	adds	r7, #28
 800781e:	46bd      	mov	sp, r7
 8007820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007824:	4770      	bx	lr
 8007826:	bf00      	nop
 8007828:	40023800 	.word	0x40023800
 800782c:	00bb8000 	.word	0x00bb8000
 8007830:	007a1200 	.word	0x007a1200
 8007834:	00f42400 	.word	0x00f42400

08007838 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b082      	sub	sp, #8
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d101      	bne.n	800784a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007846:	2301      	movs	r3, #1
 8007848:	e041      	b.n	80078ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007850:	b2db      	uxtb	r3, r3
 8007852:	2b00      	cmp	r3, #0
 8007854:	d106      	bne.n	8007864 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2200      	movs	r2, #0
 800785a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f000 f839 	bl	80078d6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2202      	movs	r2, #2
 8007868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681a      	ldr	r2, [r3, #0]
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	3304      	adds	r3, #4
 8007874:	4619      	mov	r1, r3
 8007876:	4610      	mov	r0, r2
 8007878:	f000 f9d8 	bl	8007c2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2201      	movs	r2, #1
 8007880:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2201      	movs	r2, #1
 8007888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2201      	movs	r2, #1
 8007890:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2201      	movs	r2, #1
 8007898:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2201      	movs	r2, #1
 80078a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2201      	movs	r2, #1
 80078a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2201      	movs	r2, #1
 80078b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2201      	movs	r2, #1
 80078b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2201      	movs	r2, #1
 80078c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2201      	movs	r2, #1
 80078c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80078cc:	2300      	movs	r3, #0
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	3708      	adds	r7, #8
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}

080078d6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80078d6:	b480      	push	{r7}
 80078d8:	b083      	sub	sp, #12
 80078da:	af00      	add	r7, sp, #0
 80078dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80078de:	bf00      	nop
 80078e0:	370c      	adds	r7, #12
 80078e2:	46bd      	mov	sp, r7
 80078e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e8:	4770      	bx	lr
	...

080078ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80078ec:	b480      	push	{r7}
 80078ee:	b085      	sub	sp, #20
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078fa:	b2db      	uxtb	r3, r3
 80078fc:	2b01      	cmp	r3, #1
 80078fe:	d001      	beq.n	8007904 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007900:	2301      	movs	r3, #1
 8007902:	e04e      	b.n	80079a2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2202      	movs	r2, #2
 8007908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	68da      	ldr	r2, [r3, #12]
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f042 0201 	orr.w	r2, r2, #1
 800791a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	4a23      	ldr	r2, [pc, #140]	; (80079b0 <HAL_TIM_Base_Start_IT+0xc4>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d022      	beq.n	800796c <HAL_TIM_Base_Start_IT+0x80>
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800792e:	d01d      	beq.n	800796c <HAL_TIM_Base_Start_IT+0x80>
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4a1f      	ldr	r2, [pc, #124]	; (80079b4 <HAL_TIM_Base_Start_IT+0xc8>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d018      	beq.n	800796c <HAL_TIM_Base_Start_IT+0x80>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	4a1e      	ldr	r2, [pc, #120]	; (80079b8 <HAL_TIM_Base_Start_IT+0xcc>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d013      	beq.n	800796c <HAL_TIM_Base_Start_IT+0x80>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4a1c      	ldr	r2, [pc, #112]	; (80079bc <HAL_TIM_Base_Start_IT+0xd0>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d00e      	beq.n	800796c <HAL_TIM_Base_Start_IT+0x80>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4a1b      	ldr	r2, [pc, #108]	; (80079c0 <HAL_TIM_Base_Start_IT+0xd4>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d009      	beq.n	800796c <HAL_TIM_Base_Start_IT+0x80>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4a19      	ldr	r2, [pc, #100]	; (80079c4 <HAL_TIM_Base_Start_IT+0xd8>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d004      	beq.n	800796c <HAL_TIM_Base_Start_IT+0x80>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4a18      	ldr	r2, [pc, #96]	; (80079c8 <HAL_TIM_Base_Start_IT+0xdc>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d111      	bne.n	8007990 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	689b      	ldr	r3, [r3, #8]
 8007972:	f003 0307 	and.w	r3, r3, #7
 8007976:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	2b06      	cmp	r3, #6
 800797c:	d010      	beq.n	80079a0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	681a      	ldr	r2, [r3, #0]
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f042 0201 	orr.w	r2, r2, #1
 800798c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800798e:	e007      	b.n	80079a0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	681a      	ldr	r2, [r3, #0]
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f042 0201 	orr.w	r2, r2, #1
 800799e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80079a0:	2300      	movs	r3, #0
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	3714      	adds	r7, #20
 80079a6:	46bd      	mov	sp, r7
 80079a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ac:	4770      	bx	lr
 80079ae:	bf00      	nop
 80079b0:	40010000 	.word	0x40010000
 80079b4:	40000400 	.word	0x40000400
 80079b8:	40000800 	.word	0x40000800
 80079bc:	40000c00 	.word	0x40000c00
 80079c0:	40010400 	.word	0x40010400
 80079c4:	40014000 	.word	0x40014000
 80079c8:	40001800 	.word	0x40001800

080079cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b082      	sub	sp, #8
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	691b      	ldr	r3, [r3, #16]
 80079da:	f003 0302 	and.w	r3, r3, #2
 80079de:	2b02      	cmp	r3, #2
 80079e0:	d122      	bne.n	8007a28 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	68db      	ldr	r3, [r3, #12]
 80079e8:	f003 0302 	and.w	r3, r3, #2
 80079ec:	2b02      	cmp	r3, #2
 80079ee:	d11b      	bne.n	8007a28 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f06f 0202 	mvn.w	r2, #2
 80079f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2201      	movs	r2, #1
 80079fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	699b      	ldr	r3, [r3, #24]
 8007a06:	f003 0303 	and.w	r3, r3, #3
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d003      	beq.n	8007a16 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f000 f8ee 	bl	8007bf0 <HAL_TIM_IC_CaptureCallback>
 8007a14:	e005      	b.n	8007a22 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f000 f8e0 	bl	8007bdc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f000 f8f1 	bl	8007c04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2200      	movs	r2, #0
 8007a26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	691b      	ldr	r3, [r3, #16]
 8007a2e:	f003 0304 	and.w	r3, r3, #4
 8007a32:	2b04      	cmp	r3, #4
 8007a34:	d122      	bne.n	8007a7c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	68db      	ldr	r3, [r3, #12]
 8007a3c:	f003 0304 	and.w	r3, r3, #4
 8007a40:	2b04      	cmp	r3, #4
 8007a42:	d11b      	bne.n	8007a7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f06f 0204 	mvn.w	r2, #4
 8007a4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2202      	movs	r2, #2
 8007a52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	699b      	ldr	r3, [r3, #24]
 8007a5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d003      	beq.n	8007a6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f000 f8c4 	bl	8007bf0 <HAL_TIM_IC_CaptureCallback>
 8007a68:	e005      	b.n	8007a76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f000 f8b6 	bl	8007bdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f000 f8c7 	bl	8007c04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2200      	movs	r2, #0
 8007a7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	691b      	ldr	r3, [r3, #16]
 8007a82:	f003 0308 	and.w	r3, r3, #8
 8007a86:	2b08      	cmp	r3, #8
 8007a88:	d122      	bne.n	8007ad0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	68db      	ldr	r3, [r3, #12]
 8007a90:	f003 0308 	and.w	r3, r3, #8
 8007a94:	2b08      	cmp	r3, #8
 8007a96:	d11b      	bne.n	8007ad0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f06f 0208 	mvn.w	r2, #8
 8007aa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2204      	movs	r2, #4
 8007aa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	69db      	ldr	r3, [r3, #28]
 8007aae:	f003 0303 	and.w	r3, r3, #3
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d003      	beq.n	8007abe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f000 f89a 	bl	8007bf0 <HAL_TIM_IC_CaptureCallback>
 8007abc:	e005      	b.n	8007aca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f000 f88c 	bl	8007bdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ac4:	6878      	ldr	r0, [r7, #4]
 8007ac6:	f000 f89d 	bl	8007c04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2200      	movs	r2, #0
 8007ace:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	691b      	ldr	r3, [r3, #16]
 8007ad6:	f003 0310 	and.w	r3, r3, #16
 8007ada:	2b10      	cmp	r3, #16
 8007adc:	d122      	bne.n	8007b24 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	68db      	ldr	r3, [r3, #12]
 8007ae4:	f003 0310 	and.w	r3, r3, #16
 8007ae8:	2b10      	cmp	r3, #16
 8007aea:	d11b      	bne.n	8007b24 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f06f 0210 	mvn.w	r2, #16
 8007af4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2208      	movs	r2, #8
 8007afa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	69db      	ldr	r3, [r3, #28]
 8007b02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d003      	beq.n	8007b12 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f000 f870 	bl	8007bf0 <HAL_TIM_IC_CaptureCallback>
 8007b10:	e005      	b.n	8007b1e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f000 f862 	bl	8007bdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f000 f873 	bl	8007c04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2200      	movs	r2, #0
 8007b22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	691b      	ldr	r3, [r3, #16]
 8007b2a:	f003 0301 	and.w	r3, r3, #1
 8007b2e:	2b01      	cmp	r3, #1
 8007b30:	d10e      	bne.n	8007b50 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	68db      	ldr	r3, [r3, #12]
 8007b38:	f003 0301 	and.w	r3, r3, #1
 8007b3c:	2b01      	cmp	r3, #1
 8007b3e:	d107      	bne.n	8007b50 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f06f 0201 	mvn.w	r2, #1
 8007b48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f7f9 fed0 	bl	80018f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	691b      	ldr	r3, [r3, #16]
 8007b56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b5a:	2b80      	cmp	r3, #128	; 0x80
 8007b5c:	d10e      	bne.n	8007b7c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	68db      	ldr	r3, [r3, #12]
 8007b64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b68:	2b80      	cmp	r3, #128	; 0x80
 8007b6a:	d107      	bne.n	8007b7c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007b74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	f000 f902 	bl	8007d80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	691b      	ldr	r3, [r3, #16]
 8007b82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b86:	2b40      	cmp	r3, #64	; 0x40
 8007b88:	d10e      	bne.n	8007ba8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	68db      	ldr	r3, [r3, #12]
 8007b90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b94:	2b40      	cmp	r3, #64	; 0x40
 8007b96:	d107      	bne.n	8007ba8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007ba0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f000 f838 	bl	8007c18 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	691b      	ldr	r3, [r3, #16]
 8007bae:	f003 0320 	and.w	r3, r3, #32
 8007bb2:	2b20      	cmp	r3, #32
 8007bb4:	d10e      	bne.n	8007bd4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	68db      	ldr	r3, [r3, #12]
 8007bbc:	f003 0320 	and.w	r3, r3, #32
 8007bc0:	2b20      	cmp	r3, #32
 8007bc2:	d107      	bne.n	8007bd4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f06f 0220 	mvn.w	r2, #32
 8007bcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f000 f8cc 	bl	8007d6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007bd4:	bf00      	nop
 8007bd6:	3708      	adds	r7, #8
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bd80      	pop	{r7, pc}

08007bdc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b083      	sub	sp, #12
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007be4:	bf00      	nop
 8007be6:	370c      	adds	r7, #12
 8007be8:	46bd      	mov	sp, r7
 8007bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bee:	4770      	bx	lr

08007bf0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007bf0:	b480      	push	{r7}
 8007bf2:	b083      	sub	sp, #12
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007bf8:	bf00      	nop
 8007bfa:	370c      	adds	r7, #12
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c02:	4770      	bx	lr

08007c04 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007c04:	b480      	push	{r7}
 8007c06:	b083      	sub	sp, #12
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007c0c:	bf00      	nop
 8007c0e:	370c      	adds	r7, #12
 8007c10:	46bd      	mov	sp, r7
 8007c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c16:	4770      	bx	lr

08007c18 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007c18:	b480      	push	{r7}
 8007c1a:	b083      	sub	sp, #12
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007c20:	bf00      	nop
 8007c22:	370c      	adds	r7, #12
 8007c24:	46bd      	mov	sp, r7
 8007c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2a:	4770      	bx	lr

08007c2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	b085      	sub	sp, #20
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
 8007c34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	4a40      	ldr	r2, [pc, #256]	; (8007d40 <TIM_Base_SetConfig+0x114>)
 8007c40:	4293      	cmp	r3, r2
 8007c42:	d013      	beq.n	8007c6c <TIM_Base_SetConfig+0x40>
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c4a:	d00f      	beq.n	8007c6c <TIM_Base_SetConfig+0x40>
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	4a3d      	ldr	r2, [pc, #244]	; (8007d44 <TIM_Base_SetConfig+0x118>)
 8007c50:	4293      	cmp	r3, r2
 8007c52:	d00b      	beq.n	8007c6c <TIM_Base_SetConfig+0x40>
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	4a3c      	ldr	r2, [pc, #240]	; (8007d48 <TIM_Base_SetConfig+0x11c>)
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d007      	beq.n	8007c6c <TIM_Base_SetConfig+0x40>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	4a3b      	ldr	r2, [pc, #236]	; (8007d4c <TIM_Base_SetConfig+0x120>)
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d003      	beq.n	8007c6c <TIM_Base_SetConfig+0x40>
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	4a3a      	ldr	r2, [pc, #232]	; (8007d50 <TIM_Base_SetConfig+0x124>)
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d108      	bne.n	8007c7e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	685b      	ldr	r3, [r3, #4]
 8007c78:	68fa      	ldr	r2, [r7, #12]
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	4a2f      	ldr	r2, [pc, #188]	; (8007d40 <TIM_Base_SetConfig+0x114>)
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d02b      	beq.n	8007cde <TIM_Base_SetConfig+0xb2>
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c8c:	d027      	beq.n	8007cde <TIM_Base_SetConfig+0xb2>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	4a2c      	ldr	r2, [pc, #176]	; (8007d44 <TIM_Base_SetConfig+0x118>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d023      	beq.n	8007cde <TIM_Base_SetConfig+0xb2>
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	4a2b      	ldr	r2, [pc, #172]	; (8007d48 <TIM_Base_SetConfig+0x11c>)
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d01f      	beq.n	8007cde <TIM_Base_SetConfig+0xb2>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	4a2a      	ldr	r2, [pc, #168]	; (8007d4c <TIM_Base_SetConfig+0x120>)
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	d01b      	beq.n	8007cde <TIM_Base_SetConfig+0xb2>
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	4a29      	ldr	r2, [pc, #164]	; (8007d50 <TIM_Base_SetConfig+0x124>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d017      	beq.n	8007cde <TIM_Base_SetConfig+0xb2>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	4a28      	ldr	r2, [pc, #160]	; (8007d54 <TIM_Base_SetConfig+0x128>)
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d013      	beq.n	8007cde <TIM_Base_SetConfig+0xb2>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	4a27      	ldr	r2, [pc, #156]	; (8007d58 <TIM_Base_SetConfig+0x12c>)
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d00f      	beq.n	8007cde <TIM_Base_SetConfig+0xb2>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	4a26      	ldr	r2, [pc, #152]	; (8007d5c <TIM_Base_SetConfig+0x130>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d00b      	beq.n	8007cde <TIM_Base_SetConfig+0xb2>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	4a25      	ldr	r2, [pc, #148]	; (8007d60 <TIM_Base_SetConfig+0x134>)
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	d007      	beq.n	8007cde <TIM_Base_SetConfig+0xb2>
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	4a24      	ldr	r2, [pc, #144]	; (8007d64 <TIM_Base_SetConfig+0x138>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d003      	beq.n	8007cde <TIM_Base_SetConfig+0xb2>
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	4a23      	ldr	r2, [pc, #140]	; (8007d68 <TIM_Base_SetConfig+0x13c>)
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	d108      	bne.n	8007cf0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ce4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	68db      	ldr	r3, [r3, #12]
 8007cea:	68fa      	ldr	r2, [r7, #12]
 8007cec:	4313      	orrs	r3, r2
 8007cee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	695b      	ldr	r3, [r3, #20]
 8007cfa:	4313      	orrs	r3, r2
 8007cfc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	68fa      	ldr	r2, [r7, #12]
 8007d02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	689a      	ldr	r2, [r3, #8]
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	681a      	ldr	r2, [r3, #0]
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	4a0a      	ldr	r2, [pc, #40]	; (8007d40 <TIM_Base_SetConfig+0x114>)
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	d003      	beq.n	8007d24 <TIM_Base_SetConfig+0xf8>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	4a0c      	ldr	r2, [pc, #48]	; (8007d50 <TIM_Base_SetConfig+0x124>)
 8007d20:	4293      	cmp	r3, r2
 8007d22:	d103      	bne.n	8007d2c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	691a      	ldr	r2, [r3, #16]
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2201      	movs	r2, #1
 8007d30:	615a      	str	r2, [r3, #20]
}
 8007d32:	bf00      	nop
 8007d34:	3714      	adds	r7, #20
 8007d36:	46bd      	mov	sp, r7
 8007d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3c:	4770      	bx	lr
 8007d3e:	bf00      	nop
 8007d40:	40010000 	.word	0x40010000
 8007d44:	40000400 	.word	0x40000400
 8007d48:	40000800 	.word	0x40000800
 8007d4c:	40000c00 	.word	0x40000c00
 8007d50:	40010400 	.word	0x40010400
 8007d54:	40014000 	.word	0x40014000
 8007d58:	40014400 	.word	0x40014400
 8007d5c:	40014800 	.word	0x40014800
 8007d60:	40001800 	.word	0x40001800
 8007d64:	40001c00 	.word	0x40001c00
 8007d68:	40002000 	.word	0x40002000

08007d6c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	b083      	sub	sp, #12
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007d74:	bf00      	nop
 8007d76:	370c      	adds	r7, #12
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7e:	4770      	bx	lr

08007d80 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007d80:	b480      	push	{r7}
 8007d82:	b083      	sub	sp, #12
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007d88:	bf00      	nop
 8007d8a:	370c      	adds	r7, #12
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d92:	4770      	bx	lr

08007d94 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007d94:	b084      	sub	sp, #16
 8007d96:	b580      	push	{r7, lr}
 8007d98:	b084      	sub	sp, #16
 8007d9a:	af00      	add	r7, sp, #0
 8007d9c:	6078      	str	r0, [r7, #4]
 8007d9e:	f107 001c 	add.w	r0, r7, #28
 8007da2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007da8:	2b01      	cmp	r3, #1
 8007daa:	d122      	bne.n	8007df2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007db0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	68db      	ldr	r3, [r3, #12]
 8007dbc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007dc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007dc4:	687a      	ldr	r2, [r7, #4]
 8007dc6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	68db      	ldr	r3, [r3, #12]
 8007dcc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007dd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007dd6:	2b01      	cmp	r3, #1
 8007dd8:	d105      	bne.n	8007de6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	68db      	ldr	r3, [r3, #12]
 8007dde:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f000 f9c0 	bl	800816c <USB_CoreReset>
 8007dec:	4603      	mov	r3, r0
 8007dee:	73fb      	strb	r3, [r7, #15]
 8007df0:	e01a      	b.n	8007e28 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	68db      	ldr	r3, [r3, #12]
 8007df6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f000 f9b4 	bl	800816c <USB_CoreReset>
 8007e04:	4603      	mov	r3, r0
 8007e06:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007e08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d106      	bne.n	8007e1c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e12:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	639a      	str	r2, [r3, #56]	; 0x38
 8007e1a:	e005      	b.n	8007e28 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e20:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e2a:	2b01      	cmp	r3, #1
 8007e2c:	d10b      	bne.n	8007e46 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	689b      	ldr	r3, [r3, #8]
 8007e32:	f043 0206 	orr.w	r2, r3, #6
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	689b      	ldr	r3, [r3, #8]
 8007e3e:	f043 0220 	orr.w	r2, r3, #32
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007e46:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e48:	4618      	mov	r0, r3
 8007e4a:	3710      	adds	r7, #16
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007e52:	b004      	add	sp, #16
 8007e54:	4770      	bx	lr

08007e56 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007e56:	b480      	push	{r7}
 8007e58:	b083      	sub	sp, #12
 8007e5a:	af00      	add	r7, sp, #0
 8007e5c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	689b      	ldr	r3, [r3, #8]
 8007e62:	f043 0201 	orr.w	r2, r3, #1
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007e6a:	2300      	movs	r3, #0
}
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	370c      	adds	r7, #12
 8007e70:	46bd      	mov	sp, r7
 8007e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e76:	4770      	bx	lr

08007e78 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007e78:	b480      	push	{r7}
 8007e7a:	b083      	sub	sp, #12
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	689b      	ldr	r3, [r3, #8]
 8007e84:	f023 0201 	bic.w	r2, r3, #1
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007e8c:	2300      	movs	r3, #0
}
 8007e8e:	4618      	mov	r0, r3
 8007e90:	370c      	adds	r7, #12
 8007e92:	46bd      	mov	sp, r7
 8007e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e98:	4770      	bx	lr

08007e9a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007e9a:	b580      	push	{r7, lr}
 8007e9c:	b084      	sub	sp, #16
 8007e9e:	af00      	add	r7, sp, #0
 8007ea0:	6078      	str	r0, [r7, #4]
 8007ea2:	460b      	mov	r3, r1
 8007ea4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	68db      	ldr	r3, [r3, #12]
 8007eae:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007eb6:	78fb      	ldrb	r3, [r7, #3]
 8007eb8:	2b01      	cmp	r3, #1
 8007eba:	d115      	bne.n	8007ee8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	68db      	ldr	r3, [r3, #12]
 8007ec0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007ec8:	2001      	movs	r0, #1
 8007eca:	f7fa f9c9 	bl	8002260 <HAL_Delay>
      ms++;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	3301      	adds	r3, #1
 8007ed2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f000 f93a 	bl	800814e <USB_GetMode>
 8007eda:	4603      	mov	r3, r0
 8007edc:	2b01      	cmp	r3, #1
 8007ede:	d01e      	beq.n	8007f1e <USB_SetCurrentMode+0x84>
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	2b31      	cmp	r3, #49	; 0x31
 8007ee4:	d9f0      	bls.n	8007ec8 <USB_SetCurrentMode+0x2e>
 8007ee6:	e01a      	b.n	8007f1e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007ee8:	78fb      	ldrb	r3, [r7, #3]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d115      	bne.n	8007f1a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	68db      	ldr	r3, [r3, #12]
 8007ef2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007efa:	2001      	movs	r0, #1
 8007efc:	f7fa f9b0 	bl	8002260 <HAL_Delay>
      ms++;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	3301      	adds	r3, #1
 8007f04:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007f06:	6878      	ldr	r0, [r7, #4]
 8007f08:	f000 f921 	bl	800814e <USB_GetMode>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d005      	beq.n	8007f1e <USB_SetCurrentMode+0x84>
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	2b31      	cmp	r3, #49	; 0x31
 8007f16:	d9f0      	bls.n	8007efa <USB_SetCurrentMode+0x60>
 8007f18:	e001      	b.n	8007f1e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	e005      	b.n	8007f2a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	2b32      	cmp	r3, #50	; 0x32
 8007f22:	d101      	bne.n	8007f28 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007f24:	2301      	movs	r3, #1
 8007f26:	e000      	b.n	8007f2a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007f28:	2300      	movs	r3, #0
}
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	3710      	adds	r7, #16
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	bd80      	pop	{r7, pc}
	...

08007f34 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007f34:	b480      	push	{r7}
 8007f36:	b085      	sub	sp, #20
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
 8007f3c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007f3e:	2300      	movs	r3, #0
 8007f40:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	3301      	adds	r3, #1
 8007f46:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	4a13      	ldr	r2, [pc, #76]	; (8007f98 <USB_FlushTxFifo+0x64>)
 8007f4c:	4293      	cmp	r3, r2
 8007f4e:	d901      	bls.n	8007f54 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007f50:	2303      	movs	r3, #3
 8007f52:	e01b      	b.n	8007f8c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	691b      	ldr	r3, [r3, #16]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	daf2      	bge.n	8007f42 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	019b      	lsls	r3, r3, #6
 8007f64:	f043 0220 	orr.w	r2, r3, #32
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	3301      	adds	r3, #1
 8007f70:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	4a08      	ldr	r2, [pc, #32]	; (8007f98 <USB_FlushTxFifo+0x64>)
 8007f76:	4293      	cmp	r3, r2
 8007f78:	d901      	bls.n	8007f7e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007f7a:	2303      	movs	r3, #3
 8007f7c:	e006      	b.n	8007f8c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	691b      	ldr	r3, [r3, #16]
 8007f82:	f003 0320 	and.w	r3, r3, #32
 8007f86:	2b20      	cmp	r3, #32
 8007f88:	d0f0      	beq.n	8007f6c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007f8a:	2300      	movs	r3, #0
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	3714      	adds	r7, #20
 8007f90:	46bd      	mov	sp, r7
 8007f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f96:	4770      	bx	lr
 8007f98:	00030d40 	.word	0x00030d40

08007f9c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b085      	sub	sp, #20
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	3301      	adds	r3, #1
 8007fac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	4a11      	ldr	r2, [pc, #68]	; (8007ff8 <USB_FlushRxFifo+0x5c>)
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	d901      	bls.n	8007fba <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007fb6:	2303      	movs	r3, #3
 8007fb8:	e018      	b.n	8007fec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	691b      	ldr	r3, [r3, #16]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	daf2      	bge.n	8007fa8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2210      	movs	r2, #16
 8007fca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	3301      	adds	r3, #1
 8007fd0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	4a08      	ldr	r2, [pc, #32]	; (8007ff8 <USB_FlushRxFifo+0x5c>)
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d901      	bls.n	8007fde <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007fda:	2303      	movs	r3, #3
 8007fdc:	e006      	b.n	8007fec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	691b      	ldr	r3, [r3, #16]
 8007fe2:	f003 0310 	and.w	r3, r3, #16
 8007fe6:	2b10      	cmp	r3, #16
 8007fe8:	d0f0      	beq.n	8007fcc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007fea:	2300      	movs	r3, #0
}
 8007fec:	4618      	mov	r0, r3
 8007fee:	3714      	adds	r7, #20
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff6:	4770      	bx	lr
 8007ff8:	00030d40 	.word	0x00030d40

08007ffc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b089      	sub	sp, #36	; 0x24
 8008000:	af00      	add	r7, sp, #0
 8008002:	60f8      	str	r0, [r7, #12]
 8008004:	60b9      	str	r1, [r7, #8]
 8008006:	4611      	mov	r1, r2
 8008008:	461a      	mov	r2, r3
 800800a:	460b      	mov	r3, r1
 800800c:	71fb      	strb	r3, [r7, #7]
 800800e:	4613      	mov	r3, r2
 8008010:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008016:	68bb      	ldr	r3, [r7, #8]
 8008018:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800801a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800801e:	2b00      	cmp	r3, #0
 8008020:	d123      	bne.n	800806a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008022:	88bb      	ldrh	r3, [r7, #4]
 8008024:	3303      	adds	r3, #3
 8008026:	089b      	lsrs	r3, r3, #2
 8008028:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800802a:	2300      	movs	r3, #0
 800802c:	61bb      	str	r3, [r7, #24]
 800802e:	e018      	b.n	8008062 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008030:	79fb      	ldrb	r3, [r7, #7]
 8008032:	031a      	lsls	r2, r3, #12
 8008034:	697b      	ldr	r3, [r7, #20]
 8008036:	4413      	add	r3, r2
 8008038:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800803c:	461a      	mov	r2, r3
 800803e:	69fb      	ldr	r3, [r7, #28]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008044:	69fb      	ldr	r3, [r7, #28]
 8008046:	3301      	adds	r3, #1
 8008048:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800804a:	69fb      	ldr	r3, [r7, #28]
 800804c:	3301      	adds	r3, #1
 800804e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008050:	69fb      	ldr	r3, [r7, #28]
 8008052:	3301      	adds	r3, #1
 8008054:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008056:	69fb      	ldr	r3, [r7, #28]
 8008058:	3301      	adds	r3, #1
 800805a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800805c:	69bb      	ldr	r3, [r7, #24]
 800805e:	3301      	adds	r3, #1
 8008060:	61bb      	str	r3, [r7, #24]
 8008062:	69ba      	ldr	r2, [r7, #24]
 8008064:	693b      	ldr	r3, [r7, #16]
 8008066:	429a      	cmp	r2, r3
 8008068:	d3e2      	bcc.n	8008030 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800806a:	2300      	movs	r3, #0
}
 800806c:	4618      	mov	r0, r3
 800806e:	3724      	adds	r7, #36	; 0x24
 8008070:	46bd      	mov	sp, r7
 8008072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008076:	4770      	bx	lr

08008078 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008078:	b480      	push	{r7}
 800807a:	b08b      	sub	sp, #44	; 0x2c
 800807c:	af00      	add	r7, sp, #0
 800807e:	60f8      	str	r0, [r7, #12]
 8008080:	60b9      	str	r1, [r7, #8]
 8008082:	4613      	mov	r3, r2
 8008084:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800808e:	88fb      	ldrh	r3, [r7, #6]
 8008090:	089b      	lsrs	r3, r3, #2
 8008092:	b29b      	uxth	r3, r3
 8008094:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008096:	88fb      	ldrh	r3, [r7, #6]
 8008098:	f003 0303 	and.w	r3, r3, #3
 800809c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800809e:	2300      	movs	r3, #0
 80080a0:	623b      	str	r3, [r7, #32]
 80080a2:	e014      	b.n	80080ce <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80080a4:	69bb      	ldr	r3, [r7, #24]
 80080a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080aa:	681a      	ldr	r2, [r3, #0]
 80080ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ae:	601a      	str	r2, [r3, #0]
    pDest++;
 80080b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080b2:	3301      	adds	r3, #1
 80080b4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80080b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080b8:	3301      	adds	r3, #1
 80080ba:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80080bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080be:	3301      	adds	r3, #1
 80080c0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80080c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080c4:	3301      	adds	r3, #1
 80080c6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80080c8:	6a3b      	ldr	r3, [r7, #32]
 80080ca:	3301      	adds	r3, #1
 80080cc:	623b      	str	r3, [r7, #32]
 80080ce:	6a3a      	ldr	r2, [r7, #32]
 80080d0:	697b      	ldr	r3, [r7, #20]
 80080d2:	429a      	cmp	r2, r3
 80080d4:	d3e6      	bcc.n	80080a4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80080d6:	8bfb      	ldrh	r3, [r7, #30]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d01e      	beq.n	800811a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80080dc:	2300      	movs	r3, #0
 80080de:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80080e0:	69bb      	ldr	r3, [r7, #24]
 80080e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080e6:	461a      	mov	r2, r3
 80080e8:	f107 0310 	add.w	r3, r7, #16
 80080ec:	6812      	ldr	r2, [r2, #0]
 80080ee:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80080f0:	693a      	ldr	r2, [r7, #16]
 80080f2:	6a3b      	ldr	r3, [r7, #32]
 80080f4:	b2db      	uxtb	r3, r3
 80080f6:	00db      	lsls	r3, r3, #3
 80080f8:	fa22 f303 	lsr.w	r3, r2, r3
 80080fc:	b2da      	uxtb	r2, r3
 80080fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008100:	701a      	strb	r2, [r3, #0]
      i++;
 8008102:	6a3b      	ldr	r3, [r7, #32]
 8008104:	3301      	adds	r3, #1
 8008106:	623b      	str	r3, [r7, #32]
      pDest++;
 8008108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800810a:	3301      	adds	r3, #1
 800810c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800810e:	8bfb      	ldrh	r3, [r7, #30]
 8008110:	3b01      	subs	r3, #1
 8008112:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008114:	8bfb      	ldrh	r3, [r7, #30]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d1ea      	bne.n	80080f0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800811a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800811c:	4618      	mov	r0, r3
 800811e:	372c      	adds	r7, #44	; 0x2c
 8008120:	46bd      	mov	sp, r7
 8008122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008126:	4770      	bx	lr

08008128 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008128:	b480      	push	{r7}
 800812a:	b085      	sub	sp, #20
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	695b      	ldr	r3, [r3, #20]
 8008134:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	699b      	ldr	r3, [r3, #24]
 800813a:	68fa      	ldr	r2, [r7, #12]
 800813c:	4013      	ands	r3, r2
 800813e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008140:	68fb      	ldr	r3, [r7, #12]
}
 8008142:	4618      	mov	r0, r3
 8008144:	3714      	adds	r7, #20
 8008146:	46bd      	mov	sp, r7
 8008148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814c:	4770      	bx	lr

0800814e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800814e:	b480      	push	{r7}
 8008150:	b083      	sub	sp, #12
 8008152:	af00      	add	r7, sp, #0
 8008154:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	695b      	ldr	r3, [r3, #20]
 800815a:	f003 0301 	and.w	r3, r3, #1
}
 800815e:	4618      	mov	r0, r3
 8008160:	370c      	adds	r7, #12
 8008162:	46bd      	mov	sp, r7
 8008164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008168:	4770      	bx	lr
	...

0800816c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800816c:	b480      	push	{r7}
 800816e:	b085      	sub	sp, #20
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008174:	2300      	movs	r3, #0
 8008176:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	3301      	adds	r3, #1
 800817c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	4a13      	ldr	r2, [pc, #76]	; (80081d0 <USB_CoreReset+0x64>)
 8008182:	4293      	cmp	r3, r2
 8008184:	d901      	bls.n	800818a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008186:	2303      	movs	r3, #3
 8008188:	e01b      	b.n	80081c2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	691b      	ldr	r3, [r3, #16]
 800818e:	2b00      	cmp	r3, #0
 8008190:	daf2      	bge.n	8008178 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008192:	2300      	movs	r3, #0
 8008194:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	691b      	ldr	r3, [r3, #16]
 800819a:	f043 0201 	orr.w	r2, r3, #1
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	3301      	adds	r3, #1
 80081a6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	4a09      	ldr	r2, [pc, #36]	; (80081d0 <USB_CoreReset+0x64>)
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d901      	bls.n	80081b4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80081b0:	2303      	movs	r3, #3
 80081b2:	e006      	b.n	80081c2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	691b      	ldr	r3, [r3, #16]
 80081b8:	f003 0301 	and.w	r3, r3, #1
 80081bc:	2b01      	cmp	r3, #1
 80081be:	d0f0      	beq.n	80081a2 <USB_CoreReset+0x36>

  return HAL_OK;
 80081c0:	2300      	movs	r3, #0
}
 80081c2:	4618      	mov	r0, r3
 80081c4:	3714      	adds	r7, #20
 80081c6:	46bd      	mov	sp, r7
 80081c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081cc:	4770      	bx	lr
 80081ce:	bf00      	nop
 80081d0:	00030d40 	.word	0x00030d40

080081d4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80081d4:	b084      	sub	sp, #16
 80081d6:	b580      	push	{r7, lr}
 80081d8:	b086      	sub	sp, #24
 80081da:	af00      	add	r7, sp, #0
 80081dc:	6078      	str	r0, [r7, #4]
 80081de:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80081e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80081e6:	2300      	movs	r3, #0
 80081e8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80081f4:	461a      	mov	r2, r3
 80081f6:	2300      	movs	r3, #0
 80081f8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081fe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800820a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008216:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008222:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008226:	2b00      	cmp	r3, #0
 8008228:	d018      	beq.n	800825c <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800822a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800822c:	2b01      	cmp	r3, #1
 800822e:	d10a      	bne.n	8008246 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	68fa      	ldr	r2, [r7, #12]
 800823a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800823e:	f043 0304 	orr.w	r3, r3, #4
 8008242:	6013      	str	r3, [r2, #0]
 8008244:	e014      	b.n	8008270 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	68fa      	ldr	r2, [r7, #12]
 8008250:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008254:	f023 0304 	bic.w	r3, r3, #4
 8008258:	6013      	str	r3, [r2, #0]
 800825a:	e009      	b.n	8008270 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	68fa      	ldr	r2, [r7, #12]
 8008266:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800826a:	f023 0304 	bic.w	r3, r3, #4
 800826e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008270:	2110      	movs	r1, #16
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f7ff fe5e 	bl	8007f34 <USB_FlushTxFifo>
 8008278:	4603      	mov	r3, r0
 800827a:	2b00      	cmp	r3, #0
 800827c:	d001      	beq.n	8008282 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 800827e:	2301      	movs	r3, #1
 8008280:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f7ff fe8a 	bl	8007f9c <USB_FlushRxFifo>
 8008288:	4603      	mov	r3, r0
 800828a:	2b00      	cmp	r3, #0
 800828c:	d001      	beq.n	8008292 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 800828e:	2301      	movs	r3, #1
 8008290:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8008292:	2300      	movs	r3, #0
 8008294:	613b      	str	r3, [r7, #16]
 8008296:	e015      	b.n	80082c4 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8008298:	693b      	ldr	r3, [r7, #16]
 800829a:	015a      	lsls	r2, r3, #5
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	4413      	add	r3, r2
 80082a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082a4:	461a      	mov	r2, r3
 80082a6:	f04f 33ff 	mov.w	r3, #4294967295
 80082aa:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80082ac:	693b      	ldr	r3, [r7, #16]
 80082ae:	015a      	lsls	r2, r3, #5
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	4413      	add	r3, r2
 80082b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082b8:	461a      	mov	r2, r3
 80082ba:	2300      	movs	r3, #0
 80082bc:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80082be:	693b      	ldr	r3, [r7, #16]
 80082c0:	3301      	adds	r3, #1
 80082c2:	613b      	str	r3, [r7, #16]
 80082c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082c6:	693a      	ldr	r2, [r7, #16]
 80082c8:	429a      	cmp	r2, r3
 80082ca:	d3e5      	bcc.n	8008298 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2200      	movs	r2, #0
 80082d0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	f04f 32ff 	mov.w	r2, #4294967295
 80082d8:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d00b      	beq.n	80082fe <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80082ec:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	4a13      	ldr	r2, [pc, #76]	; (8008340 <USB_HostInit+0x16c>)
 80082f2:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	4a13      	ldr	r2, [pc, #76]	; (8008344 <USB_HostInit+0x170>)
 80082f8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80082fc:	e009      	b.n	8008312 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2280      	movs	r2, #128	; 0x80
 8008302:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	4a10      	ldr	r2, [pc, #64]	; (8008348 <USB_HostInit+0x174>)
 8008308:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	4a0f      	ldr	r2, [pc, #60]	; (800834c <USB_HostInit+0x178>)
 800830e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008314:	2b00      	cmp	r3, #0
 8008316:	d105      	bne.n	8008324 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	699b      	ldr	r3, [r3, #24]
 800831c:	f043 0210 	orr.w	r2, r3, #16
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	699a      	ldr	r2, [r3, #24]
 8008328:	4b09      	ldr	r3, [pc, #36]	; (8008350 <USB_HostInit+0x17c>)
 800832a:	4313      	orrs	r3, r2
 800832c:	687a      	ldr	r2, [r7, #4]
 800832e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8008330:	7dfb      	ldrb	r3, [r7, #23]
}
 8008332:	4618      	mov	r0, r3
 8008334:	3718      	adds	r7, #24
 8008336:	46bd      	mov	sp, r7
 8008338:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800833c:	b004      	add	sp, #16
 800833e:	4770      	bx	lr
 8008340:	01000200 	.word	0x01000200
 8008344:	00e00300 	.word	0x00e00300
 8008348:	00600080 	.word	0x00600080
 800834c:	004000e0 	.word	0x004000e0
 8008350:	a3200008 	.word	0xa3200008

08008354 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8008354:	b480      	push	{r7}
 8008356:	b085      	sub	sp, #20
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
 800835c:	460b      	mov	r3, r1
 800835e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	68fa      	ldr	r2, [r7, #12]
 800836e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008372:	f023 0303 	bic.w	r3, r3, #3
 8008376:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800837e:	681a      	ldr	r2, [r3, #0]
 8008380:	78fb      	ldrb	r3, [r7, #3]
 8008382:	f003 0303 	and.w	r3, r3, #3
 8008386:	68f9      	ldr	r1, [r7, #12]
 8008388:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800838c:	4313      	orrs	r3, r2
 800838e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8008390:	78fb      	ldrb	r3, [r7, #3]
 8008392:	2b01      	cmp	r3, #1
 8008394:	d107      	bne.n	80083a6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800839c:	461a      	mov	r2, r3
 800839e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80083a2:	6053      	str	r3, [r2, #4]
 80083a4:	e009      	b.n	80083ba <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80083a6:	78fb      	ldrb	r3, [r7, #3]
 80083a8:	2b02      	cmp	r3, #2
 80083aa:	d106      	bne.n	80083ba <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80083b2:	461a      	mov	r2, r3
 80083b4:	f241 7370 	movw	r3, #6000	; 0x1770
 80083b8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80083ba:	2300      	movs	r3, #0
}
 80083bc:	4618      	mov	r0, r3
 80083be:	3714      	adds	r7, #20
 80083c0:	46bd      	mov	sp, r7
 80083c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c6:	4770      	bx	lr

080083c8 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b084      	sub	sp, #16
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80083d4:	2300      	movs	r3, #0
 80083d6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80083e8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80083ea:	68bb      	ldr	r3, [r7, #8]
 80083ec:	68fa      	ldr	r2, [r7, #12]
 80083ee:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80083f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80083f6:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80083f8:	2064      	movs	r0, #100	; 0x64
 80083fa:	f7f9 ff31 	bl	8002260 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80083fe:	68bb      	ldr	r3, [r7, #8]
 8008400:	68fa      	ldr	r2, [r7, #12]
 8008402:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008406:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800840a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800840c:	200a      	movs	r0, #10
 800840e:	f7f9 ff27 	bl	8002260 <HAL_Delay>

  return HAL_OK;
 8008412:	2300      	movs	r3, #0
}
 8008414:	4618      	mov	r0, r3
 8008416:	3710      	adds	r7, #16
 8008418:	46bd      	mov	sp, r7
 800841a:	bd80      	pop	{r7, pc}

0800841c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800841c:	b480      	push	{r7}
 800841e:	b085      	sub	sp, #20
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
 8008424:	460b      	mov	r3, r1
 8008426:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800842c:	2300      	movs	r3, #0
 800842e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008440:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8008442:	68bb      	ldr	r3, [r7, #8]
 8008444:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008448:	2b00      	cmp	r3, #0
 800844a:	d109      	bne.n	8008460 <USB_DriveVbus+0x44>
 800844c:	78fb      	ldrb	r3, [r7, #3]
 800844e:	2b01      	cmp	r3, #1
 8008450:	d106      	bne.n	8008460 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	68fa      	ldr	r2, [r7, #12]
 8008456:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800845a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800845e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008466:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800846a:	d109      	bne.n	8008480 <USB_DriveVbus+0x64>
 800846c:	78fb      	ldrb	r3, [r7, #3]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d106      	bne.n	8008480 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8008472:	68bb      	ldr	r3, [r7, #8]
 8008474:	68fa      	ldr	r2, [r7, #12]
 8008476:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800847a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800847e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8008480:	2300      	movs	r3, #0
}
 8008482:	4618      	mov	r0, r3
 8008484:	3714      	adds	r7, #20
 8008486:	46bd      	mov	sp, r7
 8008488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848c:	4770      	bx	lr

0800848e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800848e:	b480      	push	{r7}
 8008490:	b085      	sub	sp, #20
 8008492:	af00      	add	r7, sp, #0
 8008494:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800849a:	2300      	movs	r3, #0
 800849c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80084a8:	68bb      	ldr	r3, [r7, #8]
 80084aa:	0c5b      	lsrs	r3, r3, #17
 80084ac:	f003 0303 	and.w	r3, r3, #3
}
 80084b0:	4618      	mov	r0, r3
 80084b2:	3714      	adds	r7, #20
 80084b4:	46bd      	mov	sp, r7
 80084b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ba:	4770      	bx	lr

080084bc <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80084bc:	b480      	push	{r7}
 80084be:	b085      	sub	sp, #20
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80084ce:	689b      	ldr	r3, [r3, #8]
 80084d0:	b29b      	uxth	r3, r3
}
 80084d2:	4618      	mov	r0, r3
 80084d4:	3714      	adds	r7, #20
 80084d6:	46bd      	mov	sp, r7
 80084d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084dc:	4770      	bx	lr
	...

080084e0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b088      	sub	sp, #32
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
 80084e8:	4608      	mov	r0, r1
 80084ea:	4611      	mov	r1, r2
 80084ec:	461a      	mov	r2, r3
 80084ee:	4603      	mov	r3, r0
 80084f0:	70fb      	strb	r3, [r7, #3]
 80084f2:	460b      	mov	r3, r1
 80084f4:	70bb      	strb	r3, [r7, #2]
 80084f6:	4613      	mov	r3, r2
 80084f8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80084fa:	2300      	movs	r3, #0
 80084fc:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8008502:	78fb      	ldrb	r3, [r7, #3]
 8008504:	015a      	lsls	r2, r3, #5
 8008506:	693b      	ldr	r3, [r7, #16]
 8008508:	4413      	add	r3, r2
 800850a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800850e:	461a      	mov	r2, r3
 8008510:	f04f 33ff 	mov.w	r3, #4294967295
 8008514:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8008516:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800851a:	2b03      	cmp	r3, #3
 800851c:	d87e      	bhi.n	800861c <USB_HC_Init+0x13c>
 800851e:	a201      	add	r2, pc, #4	; (adr r2, 8008524 <USB_HC_Init+0x44>)
 8008520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008524:	08008535 	.word	0x08008535
 8008528:	080085df 	.word	0x080085df
 800852c:	08008535 	.word	0x08008535
 8008530:	080085a1 	.word	0x080085a1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008534:	78fb      	ldrb	r3, [r7, #3]
 8008536:	015a      	lsls	r2, r3, #5
 8008538:	693b      	ldr	r3, [r7, #16]
 800853a:	4413      	add	r3, r2
 800853c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008540:	461a      	mov	r2, r3
 8008542:	f240 439d 	movw	r3, #1181	; 0x49d
 8008546:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008548:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800854c:	2b00      	cmp	r3, #0
 800854e:	da10      	bge.n	8008572 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008550:	78fb      	ldrb	r3, [r7, #3]
 8008552:	015a      	lsls	r2, r3, #5
 8008554:	693b      	ldr	r3, [r7, #16]
 8008556:	4413      	add	r3, r2
 8008558:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800855c:	68db      	ldr	r3, [r3, #12]
 800855e:	78fa      	ldrb	r2, [r7, #3]
 8008560:	0151      	lsls	r1, r2, #5
 8008562:	693a      	ldr	r2, [r7, #16]
 8008564:	440a      	add	r2, r1
 8008566:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800856a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800856e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8008570:	e057      	b.n	8008622 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800857a:	2b00      	cmp	r3, #0
 800857c:	d051      	beq.n	8008622 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800857e:	78fb      	ldrb	r3, [r7, #3]
 8008580:	015a      	lsls	r2, r3, #5
 8008582:	693b      	ldr	r3, [r7, #16]
 8008584:	4413      	add	r3, r2
 8008586:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800858a:	68db      	ldr	r3, [r3, #12]
 800858c:	78fa      	ldrb	r2, [r7, #3]
 800858e:	0151      	lsls	r1, r2, #5
 8008590:	693a      	ldr	r2, [r7, #16]
 8008592:	440a      	add	r2, r1
 8008594:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008598:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800859c:	60d3      	str	r3, [r2, #12]
      break;
 800859e:	e040      	b.n	8008622 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80085a0:	78fb      	ldrb	r3, [r7, #3]
 80085a2:	015a      	lsls	r2, r3, #5
 80085a4:	693b      	ldr	r3, [r7, #16]
 80085a6:	4413      	add	r3, r2
 80085a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085ac:	461a      	mov	r2, r3
 80085ae:	f240 639d 	movw	r3, #1693	; 0x69d
 80085b2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80085b4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	da34      	bge.n	8008626 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80085bc:	78fb      	ldrb	r3, [r7, #3]
 80085be:	015a      	lsls	r2, r3, #5
 80085c0:	693b      	ldr	r3, [r7, #16]
 80085c2:	4413      	add	r3, r2
 80085c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085c8:	68db      	ldr	r3, [r3, #12]
 80085ca:	78fa      	ldrb	r2, [r7, #3]
 80085cc:	0151      	lsls	r1, r2, #5
 80085ce:	693a      	ldr	r2, [r7, #16]
 80085d0:	440a      	add	r2, r1
 80085d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80085d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80085da:	60d3      	str	r3, [r2, #12]
      }

      break;
 80085dc:	e023      	b.n	8008626 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80085de:	78fb      	ldrb	r3, [r7, #3]
 80085e0:	015a      	lsls	r2, r3, #5
 80085e2:	693b      	ldr	r3, [r7, #16]
 80085e4:	4413      	add	r3, r2
 80085e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085ea:	461a      	mov	r2, r3
 80085ec:	f240 2325 	movw	r3, #549	; 0x225
 80085f0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80085f2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	da17      	bge.n	800862a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80085fa:	78fb      	ldrb	r3, [r7, #3]
 80085fc:	015a      	lsls	r2, r3, #5
 80085fe:	693b      	ldr	r3, [r7, #16]
 8008600:	4413      	add	r3, r2
 8008602:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008606:	68db      	ldr	r3, [r3, #12]
 8008608:	78fa      	ldrb	r2, [r7, #3]
 800860a:	0151      	lsls	r1, r2, #5
 800860c:	693a      	ldr	r2, [r7, #16]
 800860e:	440a      	add	r2, r1
 8008610:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008614:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8008618:	60d3      	str	r3, [r2, #12]
      }
      break;
 800861a:	e006      	b.n	800862a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800861c:	2301      	movs	r3, #1
 800861e:	77fb      	strb	r3, [r7, #31]
      break;
 8008620:	e004      	b.n	800862c <USB_HC_Init+0x14c>
      break;
 8008622:	bf00      	nop
 8008624:	e002      	b.n	800862c <USB_HC_Init+0x14c>
      break;
 8008626:	bf00      	nop
 8008628:	e000      	b.n	800862c <USB_HC_Init+0x14c>
      break;
 800862a:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800862c:	78fb      	ldrb	r3, [r7, #3]
 800862e:	015a      	lsls	r2, r3, #5
 8008630:	693b      	ldr	r3, [r7, #16]
 8008632:	4413      	add	r3, r2
 8008634:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008638:	68db      	ldr	r3, [r3, #12]
 800863a:	78fa      	ldrb	r2, [r7, #3]
 800863c:	0151      	lsls	r1, r2, #5
 800863e:	693a      	ldr	r2, [r7, #16]
 8008640:	440a      	add	r2, r1
 8008642:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008646:	f043 0302 	orr.w	r3, r3, #2
 800864a:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800864c:	693b      	ldr	r3, [r7, #16]
 800864e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008652:	699a      	ldr	r2, [r3, #24]
 8008654:	78fb      	ldrb	r3, [r7, #3]
 8008656:	f003 030f 	and.w	r3, r3, #15
 800865a:	2101      	movs	r1, #1
 800865c:	fa01 f303 	lsl.w	r3, r1, r3
 8008660:	6939      	ldr	r1, [r7, #16]
 8008662:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008666:	4313      	orrs	r3, r2
 8008668:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	699b      	ldr	r3, [r3, #24]
 800866e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8008676:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800867a:	2b00      	cmp	r3, #0
 800867c:	da03      	bge.n	8008686 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800867e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008682:	61bb      	str	r3, [r7, #24]
 8008684:	e001      	b.n	800868a <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8008686:	2300      	movs	r3, #0
 8008688:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f7ff feff 	bl	800848e <USB_GetHostSpeed>
 8008690:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8008692:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008696:	2b02      	cmp	r3, #2
 8008698:	d106      	bne.n	80086a8 <USB_HC_Init+0x1c8>
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	2b02      	cmp	r3, #2
 800869e:	d003      	beq.n	80086a8 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80086a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80086a4:	617b      	str	r3, [r7, #20]
 80086a6:	e001      	b.n	80086ac <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80086a8:	2300      	movs	r3, #0
 80086aa:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80086ac:	787b      	ldrb	r3, [r7, #1]
 80086ae:	059b      	lsls	r3, r3, #22
 80086b0:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80086b4:	78bb      	ldrb	r3, [r7, #2]
 80086b6:	02db      	lsls	r3, r3, #11
 80086b8:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80086bc:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80086be:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80086c2:	049b      	lsls	r3, r3, #18
 80086c4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80086c8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80086ca:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80086cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80086d0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80086d2:	69bb      	ldr	r3, [r7, #24]
 80086d4:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80086d6:	78fb      	ldrb	r3, [r7, #3]
 80086d8:	0159      	lsls	r1, r3, #5
 80086da:	693b      	ldr	r3, [r7, #16]
 80086dc:	440b      	add	r3, r1
 80086de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086e2:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80086e8:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80086ea:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80086ee:	2b03      	cmp	r3, #3
 80086f0:	d003      	beq.n	80086fa <USB_HC_Init+0x21a>
 80086f2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80086f6:	2b01      	cmp	r3, #1
 80086f8:	d10f      	bne.n	800871a <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80086fa:	78fb      	ldrb	r3, [r7, #3]
 80086fc:	015a      	lsls	r2, r3, #5
 80086fe:	693b      	ldr	r3, [r7, #16]
 8008700:	4413      	add	r3, r2
 8008702:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	78fa      	ldrb	r2, [r7, #3]
 800870a:	0151      	lsls	r1, r2, #5
 800870c:	693a      	ldr	r2, [r7, #16]
 800870e:	440a      	add	r2, r1
 8008710:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008714:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008718:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800871a:	7ffb      	ldrb	r3, [r7, #31]
}
 800871c:	4618      	mov	r0, r3
 800871e:	3720      	adds	r7, #32
 8008720:	46bd      	mov	sp, r7
 8008722:	bd80      	pop	{r7, pc}

08008724 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b08c      	sub	sp, #48	; 0x30
 8008728:	af02      	add	r7, sp, #8
 800872a:	60f8      	str	r0, [r7, #12]
 800872c:	60b9      	str	r1, [r7, #8]
 800872e:	4613      	mov	r3, r2
 8008730:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	785b      	ldrb	r3, [r3, #1]
 800873a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800873c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008740:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800874a:	2b00      	cmp	r3, #0
 800874c:	d02d      	beq.n	80087aa <USB_HC_StartXfer+0x86>
 800874e:	68bb      	ldr	r3, [r7, #8]
 8008750:	791b      	ldrb	r3, [r3, #4]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d129      	bne.n	80087aa <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8008756:	79fb      	ldrb	r3, [r7, #7]
 8008758:	2b01      	cmp	r3, #1
 800875a:	d117      	bne.n	800878c <USB_HC_StartXfer+0x68>
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	79db      	ldrb	r3, [r3, #7]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d003      	beq.n	800876c <USB_HC_StartXfer+0x48>
 8008764:	68bb      	ldr	r3, [r7, #8]
 8008766:	79db      	ldrb	r3, [r3, #7]
 8008768:	2b02      	cmp	r3, #2
 800876a:	d10f      	bne.n	800878c <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800876c:	69fb      	ldr	r3, [r7, #28]
 800876e:	015a      	lsls	r2, r3, #5
 8008770:	6a3b      	ldr	r3, [r7, #32]
 8008772:	4413      	add	r3, r2
 8008774:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008778:	68db      	ldr	r3, [r3, #12]
 800877a:	69fa      	ldr	r2, [r7, #28]
 800877c:	0151      	lsls	r1, r2, #5
 800877e:	6a3a      	ldr	r2, [r7, #32]
 8008780:	440a      	add	r2, r1
 8008782:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008786:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800878a:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800878c:	79fb      	ldrb	r3, [r7, #7]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d10b      	bne.n	80087aa <USB_HC_StartXfer+0x86>
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	795b      	ldrb	r3, [r3, #5]
 8008796:	2b01      	cmp	r3, #1
 8008798:	d107      	bne.n	80087aa <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800879a:	68bb      	ldr	r3, [r7, #8]
 800879c:	785b      	ldrb	r3, [r3, #1]
 800879e:	4619      	mov	r1, r3
 80087a0:	68f8      	ldr	r0, [r7, #12]
 80087a2:	f000 fa0f 	bl	8008bc4 <USB_DoPing>
      return HAL_OK;
 80087a6:	2300      	movs	r3, #0
 80087a8:	e0f8      	b.n	800899c <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	695b      	ldr	r3, [r3, #20]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d018      	beq.n	80087e4 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	695b      	ldr	r3, [r3, #20]
 80087b6:	68ba      	ldr	r2, [r7, #8]
 80087b8:	8912      	ldrh	r2, [r2, #8]
 80087ba:	4413      	add	r3, r2
 80087bc:	3b01      	subs	r3, #1
 80087be:	68ba      	ldr	r2, [r7, #8]
 80087c0:	8912      	ldrh	r2, [r2, #8]
 80087c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80087c6:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80087c8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80087ca:	8b7b      	ldrh	r3, [r7, #26]
 80087cc:	429a      	cmp	r2, r3
 80087ce:	d90b      	bls.n	80087e8 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80087d0:	8b7b      	ldrh	r3, [r7, #26]
 80087d2:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80087d4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80087d6:	68ba      	ldr	r2, [r7, #8]
 80087d8:	8912      	ldrh	r2, [r2, #8]
 80087da:	fb03 f202 	mul.w	r2, r3, r2
 80087de:	68bb      	ldr	r3, [r7, #8]
 80087e0:	611a      	str	r2, [r3, #16]
 80087e2:	e001      	b.n	80087e8 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80087e4:	2301      	movs	r3, #1
 80087e6:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80087e8:	68bb      	ldr	r3, [r7, #8]
 80087ea:	78db      	ldrb	r3, [r3, #3]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d007      	beq.n	8008800 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80087f0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80087f2:	68ba      	ldr	r2, [r7, #8]
 80087f4:	8912      	ldrh	r2, [r2, #8]
 80087f6:	fb03 f202 	mul.w	r2, r3, r2
 80087fa:	68bb      	ldr	r3, [r7, #8]
 80087fc:	611a      	str	r2, [r3, #16]
 80087fe:	e003      	b.n	8008808 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	695a      	ldr	r2, [r3, #20]
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008808:	68bb      	ldr	r3, [r7, #8]
 800880a:	691b      	ldr	r3, [r3, #16]
 800880c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008810:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008812:	04d9      	lsls	r1, r3, #19
 8008814:	4b63      	ldr	r3, [pc, #396]	; (80089a4 <USB_HC_StartXfer+0x280>)
 8008816:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008818:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800881a:	68bb      	ldr	r3, [r7, #8]
 800881c:	7a9b      	ldrb	r3, [r3, #10]
 800881e:	075b      	lsls	r3, r3, #29
 8008820:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008824:	69f9      	ldr	r1, [r7, #28]
 8008826:	0148      	lsls	r0, r1, #5
 8008828:	6a39      	ldr	r1, [r7, #32]
 800882a:	4401      	add	r1, r0
 800882c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008830:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008832:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8008834:	79fb      	ldrb	r3, [r7, #7]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d009      	beq.n	800884e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800883a:	68bb      	ldr	r3, [r7, #8]
 800883c:	68d9      	ldr	r1, [r3, #12]
 800883e:	69fb      	ldr	r3, [r7, #28]
 8008840:	015a      	lsls	r2, r3, #5
 8008842:	6a3b      	ldr	r3, [r7, #32]
 8008844:	4413      	add	r3, r2
 8008846:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800884a:	460a      	mov	r2, r1
 800884c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800884e:	6a3b      	ldr	r3, [r7, #32]
 8008850:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008854:	689b      	ldr	r3, [r3, #8]
 8008856:	f003 0301 	and.w	r3, r3, #1
 800885a:	2b00      	cmp	r3, #0
 800885c:	bf0c      	ite	eq
 800885e:	2301      	moveq	r3, #1
 8008860:	2300      	movne	r3, #0
 8008862:	b2db      	uxtb	r3, r3
 8008864:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8008866:	69fb      	ldr	r3, [r7, #28]
 8008868:	015a      	lsls	r2, r3, #5
 800886a:	6a3b      	ldr	r3, [r7, #32]
 800886c:	4413      	add	r3, r2
 800886e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	69fa      	ldr	r2, [r7, #28]
 8008876:	0151      	lsls	r1, r2, #5
 8008878:	6a3a      	ldr	r2, [r7, #32]
 800887a:	440a      	add	r2, r1
 800887c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008880:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008884:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8008886:	69fb      	ldr	r3, [r7, #28]
 8008888:	015a      	lsls	r2, r3, #5
 800888a:	6a3b      	ldr	r3, [r7, #32]
 800888c:	4413      	add	r3, r2
 800888e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008892:	681a      	ldr	r2, [r3, #0]
 8008894:	7e7b      	ldrb	r3, [r7, #25]
 8008896:	075b      	lsls	r3, r3, #29
 8008898:	69f9      	ldr	r1, [r7, #28]
 800889a:	0148      	lsls	r0, r1, #5
 800889c:	6a39      	ldr	r1, [r7, #32]
 800889e:	4401      	add	r1, r0
 80088a0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80088a4:	4313      	orrs	r3, r2
 80088a6:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80088a8:	69fb      	ldr	r3, [r7, #28]
 80088aa:	015a      	lsls	r2, r3, #5
 80088ac:	6a3b      	ldr	r3, [r7, #32]
 80088ae:	4413      	add	r3, r2
 80088b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80088b8:	693b      	ldr	r3, [r7, #16]
 80088ba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80088be:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	78db      	ldrb	r3, [r3, #3]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d004      	beq.n	80088d2 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80088c8:	693b      	ldr	r3, [r7, #16]
 80088ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80088ce:	613b      	str	r3, [r7, #16]
 80088d0:	e003      	b.n	80088da <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80088d2:	693b      	ldr	r3, [r7, #16]
 80088d4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80088d8:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80088da:	693b      	ldr	r3, [r7, #16]
 80088dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80088e0:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80088e2:	69fb      	ldr	r3, [r7, #28]
 80088e4:	015a      	lsls	r2, r3, #5
 80088e6:	6a3b      	ldr	r3, [r7, #32]
 80088e8:	4413      	add	r3, r2
 80088ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088ee:	461a      	mov	r2, r3
 80088f0:	693b      	ldr	r3, [r7, #16]
 80088f2:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80088f4:	79fb      	ldrb	r3, [r7, #7]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d001      	beq.n	80088fe <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80088fa:	2300      	movs	r3, #0
 80088fc:	e04e      	b.n	800899c <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80088fe:	68bb      	ldr	r3, [r7, #8]
 8008900:	78db      	ldrb	r3, [r3, #3]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d149      	bne.n	800899a <USB_HC_StartXfer+0x276>
 8008906:	68bb      	ldr	r3, [r7, #8]
 8008908:	695b      	ldr	r3, [r3, #20]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d045      	beq.n	800899a <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800890e:	68bb      	ldr	r3, [r7, #8]
 8008910:	79db      	ldrb	r3, [r3, #7]
 8008912:	2b03      	cmp	r3, #3
 8008914:	d830      	bhi.n	8008978 <USB_HC_StartXfer+0x254>
 8008916:	a201      	add	r2, pc, #4	; (adr r2, 800891c <USB_HC_StartXfer+0x1f8>)
 8008918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800891c:	0800892d 	.word	0x0800892d
 8008920:	08008951 	.word	0x08008951
 8008924:	0800892d 	.word	0x0800892d
 8008928:	08008951 	.word	0x08008951
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800892c:	68bb      	ldr	r3, [r7, #8]
 800892e:	695b      	ldr	r3, [r3, #20]
 8008930:	3303      	adds	r3, #3
 8008932:	089b      	lsrs	r3, r3, #2
 8008934:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8008936:	8afa      	ldrh	r2, [r7, #22]
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800893c:	b29b      	uxth	r3, r3
 800893e:	429a      	cmp	r2, r3
 8008940:	d91c      	bls.n	800897c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	699b      	ldr	r3, [r3, #24]
 8008946:	f043 0220 	orr.w	r2, r3, #32
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	619a      	str	r2, [r3, #24]
        }
        break;
 800894e:	e015      	b.n	800897c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	695b      	ldr	r3, [r3, #20]
 8008954:	3303      	adds	r3, #3
 8008956:	089b      	lsrs	r3, r3, #2
 8008958:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800895a:	8afa      	ldrh	r2, [r7, #22]
 800895c:	6a3b      	ldr	r3, [r7, #32]
 800895e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008962:	691b      	ldr	r3, [r3, #16]
 8008964:	b29b      	uxth	r3, r3
 8008966:	429a      	cmp	r2, r3
 8008968:	d90a      	bls.n	8008980 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	699b      	ldr	r3, [r3, #24]
 800896e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	619a      	str	r2, [r3, #24]
        }
        break;
 8008976:	e003      	b.n	8008980 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8008978:	bf00      	nop
 800897a:	e002      	b.n	8008982 <USB_HC_StartXfer+0x25e>
        break;
 800897c:	bf00      	nop
 800897e:	e000      	b.n	8008982 <USB_HC_StartXfer+0x25e>
        break;
 8008980:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	68d9      	ldr	r1, [r3, #12]
 8008986:	68bb      	ldr	r3, [r7, #8]
 8008988:	785a      	ldrb	r2, [r3, #1]
 800898a:	68bb      	ldr	r3, [r7, #8]
 800898c:	695b      	ldr	r3, [r3, #20]
 800898e:	b29b      	uxth	r3, r3
 8008990:	2000      	movs	r0, #0
 8008992:	9000      	str	r0, [sp, #0]
 8008994:	68f8      	ldr	r0, [r7, #12]
 8008996:	f7ff fb31 	bl	8007ffc <USB_WritePacket>
  }

  return HAL_OK;
 800899a:	2300      	movs	r3, #0
}
 800899c:	4618      	mov	r0, r3
 800899e:	3728      	adds	r7, #40	; 0x28
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd80      	pop	{r7, pc}
 80089a4:	1ff80000 	.word	0x1ff80000

080089a8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80089a8:	b480      	push	{r7}
 80089aa:	b085      	sub	sp, #20
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80089ba:	695b      	ldr	r3, [r3, #20]
 80089bc:	b29b      	uxth	r3, r3
}
 80089be:	4618      	mov	r0, r3
 80089c0:	3714      	adds	r7, #20
 80089c2:	46bd      	mov	sp, r7
 80089c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c8:	4770      	bx	lr

080089ca <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80089ca:	b480      	push	{r7}
 80089cc:	b089      	sub	sp, #36	; 0x24
 80089ce:	af00      	add	r7, sp, #0
 80089d0:	6078      	str	r0, [r7, #4]
 80089d2:	460b      	mov	r3, r1
 80089d4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80089da:	78fb      	ldrb	r3, [r7, #3]
 80089dc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80089de:	2300      	movs	r3, #0
 80089e0:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80089e2:	69bb      	ldr	r3, [r7, #24]
 80089e4:	015a      	lsls	r2, r3, #5
 80089e6:	69fb      	ldr	r3, [r7, #28]
 80089e8:	4413      	add	r3, r2
 80089ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	0c9b      	lsrs	r3, r3, #18
 80089f2:	f003 0303 	and.w	r3, r3, #3
 80089f6:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80089f8:	69bb      	ldr	r3, [r7, #24]
 80089fa:	015a      	lsls	r2, r3, #5
 80089fc:	69fb      	ldr	r3, [r7, #28]
 80089fe:	4413      	add	r3, r2
 8008a00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	0fdb      	lsrs	r3, r3, #31
 8008a08:	f003 0301 	and.w	r3, r3, #1
 8008a0c:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	689b      	ldr	r3, [r3, #8]
 8008a12:	f003 0320 	and.w	r3, r3, #32
 8008a16:	2b20      	cmp	r3, #32
 8008a18:	d104      	bne.n	8008a24 <USB_HC_Halt+0x5a>
 8008a1a:	693b      	ldr	r3, [r7, #16]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d101      	bne.n	8008a24 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8008a20:	2300      	movs	r3, #0
 8008a22:	e0c8      	b.n	8008bb6 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008a24:	697b      	ldr	r3, [r7, #20]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d002      	beq.n	8008a30 <USB_HC_Halt+0x66>
 8008a2a:	697b      	ldr	r3, [r7, #20]
 8008a2c:	2b02      	cmp	r3, #2
 8008a2e:	d163      	bne.n	8008af8 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008a30:	69bb      	ldr	r3, [r7, #24]
 8008a32:	015a      	lsls	r2, r3, #5
 8008a34:	69fb      	ldr	r3, [r7, #28]
 8008a36:	4413      	add	r3, r2
 8008a38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	69ba      	ldr	r2, [r7, #24]
 8008a40:	0151      	lsls	r1, r2, #5
 8008a42:	69fa      	ldr	r2, [r7, #28]
 8008a44:	440a      	add	r2, r1
 8008a46:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008a4a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008a4e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	689b      	ldr	r3, [r3, #8]
 8008a54:	f003 0320 	and.w	r3, r3, #32
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	f040 80ab 	bne.w	8008bb4 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a62:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d133      	bne.n	8008ad2 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008a6a:	69bb      	ldr	r3, [r7, #24]
 8008a6c:	015a      	lsls	r2, r3, #5
 8008a6e:	69fb      	ldr	r3, [r7, #28]
 8008a70:	4413      	add	r3, r2
 8008a72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	69ba      	ldr	r2, [r7, #24]
 8008a7a:	0151      	lsls	r1, r2, #5
 8008a7c:	69fa      	ldr	r2, [r7, #28]
 8008a7e:	440a      	add	r2, r1
 8008a80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008a84:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008a88:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008a8a:	69bb      	ldr	r3, [r7, #24]
 8008a8c:	015a      	lsls	r2, r3, #5
 8008a8e:	69fb      	ldr	r3, [r7, #28]
 8008a90:	4413      	add	r3, r2
 8008a92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	69ba      	ldr	r2, [r7, #24]
 8008a9a:	0151      	lsls	r1, r2, #5
 8008a9c:	69fa      	ldr	r2, [r7, #28]
 8008a9e:	440a      	add	r2, r1
 8008aa0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008aa4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008aa8:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	3301      	adds	r3, #1
 8008aae:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008ab6:	d81d      	bhi.n	8008af4 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008ab8:	69bb      	ldr	r3, [r7, #24]
 8008aba:	015a      	lsls	r2, r3, #5
 8008abc:	69fb      	ldr	r3, [r7, #28]
 8008abe:	4413      	add	r3, r2
 8008ac0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008aca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ace:	d0ec      	beq.n	8008aaa <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008ad0:	e070      	b.n	8008bb4 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008ad2:	69bb      	ldr	r3, [r7, #24]
 8008ad4:	015a      	lsls	r2, r3, #5
 8008ad6:	69fb      	ldr	r3, [r7, #28]
 8008ad8:	4413      	add	r3, r2
 8008ada:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	69ba      	ldr	r2, [r7, #24]
 8008ae2:	0151      	lsls	r1, r2, #5
 8008ae4:	69fa      	ldr	r2, [r7, #28]
 8008ae6:	440a      	add	r2, r1
 8008ae8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008aec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008af0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008af2:	e05f      	b.n	8008bb4 <USB_HC_Halt+0x1ea>
            break;
 8008af4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008af6:	e05d      	b.n	8008bb4 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008af8:	69bb      	ldr	r3, [r7, #24]
 8008afa:	015a      	lsls	r2, r3, #5
 8008afc:	69fb      	ldr	r3, [r7, #28]
 8008afe:	4413      	add	r3, r2
 8008b00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	69ba      	ldr	r2, [r7, #24]
 8008b08:	0151      	lsls	r1, r2, #5
 8008b0a:	69fa      	ldr	r2, [r7, #28]
 8008b0c:	440a      	add	r2, r1
 8008b0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008b12:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008b16:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008b18:	69fb      	ldr	r3, [r7, #28]
 8008b1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008b1e:	691b      	ldr	r3, [r3, #16]
 8008b20:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d133      	bne.n	8008b90 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008b28:	69bb      	ldr	r3, [r7, #24]
 8008b2a:	015a      	lsls	r2, r3, #5
 8008b2c:	69fb      	ldr	r3, [r7, #28]
 8008b2e:	4413      	add	r3, r2
 8008b30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	69ba      	ldr	r2, [r7, #24]
 8008b38:	0151      	lsls	r1, r2, #5
 8008b3a:	69fa      	ldr	r2, [r7, #28]
 8008b3c:	440a      	add	r2, r1
 8008b3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008b42:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008b46:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008b48:	69bb      	ldr	r3, [r7, #24]
 8008b4a:	015a      	lsls	r2, r3, #5
 8008b4c:	69fb      	ldr	r3, [r7, #28]
 8008b4e:	4413      	add	r3, r2
 8008b50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	69ba      	ldr	r2, [r7, #24]
 8008b58:	0151      	lsls	r1, r2, #5
 8008b5a:	69fa      	ldr	r2, [r7, #28]
 8008b5c:	440a      	add	r2, r1
 8008b5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008b66:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	3301      	adds	r3, #1
 8008b6c:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008b74:	d81d      	bhi.n	8008bb2 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008b76:	69bb      	ldr	r3, [r7, #24]
 8008b78:	015a      	lsls	r2, r3, #5
 8008b7a:	69fb      	ldr	r3, [r7, #28]
 8008b7c:	4413      	add	r3, r2
 8008b7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008b88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008b8c:	d0ec      	beq.n	8008b68 <USB_HC_Halt+0x19e>
 8008b8e:	e011      	b.n	8008bb4 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008b90:	69bb      	ldr	r3, [r7, #24]
 8008b92:	015a      	lsls	r2, r3, #5
 8008b94:	69fb      	ldr	r3, [r7, #28]
 8008b96:	4413      	add	r3, r2
 8008b98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	69ba      	ldr	r2, [r7, #24]
 8008ba0:	0151      	lsls	r1, r2, #5
 8008ba2:	69fa      	ldr	r2, [r7, #28]
 8008ba4:	440a      	add	r2, r1
 8008ba6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008baa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008bae:	6013      	str	r3, [r2, #0]
 8008bb0:	e000      	b.n	8008bb4 <USB_HC_Halt+0x1ea>
          break;
 8008bb2:	bf00      	nop
    }
  }

  return HAL_OK;
 8008bb4:	2300      	movs	r3, #0
}
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	3724      	adds	r7, #36	; 0x24
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc0:	4770      	bx	lr
	...

08008bc4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8008bc4:	b480      	push	{r7}
 8008bc6:	b087      	sub	sp, #28
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
 8008bcc:	460b      	mov	r3, r1
 8008bce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8008bd4:	78fb      	ldrb	r3, [r7, #3]
 8008bd6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8008bd8:	2301      	movs	r3, #1
 8008bda:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	04da      	lsls	r2, r3, #19
 8008be0:	4b15      	ldr	r3, [pc, #84]	; (8008c38 <USB_DoPing+0x74>)
 8008be2:	4013      	ands	r3, r2
 8008be4:	693a      	ldr	r2, [r7, #16]
 8008be6:	0151      	lsls	r1, r2, #5
 8008be8:	697a      	ldr	r2, [r7, #20]
 8008bea:	440a      	add	r2, r1
 8008bec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008bf0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008bf4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8008bf6:	693b      	ldr	r3, [r7, #16]
 8008bf8:	015a      	lsls	r2, r3, #5
 8008bfa:	697b      	ldr	r3, [r7, #20]
 8008bfc:	4413      	add	r3, r2
 8008bfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008c0c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008c0e:	68bb      	ldr	r3, [r7, #8]
 8008c10:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008c14:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8008c16:	693b      	ldr	r3, [r7, #16]
 8008c18:	015a      	lsls	r2, r3, #5
 8008c1a:	697b      	ldr	r3, [r7, #20]
 8008c1c:	4413      	add	r3, r2
 8008c1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c22:	461a      	mov	r2, r3
 8008c24:	68bb      	ldr	r3, [r7, #8]
 8008c26:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008c28:	2300      	movs	r3, #0
}
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	371c      	adds	r7, #28
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c34:	4770      	bx	lr
 8008c36:	bf00      	nop
 8008c38:	1ff80000 	.word	0x1ff80000

08008c3c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b088      	sub	sp, #32
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8008c44:	2300      	movs	r3, #0
 8008c46:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f7ff f911 	bl	8007e78 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008c56:	2110      	movs	r1, #16
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	f7ff f96b 	bl	8007f34 <USB_FlushTxFifo>
 8008c5e:	4603      	mov	r3, r0
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d001      	beq.n	8008c68 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8008c64:	2301      	movs	r3, #1
 8008c66:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f7ff f997 	bl	8007f9c <USB_FlushRxFifo>
 8008c6e:	4603      	mov	r3, r0
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d001      	beq.n	8008c78 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8008c74:	2301      	movs	r3, #1
 8008c76:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008c78:	2300      	movs	r3, #0
 8008c7a:	61bb      	str	r3, [r7, #24]
 8008c7c:	e01f      	b.n	8008cbe <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8008c7e:	69bb      	ldr	r3, [r7, #24]
 8008c80:	015a      	lsls	r2, r3, #5
 8008c82:	697b      	ldr	r3, [r7, #20]
 8008c84:	4413      	add	r3, r2
 8008c86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008c8e:	693b      	ldr	r3, [r7, #16]
 8008c90:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008c94:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008c96:	693b      	ldr	r3, [r7, #16]
 8008c98:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008c9c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008c9e:	693b      	ldr	r3, [r7, #16]
 8008ca0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008ca4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008ca6:	69bb      	ldr	r3, [r7, #24]
 8008ca8:	015a      	lsls	r2, r3, #5
 8008caa:	697b      	ldr	r3, [r7, #20]
 8008cac:	4413      	add	r3, r2
 8008cae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cb2:	461a      	mov	r2, r3
 8008cb4:	693b      	ldr	r3, [r7, #16]
 8008cb6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008cb8:	69bb      	ldr	r3, [r7, #24]
 8008cba:	3301      	adds	r3, #1
 8008cbc:	61bb      	str	r3, [r7, #24]
 8008cbe:	69bb      	ldr	r3, [r7, #24]
 8008cc0:	2b0f      	cmp	r3, #15
 8008cc2:	d9dc      	bls.n	8008c7e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	61bb      	str	r3, [r7, #24]
 8008cc8:	e034      	b.n	8008d34 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8008cca:	69bb      	ldr	r3, [r7, #24]
 8008ccc:	015a      	lsls	r2, r3, #5
 8008cce:	697b      	ldr	r3, [r7, #20]
 8008cd0:	4413      	add	r3, r2
 8008cd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008cda:	693b      	ldr	r3, [r7, #16]
 8008cdc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008ce0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8008ce2:	693b      	ldr	r3, [r7, #16]
 8008ce4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008ce8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008cea:	693b      	ldr	r3, [r7, #16]
 8008cec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008cf0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008cf2:	69bb      	ldr	r3, [r7, #24]
 8008cf4:	015a      	lsls	r2, r3, #5
 8008cf6:	697b      	ldr	r3, [r7, #20]
 8008cf8:	4413      	add	r3, r2
 8008cfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cfe:	461a      	mov	r2, r3
 8008d00:	693b      	ldr	r3, [r7, #16]
 8008d02:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	3301      	adds	r3, #1
 8008d08:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008d10:	d80c      	bhi.n	8008d2c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008d12:	69bb      	ldr	r3, [r7, #24]
 8008d14:	015a      	lsls	r2, r3, #5
 8008d16:	697b      	ldr	r3, [r7, #20]
 8008d18:	4413      	add	r3, r2
 8008d1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008d24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008d28:	d0ec      	beq.n	8008d04 <USB_StopHost+0xc8>
 8008d2a:	e000      	b.n	8008d2e <USB_StopHost+0xf2>
        break;
 8008d2c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008d2e:	69bb      	ldr	r3, [r7, #24]
 8008d30:	3301      	adds	r3, #1
 8008d32:	61bb      	str	r3, [r7, #24]
 8008d34:	69bb      	ldr	r3, [r7, #24]
 8008d36:	2b0f      	cmp	r3, #15
 8008d38:	d9c7      	bls.n	8008cca <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8008d3a:	697b      	ldr	r3, [r7, #20]
 8008d3c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008d40:	461a      	mov	r2, r3
 8008d42:	f04f 33ff 	mov.w	r3, #4294967295
 8008d46:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	f04f 32ff 	mov.w	r2, #4294967295
 8008d4e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f7ff f880 	bl	8007e56 <USB_EnableGlobalInt>

  return ret;
 8008d56:	7ffb      	ldrb	r3, [r7, #31]
}
 8008d58:	4618      	mov	r0, r3
 8008d5a:	3720      	adds	r7, #32
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	bd80      	pop	{r7, pc}

08008d60 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8008d64:	4904      	ldr	r1, [pc, #16]	; (8008d78 <MX_FATFS_Init+0x18>)
 8008d66:	4805      	ldr	r0, [pc, #20]	; (8008d7c <MX_FATFS_Init+0x1c>)
 8008d68:	f006 fb36 	bl	800f3d8 <FATFS_LinkDriver>
 8008d6c:	4603      	mov	r3, r0
 8008d6e:	461a      	mov	r2, r3
 8008d70:	4b03      	ldr	r3, [pc, #12]	; (8008d80 <MX_FATFS_Init+0x20>)
 8008d72:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008d74:	bf00      	nop
 8008d76:	bd80      	pop	{r7, pc}
 8008d78:	20001974 	.word	0x20001974
 8008d7c:	0800ffe8 	.word	0x0800ffe8
 8008d80:	20001970 	.word	0x20001970

08008d84 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8008d84:	b480      	push	{r7}
 8008d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8008d88:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d92:	4770      	bx	lr

08008d94 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 8008d94:	b480      	push	{r7}
 8008d96:	b083      	sub	sp, #12
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 8008d9e:	2300      	movs	r3, #0
}
 8008da0:	4618      	mov	r0, r3
 8008da2:	370c      	adds	r7, #12
 8008da4:	46bd      	mov	sp, r7
 8008da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008daa:	4770      	bx	lr

08008dac <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b084      	sub	sp, #16
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	4603      	mov	r3, r0
 8008db4:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 8008db6:	2301      	movs	r3, #1
 8008db8:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 8008dba:	79fb      	ldrb	r3, [r7, #7]
 8008dbc:	4619      	mov	r1, r3
 8008dbe:	4808      	ldr	r0, [pc, #32]	; (8008de0 <USBH_status+0x34>)
 8008dc0:	f000 fe32 	bl	8009a28 <USBH_MSC_UnitIsReady>
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d002      	beq.n	8008dd0 <USBH_status+0x24>
  {
    res = RES_OK;
 8008dca:	2300      	movs	r3, #0
 8008dcc:	73fb      	strb	r3, [r7, #15]
 8008dce:	e001      	b.n	8008dd4 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8008dd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	3710      	adds	r7, #16
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd80      	pop	{r7, pc}
 8008dde:	bf00      	nop
 8008de0:	20001de0 	.word	0x20001de0

08008de4 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b094      	sub	sp, #80	; 0x50
 8008de8:	af02      	add	r7, sp, #8
 8008dea:	60b9      	str	r1, [r7, #8]
 8008dec:	607a      	str	r2, [r7, #4]
 8008dee:	603b      	str	r3, [r7, #0]
 8008df0:	4603      	mov	r3, r0
 8008df2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008df4:	2301      	movs	r3, #1
 8008df6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 8008dfa:	7bf9      	ldrb	r1, [r7, #15]
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	9300      	str	r3, [sp, #0]
 8008e00:	68bb      	ldr	r3, [r7, #8]
 8008e02:	687a      	ldr	r2, [r7, #4]
 8008e04:	4813      	ldr	r0, [pc, #76]	; (8008e54 <USBH_read+0x70>)
 8008e06:	f000 fe59 	bl	8009abc <USBH_MSC_Read>
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d103      	bne.n	8008e18 <USBH_read+0x34>
  {
    res = RES_OK;
 8008e10:	2300      	movs	r3, #0
 8008e12:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008e16:	e017      	b.n	8008e48 <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8008e18:	f107 0210 	add.w	r2, r7, #16
 8008e1c:	7bfb      	ldrb	r3, [r7, #15]
 8008e1e:	4619      	mov	r1, r3
 8008e20:	480c      	ldr	r0, [pc, #48]	; (8008e54 <USBH_read+0x70>)
 8008e22:	f000 fe27 	bl	8009a74 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8008e26:	7f7b      	ldrb	r3, [r7, #29]
 8008e28:	2b3a      	cmp	r3, #58	; 0x3a
 8008e2a:	d005      	beq.n	8008e38 <USBH_read+0x54>
 8008e2c:	2b3a      	cmp	r3, #58	; 0x3a
 8008e2e:	dc07      	bgt.n	8008e40 <USBH_read+0x5c>
 8008e30:	2b04      	cmp	r3, #4
 8008e32:	d001      	beq.n	8008e38 <USBH_read+0x54>
 8008e34:	2b28      	cmp	r3, #40	; 0x28
 8008e36:	d103      	bne.n	8008e40 <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 8008e38:	2303      	movs	r3, #3
 8008e3a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8008e3e:	e003      	b.n	8008e48 <USBH_read+0x64>

    default:
      res = RES_ERROR;
 8008e40:	2301      	movs	r3, #1
 8008e42:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8008e46:	bf00      	nop
    }
  }

  return res;
 8008e48:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	3748      	adds	r7, #72	; 0x48
 8008e50:	46bd      	mov	sp, r7
 8008e52:	bd80      	pop	{r7, pc}
 8008e54:	20001de0 	.word	0x20001de0

08008e58 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b094      	sub	sp, #80	; 0x50
 8008e5c:	af02      	add	r7, sp, #8
 8008e5e:	60b9      	str	r1, [r7, #8]
 8008e60:	607a      	str	r2, [r7, #4]
 8008e62:	603b      	str	r3, [r7, #0]
 8008e64:	4603      	mov	r3, r0
 8008e66:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008e68:	2301      	movs	r3, #1
 8008e6a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 8008e6e:	7bf9      	ldrb	r1, [r7, #15]
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	9300      	str	r3, [sp, #0]
 8008e74:	68bb      	ldr	r3, [r7, #8]
 8008e76:	687a      	ldr	r2, [r7, #4]
 8008e78:	4817      	ldr	r0, [pc, #92]	; (8008ed8 <USBH_write+0x80>)
 8008e7a:	f000 fe88 	bl	8009b8e <USBH_MSC_Write>
 8008e7e:	4603      	mov	r3, r0
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d103      	bne.n	8008e8c <USBH_write+0x34>
  {
    res = RES_OK;
 8008e84:	2300      	movs	r3, #0
 8008e86:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008e8a:	e01f      	b.n	8008ecc <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8008e8c:	f107 0210 	add.w	r2, r7, #16
 8008e90:	7bfb      	ldrb	r3, [r7, #15]
 8008e92:	4619      	mov	r1, r3
 8008e94:	4810      	ldr	r0, [pc, #64]	; (8008ed8 <USBH_write+0x80>)
 8008e96:	f000 fded 	bl	8009a74 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8008e9a:	7f7b      	ldrb	r3, [r7, #29]
 8008e9c:	2b3a      	cmp	r3, #58	; 0x3a
 8008e9e:	d00d      	beq.n	8008ebc <USBH_write+0x64>
 8008ea0:	2b3a      	cmp	r3, #58	; 0x3a
 8008ea2:	dc0f      	bgt.n	8008ec4 <USBH_write+0x6c>
 8008ea4:	2b28      	cmp	r3, #40	; 0x28
 8008ea6:	d009      	beq.n	8008ebc <USBH_write+0x64>
 8008ea8:	2b28      	cmp	r3, #40	; 0x28
 8008eaa:	dc0b      	bgt.n	8008ec4 <USBH_write+0x6c>
 8008eac:	2b04      	cmp	r3, #4
 8008eae:	d005      	beq.n	8008ebc <USBH_write+0x64>
 8008eb0:	2b27      	cmp	r3, #39	; 0x27
 8008eb2:	d107      	bne.n	8008ec4 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 8008eb4:	2302      	movs	r3, #2
 8008eb6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8008eba:	e007      	b.n	8008ecc <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 8008ebc:	2303      	movs	r3, #3
 8008ebe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8008ec2:	e003      	b.n	8008ecc <USBH_write+0x74>

    default:
      res = RES_ERROR;
 8008ec4:	2301      	movs	r3, #1
 8008ec6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8008eca:	bf00      	nop
    }
  }

  return res;
 8008ecc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	3748      	adds	r7, #72	; 0x48
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bd80      	pop	{r7, pc}
 8008ed8:	20001de0 	.word	0x20001de0

08008edc <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b090      	sub	sp, #64	; 0x40
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	603a      	str	r2, [r7, #0]
 8008ee6:	71fb      	strb	r3, [r7, #7]
 8008ee8:	460b      	mov	r3, r1
 8008eea:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8008eec:	2301      	movs	r3, #1
 8008eee:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 8008ef2:	79bb      	ldrb	r3, [r7, #6]
 8008ef4:	2b03      	cmp	r3, #3
 8008ef6:	d852      	bhi.n	8008f9e <USBH_ioctl+0xc2>
 8008ef8:	a201      	add	r2, pc, #4	; (adr r2, 8008f00 <USBH_ioctl+0x24>)
 8008efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008efe:	bf00      	nop
 8008f00:	08008f11 	.word	0x08008f11
 8008f04:	08008f19 	.word	0x08008f19
 8008f08:	08008f43 	.word	0x08008f43
 8008f0c:	08008f6f 	.word	0x08008f6f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8008f10:	2300      	movs	r3, #0
 8008f12:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8008f16:	e045      	b.n	8008fa4 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8008f18:	f107 0208 	add.w	r2, r7, #8
 8008f1c:	79fb      	ldrb	r3, [r7, #7]
 8008f1e:	4619      	mov	r1, r3
 8008f20:	4823      	ldr	r0, [pc, #140]	; (8008fb0 <USBH_ioctl+0xd4>)
 8008f22:	f000 fda7 	bl	8009a74 <USBH_MSC_GetLUNInfo>
 8008f26:	4603      	mov	r3, r0
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d106      	bne.n	8008f3a <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8008f2c:	68fa      	ldr	r2, [r7, #12]
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8008f32:	2300      	movs	r3, #0
 8008f34:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8008f38:	e034      	b.n	8008fa4 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8008f3a:	2301      	movs	r3, #1
 8008f3c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8008f40:	e030      	b.n	8008fa4 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8008f42:	f107 0208 	add.w	r2, r7, #8
 8008f46:	79fb      	ldrb	r3, [r7, #7]
 8008f48:	4619      	mov	r1, r3
 8008f4a:	4819      	ldr	r0, [pc, #100]	; (8008fb0 <USBH_ioctl+0xd4>)
 8008f4c:	f000 fd92 	bl	8009a74 <USBH_MSC_GetLUNInfo>
 8008f50:	4603      	mov	r3, r0
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d107      	bne.n	8008f66 <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 8008f56:	8a3b      	ldrh	r3, [r7, #16]
 8008f58:	461a      	mov	r2, r3
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8008f5e:	2300      	movs	r3, #0
 8008f60:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8008f64:	e01e      	b.n	8008fa4 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8008f66:	2301      	movs	r3, #1
 8008f68:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8008f6c:	e01a      	b.n	8008fa4 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8008f6e:	f107 0208 	add.w	r2, r7, #8
 8008f72:	79fb      	ldrb	r3, [r7, #7]
 8008f74:	4619      	mov	r1, r3
 8008f76:	480e      	ldr	r0, [pc, #56]	; (8008fb0 <USBH_ioctl+0xd4>)
 8008f78:	f000 fd7c 	bl	8009a74 <USBH_MSC_GetLUNInfo>
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d109      	bne.n	8008f96 <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 8008f82:	8a3b      	ldrh	r3, [r7, #16]
 8008f84:	0a5b      	lsrs	r3, r3, #9
 8008f86:	b29b      	uxth	r3, r3
 8008f88:	461a      	mov	r2, r3
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8008f8e:	2300      	movs	r3, #0
 8008f90:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8008f94:	e006      	b.n	8008fa4 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8008f96:	2301      	movs	r3, #1
 8008f98:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8008f9c:	e002      	b.n	8008fa4 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 8008f9e:	2304      	movs	r3, #4
 8008fa0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 8008fa4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8008fa8:	4618      	mov	r0, r3
 8008faa:	3740      	adds	r7, #64	; 0x40
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bd80      	pop	{r7, pc}
 8008fb0:	20001de0 	.word	0x20001de0

08008fb4 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008fb4:	b590      	push	{r4, r7, lr}
 8008fb6:	b089      	sub	sp, #36	; 0x24
 8008fb8:	af04      	add	r7, sp, #16
 8008fba:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008fc2:	7919      	ldrb	r1, [r3, #4]
 8008fc4:	2350      	movs	r3, #80	; 0x50
 8008fc6:	2206      	movs	r2, #6
 8008fc8:	6878      	ldr	r0, [r7, #4]
 8008fca:	f001 fc6b 	bl	800a8a4 <USBH_FindInterface>
 8008fce:	4603      	mov	r3, r0
 8008fd0:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8008fd2:	7bfb      	ldrb	r3, [r7, #15]
 8008fd4:	2bff      	cmp	r3, #255	; 0xff
 8008fd6:	d002      	beq.n	8008fde <USBH_MSC_InterfaceInit+0x2a>
 8008fd8:	7bfb      	ldrb	r3, [r7, #15]
 8008fda:	2b01      	cmp	r3, #1
 8008fdc:	d901      	bls.n	8008fe2 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008fde:	2302      	movs	r3, #2
 8008fe0:	e106      	b.n	80091f0 <USBH_MSC_InterfaceInit+0x23c>
  }

  status = USBH_SelectInterface(phost, interface);
 8008fe2:	7bfb      	ldrb	r3, [r7, #15]
 8008fe4:	4619      	mov	r1, r3
 8008fe6:	6878      	ldr	r0, [r7, #4]
 8008fe8:	f001 fc40 	bl	800a86c <USBH_SelectInterface>
 8008fec:	4603      	mov	r3, r0
 8008fee:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8008ff0:	7bbb      	ldrb	r3, [r7, #14]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d001      	beq.n	8008ffa <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 8008ff6:	2302      	movs	r3, #2
 8008ff8:	e0fa      	b.n	80091f0 <USBH_MSC_InterfaceInit+0x23c>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8009000:	f44f 7080 	mov.w	r0, #256	; 0x100
 8009004:	f006 fdf6 	bl	800fbf4 <malloc>
 8009008:	4603      	mov	r3, r0
 800900a:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009012:	69db      	ldr	r3, [r3, #28]
 8009014:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 8009016:	68bb      	ldr	r3, [r7, #8]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d101      	bne.n	8009020 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 800901c:	2302      	movs	r3, #2
 800901e:	e0e7      	b.n	80091f0 <USBH_MSC_InterfaceInit+0x23c>
  }

  /* Initialize msc handler */
  (void)USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8009020:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009024:	2100      	movs	r1, #0
 8009026:	68b8      	ldr	r0, [r7, #8]
 8009028:	f006 fea0 	bl	800fd6c <memset>

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800902c:	7bfb      	ldrb	r3, [r7, #15]
 800902e:	687a      	ldr	r2, [r7, #4]
 8009030:	211a      	movs	r1, #26
 8009032:	fb01 f303 	mul.w	r3, r1, r3
 8009036:	4413      	add	r3, r2
 8009038:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800903c:	781b      	ldrb	r3, [r3, #0]
 800903e:	b25b      	sxtb	r3, r3
 8009040:	2b00      	cmp	r3, #0
 8009042:	da16      	bge.n	8009072 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8009044:	7bfb      	ldrb	r3, [r7, #15]
 8009046:	687a      	ldr	r2, [r7, #4]
 8009048:	211a      	movs	r1, #26
 800904a:	fb01 f303 	mul.w	r3, r1, r3
 800904e:	4413      	add	r3, r2
 8009050:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009054:	781a      	ldrb	r2, [r3, #0]
 8009056:	68bb      	ldr	r3, [r7, #8]
 8009058:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800905a:	7bfb      	ldrb	r3, [r7, #15]
 800905c:	687a      	ldr	r2, [r7, #4]
 800905e:	211a      	movs	r1, #26
 8009060:	fb01 f303 	mul.w	r3, r1, r3
 8009064:	4413      	add	r3, r2
 8009066:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800906a:	881a      	ldrh	r2, [r3, #0]
 800906c:	68bb      	ldr	r3, [r7, #8]
 800906e:	815a      	strh	r2, [r3, #10]
 8009070:	e015      	b.n	800909e <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8009072:	7bfb      	ldrb	r3, [r7, #15]
 8009074:	687a      	ldr	r2, [r7, #4]
 8009076:	211a      	movs	r1, #26
 8009078:	fb01 f303 	mul.w	r3, r1, r3
 800907c:	4413      	add	r3, r2
 800907e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009082:	781a      	ldrb	r2, [r3, #0]
 8009084:	68bb      	ldr	r3, [r7, #8]
 8009086:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009088:	7bfb      	ldrb	r3, [r7, #15]
 800908a:	687a      	ldr	r2, [r7, #4]
 800908c:	211a      	movs	r1, #26
 800908e:	fb01 f303 	mul.w	r3, r1, r3
 8009092:	4413      	add	r3, r2
 8009094:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009098:	881a      	ldrh	r2, [r3, #0]
 800909a:	68bb      	ldr	r3, [r7, #8]
 800909c:	811a      	strh	r2, [r3, #8]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800909e:	7bfb      	ldrb	r3, [r7, #15]
 80090a0:	687a      	ldr	r2, [r7, #4]
 80090a2:	211a      	movs	r1, #26
 80090a4:	fb01 f303 	mul.w	r3, r1, r3
 80090a8:	4413      	add	r3, r2
 80090aa:	f203 3356 	addw	r3, r3, #854	; 0x356
 80090ae:	781b      	ldrb	r3, [r3, #0]
 80090b0:	b25b      	sxtb	r3, r3
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	da16      	bge.n	80090e4 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 80090b6:	7bfb      	ldrb	r3, [r7, #15]
 80090b8:	687a      	ldr	r2, [r7, #4]
 80090ba:	211a      	movs	r1, #26
 80090bc:	fb01 f303 	mul.w	r3, r1, r3
 80090c0:	4413      	add	r3, r2
 80090c2:	f203 3356 	addw	r3, r3, #854	; 0x356
 80090c6:	781a      	ldrb	r2, [r3, #0]
 80090c8:	68bb      	ldr	r3, [r7, #8]
 80090ca:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80090cc:	7bfb      	ldrb	r3, [r7, #15]
 80090ce:	687a      	ldr	r2, [r7, #4]
 80090d0:	211a      	movs	r1, #26
 80090d2:	fb01 f303 	mul.w	r3, r1, r3
 80090d6:	4413      	add	r3, r2
 80090d8:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80090dc:	881a      	ldrh	r2, [r3, #0]
 80090de:	68bb      	ldr	r3, [r7, #8]
 80090e0:	815a      	strh	r2, [r3, #10]
 80090e2:	e015      	b.n	8009110 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 80090e4:	7bfb      	ldrb	r3, [r7, #15]
 80090e6:	687a      	ldr	r2, [r7, #4]
 80090e8:	211a      	movs	r1, #26
 80090ea:	fb01 f303 	mul.w	r3, r1, r3
 80090ee:	4413      	add	r3, r2
 80090f0:	f203 3356 	addw	r3, r3, #854	; 0x356
 80090f4:	781a      	ldrb	r2, [r3, #0]
 80090f6:	68bb      	ldr	r3, [r7, #8]
 80090f8:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80090fa:	7bfb      	ldrb	r3, [r7, #15]
 80090fc:	687a      	ldr	r2, [r7, #4]
 80090fe:	211a      	movs	r1, #26
 8009100:	fb01 f303 	mul.w	r3, r1, r3
 8009104:	4413      	add	r3, r2
 8009106:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800910a:	881a      	ldrh	r2, [r3, #0]
 800910c:	68bb      	ldr	r3, [r7, #8]
 800910e:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8009110:	68bb      	ldr	r3, [r7, #8]
 8009112:	2200      	movs	r2, #0
 8009114:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 8009116:	68bb      	ldr	r3, [r7, #8]
 8009118:	2200      	movs	r2, #0
 800911a:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	2200      	movs	r2, #0
 8009120:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8009122:	68bb      	ldr	r3, [r7, #8]
 8009124:	799b      	ldrb	r3, [r3, #6]
 8009126:	4619      	mov	r1, r3
 8009128:	6878      	ldr	r0, [r7, #4]
 800912a:	f002 fed8 	bl	800bede <USBH_AllocPipe>
 800912e:	4603      	mov	r3, r0
 8009130:	461a      	mov	r2, r3
 8009132:	68bb      	ldr	r3, [r7, #8]
 8009134:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8009136:	68bb      	ldr	r3, [r7, #8]
 8009138:	79db      	ldrb	r3, [r3, #7]
 800913a:	4619      	mov	r1, r3
 800913c:	6878      	ldr	r0, [r7, #4]
 800913e:	f002 fece 	bl	800bede <USBH_AllocPipe>
 8009142:	4603      	mov	r3, r0
 8009144:	461a      	mov	r2, r3
 8009146:	68bb      	ldr	r3, [r7, #8]
 8009148:	711a      	strb	r2, [r3, #4]

  (void)USBH_MSC_BOT_Init(phost);
 800914a:	6878      	ldr	r0, [r7, #4]
 800914c:	f000 fdc4 	bl	8009cd8 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  if ((MSC_Handle->OutEp != 0U) && (MSC_Handle->OutEpSize != 0U))
 8009150:	68bb      	ldr	r3, [r7, #8]
 8009152:	799b      	ldrb	r3, [r3, #6]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d01e      	beq.n	8009196 <USBH_MSC_InterfaceInit+0x1e2>
 8009158:	68bb      	ldr	r3, [r7, #8]
 800915a:	891b      	ldrh	r3, [r3, #8]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d01a      	beq.n	8009196 <USBH_MSC_InterfaceInit+0x1e2>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 8009160:	68bb      	ldr	r3, [r7, #8]
 8009162:	7959      	ldrb	r1, [r3, #5]
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	7998      	ldrb	r0, [r3, #6]
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009174:	68ba      	ldr	r2, [r7, #8]
 8009176:	8912      	ldrh	r2, [r2, #8]
 8009178:	9202      	str	r2, [sp, #8]
 800917a:	2202      	movs	r2, #2
 800917c:	9201      	str	r2, [sp, #4]
 800917e:	9300      	str	r3, [sp, #0]
 8009180:	4623      	mov	r3, r4
 8009182:	4602      	mov	r2, r0
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	f002 fe7b 	bl	800be80 <USBH_OpenPipe>
 800918a:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 800918c:	68bb      	ldr	r3, [r7, #8]
 800918e:	79db      	ldrb	r3, [r3, #7]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d02c      	beq.n	80091ee <USBH_MSC_InterfaceInit+0x23a>
 8009194:	e001      	b.n	800919a <USBH_MSC_InterfaceInit+0x1e6>
    return USBH_NOT_SUPPORTED;
 8009196:	2303      	movs	r3, #3
 8009198:	e02a      	b.n	80091f0 <USBH_MSC_InterfaceInit+0x23c>
  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 800919a:	68bb      	ldr	r3, [r7, #8]
 800919c:	895b      	ldrh	r3, [r3, #10]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d025      	beq.n	80091ee <USBH_MSC_InterfaceInit+0x23a>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 80091a2:	68bb      	ldr	r3, [r7, #8]
 80091a4:	7919      	ldrb	r1, [r3, #4]
 80091a6:	68bb      	ldr	r3, [r7, #8]
 80091a8:	79d8      	ldrb	r0, [r3, #7]
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80091b6:	68ba      	ldr	r2, [r7, #8]
 80091b8:	8952      	ldrh	r2, [r2, #10]
 80091ba:	9202      	str	r2, [sp, #8]
 80091bc:	2202      	movs	r2, #2
 80091be:	9201      	str	r2, [sp, #4]
 80091c0:	9300      	str	r3, [sp, #0]
 80091c2:	4623      	mov	r3, r4
 80091c4:	4602      	mov	r2, r0
 80091c6:	6878      	ldr	r0, [r7, #4]
 80091c8:	f002 fe5a 	bl	800be80 <USBH_OpenPipe>
 80091cc:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 80091ce:	68bb      	ldr	r3, [r7, #8]
 80091d0:	791b      	ldrb	r3, [r3, #4]
 80091d2:	2200      	movs	r2, #0
 80091d4:	4619      	mov	r1, r3
 80091d6:	6878      	ldr	r0, [r7, #4]
 80091d8:	f006 fc58 	bl	800fa8c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 80091dc:	68bb      	ldr	r3, [r7, #8]
 80091de:	795b      	ldrb	r3, [r3, #5]
 80091e0:	2200      	movs	r2, #0
 80091e2:	4619      	mov	r1, r3
 80091e4:	6878      	ldr	r0, [r7, #4]
 80091e6:	f006 fc51 	bl	800fa8c <USBH_LL_SetToggle>

  return USBH_OK;
 80091ea:	2300      	movs	r3, #0
 80091ec:	e000      	b.n	80091f0 <USBH_MSC_InterfaceInit+0x23c>
    return USBH_NOT_SUPPORTED;
 80091ee:	2303      	movs	r3, #3
}
 80091f0:	4618      	mov	r0, r3
 80091f2:	3714      	adds	r7, #20
 80091f4:	46bd      	mov	sp, r7
 80091f6:	bd90      	pop	{r4, r7, pc}

080091f8 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b084      	sub	sp, #16
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009206:	69db      	ldr	r3, [r3, #28]
 8009208:	60fb      	str	r3, [r7, #12]

  if ((MSC_Handle->OutPipe) != 0U)
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	795b      	ldrb	r3, [r3, #5]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d00e      	beq.n	8009230 <USBH_MSC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	795b      	ldrb	r3, [r3, #5]
 8009216:	4619      	mov	r1, r3
 8009218:	6878      	ldr	r0, [r7, #4]
 800921a:	f002 fe50 	bl	800bebe <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->OutPipe);
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	795b      	ldrb	r3, [r3, #5]
 8009222:	4619      	mov	r1, r3
 8009224:	6878      	ldr	r0, [r7, #4]
 8009226:	f002 fe7b 	bl	800bf20 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	2200      	movs	r2, #0
 800922e:	715a      	strb	r2, [r3, #5]
  }

  if ((MSC_Handle->InPipe != 0U))
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	791b      	ldrb	r3, [r3, #4]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d00e      	beq.n	8009256 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	791b      	ldrb	r3, [r3, #4]
 800923c:	4619      	mov	r1, r3
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	f002 fe3d 	bl	800bebe <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->InPipe);
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	791b      	ldrb	r3, [r3, #4]
 8009248:	4619      	mov	r1, r3
 800924a:	6878      	ldr	r0, [r7, #4]
 800924c:	f002 fe68 	bl	800bf20 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	2200      	movs	r2, #0
 8009254:	711a      	strb	r2, [r3, #4]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800925c:	69db      	ldr	r3, [r3, #28]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d00b      	beq.n	800927a <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009268:	69db      	ldr	r3, [r3, #28]
 800926a:	4618      	mov	r0, r3
 800926c:	f006 fcca 	bl	800fc04 <free>
    phost->pActiveClass->pData = 0U;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009276:	2200      	movs	r2, #0
 8009278:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800927a:	2300      	movs	r3, #0
}
 800927c:	4618      	mov	r0, r3
 800927e:	3710      	adds	r7, #16
 8009280:	46bd      	mov	sp, r7
 8009282:	bd80      	pop	{r7, pc}

08009284 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b084      	sub	sp, #16
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009292:	69db      	ldr	r3, [r3, #28]
 8009294:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009296:	2301      	movs	r3, #1
 8009298:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 800929a:	68bb      	ldr	r3, [r7, #8]
 800929c:	7b9b      	ldrb	r3, [r3, #14]
 800929e:	2b03      	cmp	r3, #3
 80092a0:	d041      	beq.n	8009326 <USBH_MSC_ClassRequest+0xa2>
 80092a2:	2b03      	cmp	r3, #3
 80092a4:	dc4b      	bgt.n	800933e <USBH_MSC_ClassRequest+0xba>
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d001      	beq.n	80092ae <USBH_MSC_ClassRequest+0x2a>
 80092aa:	2b02      	cmp	r3, #2
 80092ac:	d147      	bne.n	800933e <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 80092ae:	68bb      	ldr	r3, [r7, #8]
 80092b0:	4619      	mov	r1, r3
 80092b2:	6878      	ldr	r0, [r7, #4]
 80092b4:	f000 fcf1 	bl	8009c9a <USBH_MSC_BOT_REQ_GetMaxLUN>
 80092b8:	4603      	mov	r3, r0
 80092ba:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considered as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 80092bc:	7bfb      	ldrb	r3, [r7, #15]
 80092be:	2b03      	cmp	r3, #3
 80092c0:	d104      	bne.n	80092cc <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 80092c2:	68bb      	ldr	r3, [r7, #8]
 80092c4:	2200      	movs	r2, #0
 80092c6:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 80092c8:	2300      	movs	r3, #0
 80092ca:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 80092cc:	7bfb      	ldrb	r3, [r7, #15]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d137      	bne.n	8009342 <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 80092d2:	68bb      	ldr	r3, [r7, #8]
 80092d4:	781b      	ldrb	r3, [r3, #0]
 80092d6:	2b02      	cmp	r3, #2
 80092d8:	d804      	bhi.n	80092e4 <USBH_MSC_ClassRequest+0x60>
 80092da:	68bb      	ldr	r3, [r7, #8]
 80092dc:	781b      	ldrb	r3, [r3, #0]
 80092de:	3301      	adds	r3, #1
 80092e0:	b2da      	uxtb	r2, r3
 80092e2:	e000      	b.n	80092e6 <USBH_MSC_ClassRequest+0x62>
 80092e4:	2202      	movs	r2, #2
 80092e6:	68bb      	ldr	r3, [r7, #8]
 80092e8:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 80092ea:	2300      	movs	r3, #0
 80092ec:	73bb      	strb	r3, [r7, #14]
 80092ee:	e014      	b.n	800931a <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 80092f0:	7bbb      	ldrb	r3, [r7, #14]
 80092f2:	68ba      	ldr	r2, [r7, #8]
 80092f4:	2134      	movs	r1, #52	; 0x34
 80092f6:	fb01 f303 	mul.w	r3, r1, r3
 80092fa:	4413      	add	r3, r2
 80092fc:	3392      	adds	r3, #146	; 0x92
 80092fe:	2202      	movs	r2, #2
 8009300:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 8009302:	7bbb      	ldrb	r3, [r7, #14]
 8009304:	68ba      	ldr	r2, [r7, #8]
 8009306:	2134      	movs	r1, #52	; 0x34
 8009308:	fb01 f303 	mul.w	r3, r1, r3
 800930c:	4413      	add	r3, r2
 800930e:	33c1      	adds	r3, #193	; 0xc1
 8009310:	2200      	movs	r2, #0
 8009312:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8009314:	7bbb      	ldrb	r3, [r7, #14]
 8009316:	3301      	adds	r3, #1
 8009318:	73bb      	strb	r3, [r7, #14]
 800931a:	68bb      	ldr	r3, [r7, #8]
 800931c:	781b      	ldrb	r3, [r3, #0]
 800931e:	7bba      	ldrb	r2, [r7, #14]
 8009320:	429a      	cmp	r2, r3
 8009322:	d3e5      	bcc.n	80092f0 <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 8009324:	e00d      	b.n	8009342 <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8009326:	2100      	movs	r1, #0
 8009328:	6878      	ldr	r0, [r7, #4]
 800932a:	f002 f888 	bl	800b43e <USBH_ClrFeature>
 800932e:	4603      	mov	r3, r0
 8009330:	2b00      	cmp	r3, #0
 8009332:	d108      	bne.n	8009346 <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8009334:	68bb      	ldr	r3, [r7, #8]
 8009336:	7bda      	ldrb	r2, [r3, #15]
 8009338:	68bb      	ldr	r3, [r7, #8]
 800933a:	739a      	strb	r2, [r3, #14]
      }
      break;
 800933c:	e003      	b.n	8009346 <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 800933e:	bf00      	nop
 8009340:	e002      	b.n	8009348 <USBH_MSC_ClassRequest+0xc4>
      break;
 8009342:	bf00      	nop
 8009344:	e000      	b.n	8009348 <USBH_MSC_ClassRequest+0xc4>
      break;
 8009346:	bf00      	nop
  }

  return status;
 8009348:	7bfb      	ldrb	r3, [r7, #15]
}
 800934a:	4618      	mov	r0, r3
 800934c:	3710      	adds	r7, #16
 800934e:	46bd      	mov	sp, r7
 8009350:	bd80      	pop	{r7, pc}
	...

08009354 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8009354:	b580      	push	{r7, lr}
 8009356:	b086      	sub	sp, #24
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009362:	69db      	ldr	r3, [r3, #28]
 8009364:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 8009366:	2301      	movs	r3, #1
 8009368:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 800936a:	2301      	movs	r3, #1
 800936c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 800936e:	2301      	movs	r3, #1
 8009370:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 8009372:	693b      	ldr	r3, [r7, #16]
 8009374:	7b1b      	ldrb	r3, [r3, #12]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d003      	beq.n	8009382 <USBH_MSC_Process+0x2e>
 800937a:	2b01      	cmp	r3, #1
 800937c:	f000 8271 	beq.w	8009862 <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 8009380:	e272      	b.n	8009868 <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 8009382:	693b      	ldr	r3, [r7, #16]
 8009384:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 8009388:	693b      	ldr	r3, [r7, #16]
 800938a:	781b      	ldrb	r3, [r3, #0]
 800938c:	b29b      	uxth	r3, r3
 800938e:	429a      	cmp	r2, r3
 8009390:	f080 824f 	bcs.w	8009832 <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8009394:	693b      	ldr	r3, [r7, #16]
 8009396:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800939a:	4619      	mov	r1, r3
 800939c:	693a      	ldr	r2, [r7, #16]
 800939e:	2334      	movs	r3, #52	; 0x34
 80093a0:	fb01 f303 	mul.w	r3, r1, r3
 80093a4:	4413      	add	r3, r2
 80093a6:	3391      	adds	r3, #145	; 0x91
 80093a8:	2201      	movs	r2, #1
 80093aa:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 80093ac:	693b      	ldr	r3, [r7, #16]
 80093ae:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80093b2:	4619      	mov	r1, r3
 80093b4:	693a      	ldr	r2, [r7, #16]
 80093b6:	2334      	movs	r3, #52	; 0x34
 80093b8:	fb01 f303 	mul.w	r3, r1, r3
 80093bc:	4413      	add	r3, r2
 80093be:	3390      	adds	r3, #144	; 0x90
 80093c0:	781b      	ldrb	r3, [r3, #0]
 80093c2:	2b08      	cmp	r3, #8
 80093c4:	f200 8243 	bhi.w	800984e <USBH_MSC_Process+0x4fa>
 80093c8:	a201      	add	r2, pc, #4	; (adr r2, 80093d0 <USBH_MSC_Process+0x7c>)
 80093ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093ce:	bf00      	nop
 80093d0:	080093f5 	.word	0x080093f5
 80093d4:	0800984f 	.word	0x0800984f
 80093d8:	080094bd 	.word	0x080094bd
 80093dc:	08009641 	.word	0x08009641
 80093e0:	0800941b 	.word	0x0800941b
 80093e4:	0800970d 	.word	0x0800970d
 80093e8:	0800984f 	.word	0x0800984f
 80093ec:	0800984f 	.word	0x0800984f
 80093f0:	08009821 	.word	0x08009821
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 80093f4:	693b      	ldr	r3, [r7, #16]
 80093f6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80093fa:	4619      	mov	r1, r3
 80093fc:	693a      	ldr	r2, [r7, #16]
 80093fe:	2334      	movs	r3, #52	; 0x34
 8009400:	fb01 f303 	mul.w	r3, r1, r3
 8009404:	4413      	add	r3, r2
 8009406:	3390      	adds	r3, #144	; 0x90
 8009408:	2204      	movs	r2, #4
 800940a:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8009412:	693b      	ldr	r3, [r7, #16]
 8009414:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 8009418:	e222      	b.n	8009860 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 800941a:	693b      	ldr	r3, [r7, #16]
 800941c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009420:	b2d9      	uxtb	r1, r3
 8009422:	693b      	ldr	r3, [r7, #16]
 8009424:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009428:	461a      	mov	r2, r3
 800942a:	2334      	movs	r3, #52	; 0x34
 800942c:	fb02 f303 	mul.w	r3, r2, r3
 8009430:	3398      	adds	r3, #152	; 0x98
 8009432:	693a      	ldr	r2, [r7, #16]
 8009434:	4413      	add	r3, r2
 8009436:	3307      	adds	r3, #7
 8009438:	461a      	mov	r2, r3
 800943a:	6878      	ldr	r0, [r7, #4]
 800943c:	f000 ff6a 	bl	800a314 <USBH_MSC_SCSI_Inquiry>
 8009440:	4603      	mov	r3, r0
 8009442:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8009444:	7bfb      	ldrb	r3, [r7, #15]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d10b      	bne.n	8009462 <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800944a:	693b      	ldr	r3, [r7, #16]
 800944c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009450:	4619      	mov	r1, r3
 8009452:	693a      	ldr	r2, [r7, #16]
 8009454:	2334      	movs	r3, #52	; 0x34
 8009456:	fb01 f303 	mul.w	r3, r1, r3
 800945a:	4413      	add	r3, r2
 800945c:	3390      	adds	r3, #144	; 0x90
 800945e:	2202      	movs	r2, #2
 8009460:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 8009462:	7bfb      	ldrb	r3, [r7, #15]
 8009464:	2b02      	cmp	r3, #2
 8009466:	d10c      	bne.n	8009482 <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8009468:	693b      	ldr	r3, [r7, #16]
 800946a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800946e:	4619      	mov	r1, r3
 8009470:	693a      	ldr	r2, [r7, #16]
 8009472:	2334      	movs	r3, #52	; 0x34
 8009474:	fb01 f303 	mul.w	r3, r1, r3
 8009478:	4413      	add	r3, r2
 800947a:	3390      	adds	r3, #144	; 0x90
 800947c:	2205      	movs	r2, #5
 800947e:	701a      	strb	r2, [r3, #0]
            break;
 8009480:	e1e7      	b.n	8009852 <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009482:	7bfb      	ldrb	r3, [r7, #15]
 8009484:	2b04      	cmp	r3, #4
 8009486:	f040 81e4 	bne.w	8009852 <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800948a:	693b      	ldr	r3, [r7, #16]
 800948c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009490:	4619      	mov	r1, r3
 8009492:	693a      	ldr	r2, [r7, #16]
 8009494:	2334      	movs	r3, #52	; 0x34
 8009496:	fb01 f303 	mul.w	r3, r1, r3
 800949a:	4413      	add	r3, r2
 800949c:	3390      	adds	r3, #144	; 0x90
 800949e:	2201      	movs	r2, #1
 80094a0:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80094a2:	693b      	ldr	r3, [r7, #16]
 80094a4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80094a8:	4619      	mov	r1, r3
 80094aa:	693a      	ldr	r2, [r7, #16]
 80094ac:	2334      	movs	r3, #52	; 0x34
 80094ae:	fb01 f303 	mul.w	r3, r1, r3
 80094b2:	4413      	add	r3, r2
 80094b4:	3391      	adds	r3, #145	; 0x91
 80094b6:	2202      	movs	r2, #2
 80094b8:	701a      	strb	r2, [r3, #0]
            break;
 80094ba:	e1ca      	b.n	8009852 <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 80094bc:	693b      	ldr	r3, [r7, #16]
 80094be:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80094c2:	b2db      	uxtb	r3, r3
 80094c4:	4619      	mov	r1, r3
 80094c6:	6878      	ldr	r0, [r7, #4]
 80094c8:	f000 fe66 	bl	800a198 <USBH_MSC_SCSI_TestUnitReady>
 80094cc:	4603      	mov	r3, r0
 80094ce:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 80094d0:	7bbb      	ldrb	r3, [r7, #14]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d149      	bne.n	800956a <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 80094d6:	693b      	ldr	r3, [r7, #16]
 80094d8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80094dc:	4619      	mov	r1, r3
 80094de:	693a      	ldr	r2, [r7, #16]
 80094e0:	2334      	movs	r3, #52	; 0x34
 80094e2:	fb01 f303 	mul.w	r3, r1, r3
 80094e6:	4413      	add	r3, r2
 80094e8:	3392      	adds	r3, #146	; 0x92
 80094ea:	781b      	ldrb	r3, [r3, #0]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d00c      	beq.n	800950a <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 80094f0:	693b      	ldr	r3, [r7, #16]
 80094f2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80094f6:	4619      	mov	r1, r3
 80094f8:	693a      	ldr	r2, [r7, #16]
 80094fa:	2334      	movs	r3, #52	; 0x34
 80094fc:	fb01 f303 	mul.w	r3, r1, r3
 8009500:	4413      	add	r3, r2
 8009502:	33c1      	adds	r3, #193	; 0xc1
 8009504:	2201      	movs	r2, #1
 8009506:	701a      	strb	r2, [r3, #0]
 8009508:	e00b      	b.n	8009522 <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800950a:	693b      	ldr	r3, [r7, #16]
 800950c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009510:	4619      	mov	r1, r3
 8009512:	693a      	ldr	r2, [r7, #16]
 8009514:	2334      	movs	r3, #52	; 0x34
 8009516:	fb01 f303 	mul.w	r3, r1, r3
 800951a:	4413      	add	r3, r2
 800951c:	33c1      	adds	r3, #193	; 0xc1
 800951e:	2200      	movs	r2, #0
 8009520:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8009522:	693b      	ldr	r3, [r7, #16]
 8009524:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009528:	4619      	mov	r1, r3
 800952a:	693a      	ldr	r2, [r7, #16]
 800952c:	2334      	movs	r3, #52	; 0x34
 800952e:	fb01 f303 	mul.w	r3, r1, r3
 8009532:	4413      	add	r3, r2
 8009534:	3390      	adds	r3, #144	; 0x90
 8009536:	2203      	movs	r2, #3
 8009538:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800953a:	693b      	ldr	r3, [r7, #16]
 800953c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009540:	4619      	mov	r1, r3
 8009542:	693a      	ldr	r2, [r7, #16]
 8009544:	2334      	movs	r3, #52	; 0x34
 8009546:	fb01 f303 	mul.w	r3, r1, r3
 800954a:	4413      	add	r3, r2
 800954c:	3391      	adds	r3, #145	; 0x91
 800954e:	2200      	movs	r2, #0
 8009550:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 8009552:	693b      	ldr	r3, [r7, #16]
 8009554:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009558:	4619      	mov	r1, r3
 800955a:	693a      	ldr	r2, [r7, #16]
 800955c:	2334      	movs	r3, #52	; 0x34
 800955e:	fb01 f303 	mul.w	r3, r1, r3
 8009562:	4413      	add	r3, r2
 8009564:	3392      	adds	r3, #146	; 0x92
 8009566:	2200      	movs	r2, #0
 8009568:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 800956a:	7bbb      	ldrb	r3, [r7, #14]
 800956c:	2b02      	cmp	r3, #2
 800956e:	d14a      	bne.n	8009606 <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8009570:	693b      	ldr	r3, [r7, #16]
 8009572:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009576:	4619      	mov	r1, r3
 8009578:	693a      	ldr	r2, [r7, #16]
 800957a:	2334      	movs	r3, #52	; 0x34
 800957c:	fb01 f303 	mul.w	r3, r1, r3
 8009580:	4413      	add	r3, r2
 8009582:	3392      	adds	r3, #146	; 0x92
 8009584:	781b      	ldrb	r3, [r3, #0]
 8009586:	2b02      	cmp	r3, #2
 8009588:	d00c      	beq.n	80095a4 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800958a:	693b      	ldr	r3, [r7, #16]
 800958c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009590:	4619      	mov	r1, r3
 8009592:	693a      	ldr	r2, [r7, #16]
 8009594:	2334      	movs	r3, #52	; 0x34
 8009596:	fb01 f303 	mul.w	r3, r1, r3
 800959a:	4413      	add	r3, r2
 800959c:	33c1      	adds	r3, #193	; 0xc1
 800959e:	2201      	movs	r2, #1
 80095a0:	701a      	strb	r2, [r3, #0]
 80095a2:	e00b      	b.n	80095bc <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 80095a4:	693b      	ldr	r3, [r7, #16]
 80095a6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80095aa:	4619      	mov	r1, r3
 80095ac:	693a      	ldr	r2, [r7, #16]
 80095ae:	2334      	movs	r3, #52	; 0x34
 80095b0:	fb01 f303 	mul.w	r3, r1, r3
 80095b4:	4413      	add	r3, r2
 80095b6:	33c1      	adds	r3, #193	; 0xc1
 80095b8:	2200      	movs	r2, #0
 80095ba:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80095bc:	693b      	ldr	r3, [r7, #16]
 80095be:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80095c2:	4619      	mov	r1, r3
 80095c4:	693a      	ldr	r2, [r7, #16]
 80095c6:	2334      	movs	r3, #52	; 0x34
 80095c8:	fb01 f303 	mul.w	r3, r1, r3
 80095cc:	4413      	add	r3, r2
 80095ce:	3390      	adds	r3, #144	; 0x90
 80095d0:	2205      	movs	r2, #5
 80095d2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 80095d4:	693b      	ldr	r3, [r7, #16]
 80095d6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80095da:	4619      	mov	r1, r3
 80095dc:	693a      	ldr	r2, [r7, #16]
 80095de:	2334      	movs	r3, #52	; 0x34
 80095e0:	fb01 f303 	mul.w	r3, r1, r3
 80095e4:	4413      	add	r3, r2
 80095e6:	3391      	adds	r3, #145	; 0x91
 80095e8:	2201      	movs	r2, #1
 80095ea:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 80095ec:	693b      	ldr	r3, [r7, #16]
 80095ee:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80095f2:	4619      	mov	r1, r3
 80095f4:	693a      	ldr	r2, [r7, #16]
 80095f6:	2334      	movs	r3, #52	; 0x34
 80095f8:	fb01 f303 	mul.w	r3, r1, r3
 80095fc:	4413      	add	r3, r2
 80095fe:	3392      	adds	r3, #146	; 0x92
 8009600:	2202      	movs	r2, #2
 8009602:	701a      	strb	r2, [r3, #0]
            break;
 8009604:	e127      	b.n	8009856 <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 8009606:	7bbb      	ldrb	r3, [r7, #14]
 8009608:	2b04      	cmp	r3, #4
 800960a:	f040 8124 	bne.w	8009856 <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800960e:	693b      	ldr	r3, [r7, #16]
 8009610:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009614:	4619      	mov	r1, r3
 8009616:	693a      	ldr	r2, [r7, #16]
 8009618:	2334      	movs	r3, #52	; 0x34
 800961a:	fb01 f303 	mul.w	r3, r1, r3
 800961e:	4413      	add	r3, r2
 8009620:	3390      	adds	r3, #144	; 0x90
 8009622:	2201      	movs	r2, #1
 8009624:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8009626:	693b      	ldr	r3, [r7, #16]
 8009628:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800962c:	4619      	mov	r1, r3
 800962e:	693a      	ldr	r2, [r7, #16]
 8009630:	2334      	movs	r3, #52	; 0x34
 8009632:	fb01 f303 	mul.w	r3, r1, r3
 8009636:	4413      	add	r3, r2
 8009638:	3391      	adds	r3, #145	; 0x91
 800963a:	2202      	movs	r2, #2
 800963c:	701a      	strb	r2, [r3, #0]
            break;
 800963e:	e10a      	b.n	8009856 <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 8009640:	693b      	ldr	r3, [r7, #16]
 8009642:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009646:	b2d9      	uxtb	r1, r3
 8009648:	693b      	ldr	r3, [r7, #16]
 800964a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800964e:	461a      	mov	r2, r3
 8009650:	2334      	movs	r3, #52	; 0x34
 8009652:	fb02 f303 	mul.w	r3, r2, r3
 8009656:	3390      	adds	r3, #144	; 0x90
 8009658:	693a      	ldr	r2, [r7, #16]
 800965a:	4413      	add	r3, r2
 800965c:	3304      	adds	r3, #4
 800965e:	461a      	mov	r2, r3
 8009660:	6878      	ldr	r0, [r7, #4]
 8009662:	f000 fddc 	bl	800a21e <USBH_MSC_SCSI_ReadCapacity>
 8009666:	4603      	mov	r3, r0
 8009668:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800966a:	7bfb      	ldrb	r3, [r7, #15]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d120      	bne.n	80096b2 <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009670:	693b      	ldr	r3, [r7, #16]
 8009672:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009676:	4619      	mov	r1, r3
 8009678:	693a      	ldr	r2, [r7, #16]
 800967a:	2334      	movs	r3, #52	; 0x34
 800967c:	fb01 f303 	mul.w	r3, r1, r3
 8009680:	4413      	add	r3, r2
 8009682:	3390      	adds	r3, #144	; 0x90
 8009684:	2201      	movs	r2, #1
 8009686:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8009688:	693b      	ldr	r3, [r7, #16]
 800968a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800968e:	4619      	mov	r1, r3
 8009690:	693a      	ldr	r2, [r7, #16]
 8009692:	2334      	movs	r3, #52	; 0x34
 8009694:	fb01 f303 	mul.w	r3, r1, r3
 8009698:	4413      	add	r3, r2
 800969a:	3391      	adds	r3, #145	; 0x91
 800969c:	2200      	movs	r2, #0
 800969e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 80096a0:	693b      	ldr	r3, [r7, #16]
 80096a2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80096a6:	3301      	adds	r3, #1
 80096a8:	b29a      	uxth	r2, r3
 80096aa:	693b      	ldr	r3, [r7, #16]
 80096ac:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 80096b0:	e0d3      	b.n	800985a <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 80096b2:	7bfb      	ldrb	r3, [r7, #15]
 80096b4:	2b02      	cmp	r3, #2
 80096b6:	d10c      	bne.n	80096d2 <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80096b8:	693b      	ldr	r3, [r7, #16]
 80096ba:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80096be:	4619      	mov	r1, r3
 80096c0:	693a      	ldr	r2, [r7, #16]
 80096c2:	2334      	movs	r3, #52	; 0x34
 80096c4:	fb01 f303 	mul.w	r3, r1, r3
 80096c8:	4413      	add	r3, r2
 80096ca:	3390      	adds	r3, #144	; 0x90
 80096cc:	2205      	movs	r2, #5
 80096ce:	701a      	strb	r2, [r3, #0]
            break;
 80096d0:	e0c3      	b.n	800985a <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 80096d2:	7bfb      	ldrb	r3, [r7, #15]
 80096d4:	2b04      	cmp	r3, #4
 80096d6:	f040 80c0 	bne.w	800985a <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80096da:	693b      	ldr	r3, [r7, #16]
 80096dc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80096e0:	4619      	mov	r1, r3
 80096e2:	693a      	ldr	r2, [r7, #16]
 80096e4:	2334      	movs	r3, #52	; 0x34
 80096e6:	fb01 f303 	mul.w	r3, r1, r3
 80096ea:	4413      	add	r3, r2
 80096ec:	3390      	adds	r3, #144	; 0x90
 80096ee:	2201      	movs	r2, #1
 80096f0:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80096f2:	693b      	ldr	r3, [r7, #16]
 80096f4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80096f8:	4619      	mov	r1, r3
 80096fa:	693a      	ldr	r2, [r7, #16]
 80096fc:	2334      	movs	r3, #52	; 0x34
 80096fe:	fb01 f303 	mul.w	r3, r1, r3
 8009702:	4413      	add	r3, r2
 8009704:	3391      	adds	r3, #145	; 0x91
 8009706:	2202      	movs	r2, #2
 8009708:	701a      	strb	r2, [r3, #0]
            break;
 800970a:	e0a6      	b.n	800985a <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 800970c:	693b      	ldr	r3, [r7, #16]
 800970e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009712:	b2d9      	uxtb	r1, r3
 8009714:	693b      	ldr	r3, [r7, #16]
 8009716:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800971a:	461a      	mov	r2, r3
 800971c:	2334      	movs	r3, #52	; 0x34
 800971e:	fb02 f303 	mul.w	r3, r2, r3
 8009722:	3398      	adds	r3, #152	; 0x98
 8009724:	693a      	ldr	r2, [r7, #16]
 8009726:	4413      	add	r3, r2
 8009728:	3304      	adds	r3, #4
 800972a:	461a      	mov	r2, r3
 800972c:	6878      	ldr	r0, [r7, #4]
 800972e:	f000 fe96 	bl	800a45e <USBH_MSC_SCSI_RequestSense>
 8009732:	4603      	mov	r3, r0
 8009734:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8009736:	7bfb      	ldrb	r3, [r7, #15]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d145      	bne.n	80097c8 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800973c:	693b      	ldr	r3, [r7, #16]
 800973e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009742:	4619      	mov	r1, r3
 8009744:	693a      	ldr	r2, [r7, #16]
 8009746:	2334      	movs	r3, #52	; 0x34
 8009748:	fb01 f303 	mul.w	r3, r1, r3
 800974c:	4413      	add	r3, r2
 800974e:	339c      	adds	r3, #156	; 0x9c
 8009750:	781b      	ldrb	r3, [r3, #0]
 8009752:	2b06      	cmp	r3, #6
 8009754:	d00c      	beq.n	8009770 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 8009756:	693b      	ldr	r3, [r7, #16]
 8009758:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800975c:	4619      	mov	r1, r3
 800975e:	693a      	ldr	r2, [r7, #16]
 8009760:	2334      	movs	r3, #52	; 0x34
 8009762:	fb01 f303 	mul.w	r3, r1, r3
 8009766:	4413      	add	r3, r2
 8009768:	339c      	adds	r3, #156	; 0x9c
 800976a:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800976c:	2b02      	cmp	r3, #2
 800976e:	d117      	bne.n	80097a0 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8009776:	693b      	ldr	r3, [r7, #16]
 8009778:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800977c:	1ad3      	subs	r3, r2, r3
 800977e:	f242 720f 	movw	r2, #9999	; 0x270f
 8009782:	4293      	cmp	r3, r2
 8009784:	d80c      	bhi.n	80097a0 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8009786:	693b      	ldr	r3, [r7, #16]
 8009788:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800978c:	4619      	mov	r1, r3
 800978e:	693a      	ldr	r2, [r7, #16]
 8009790:	2334      	movs	r3, #52	; 0x34
 8009792:	fb01 f303 	mul.w	r3, r1, r3
 8009796:	4413      	add	r3, r2
 8009798:	3390      	adds	r3, #144	; 0x90
 800979a:	2202      	movs	r2, #2
 800979c:	701a      	strb	r2, [r3, #0]
                  break;
 800979e:	e05f      	b.n	8009860 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80097a0:	693b      	ldr	r3, [r7, #16]
 80097a2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80097a6:	4619      	mov	r1, r3
 80097a8:	693a      	ldr	r2, [r7, #16]
 80097aa:	2334      	movs	r3, #52	; 0x34
 80097ac:	fb01 f303 	mul.w	r3, r1, r3
 80097b0:	4413      	add	r3, r2
 80097b2:	3390      	adds	r3, #144	; 0x90
 80097b4:	2201      	movs	r2, #1
 80097b6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 80097b8:	693b      	ldr	r3, [r7, #16]
 80097ba:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80097be:	3301      	adds	r3, #1
 80097c0:	b29a      	uxth	r2, r3
 80097c2:	693b      	ldr	r3, [r7, #16]
 80097c4:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 80097c8:	7bfb      	ldrb	r3, [r7, #15]
 80097ca:	2b02      	cmp	r3, #2
 80097cc:	d10c      	bne.n	80097e8 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 80097ce:	693b      	ldr	r3, [r7, #16]
 80097d0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80097d4:	4619      	mov	r1, r3
 80097d6:	693a      	ldr	r2, [r7, #16]
 80097d8:	2334      	movs	r3, #52	; 0x34
 80097da:	fb01 f303 	mul.w	r3, r1, r3
 80097de:	4413      	add	r3, r2
 80097e0:	3390      	adds	r3, #144	; 0x90
 80097e2:	2208      	movs	r2, #8
 80097e4:	701a      	strb	r2, [r3, #0]
            break;
 80097e6:	e03a      	b.n	800985e <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 80097e8:	7bfb      	ldrb	r3, [r7, #15]
 80097ea:	2b04      	cmp	r3, #4
 80097ec:	d137      	bne.n	800985e <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80097ee:	693b      	ldr	r3, [r7, #16]
 80097f0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80097f4:	4619      	mov	r1, r3
 80097f6:	693a      	ldr	r2, [r7, #16]
 80097f8:	2334      	movs	r3, #52	; 0x34
 80097fa:	fb01 f303 	mul.w	r3, r1, r3
 80097fe:	4413      	add	r3, r2
 8009800:	3390      	adds	r3, #144	; 0x90
 8009802:	2201      	movs	r2, #1
 8009804:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8009806:	693b      	ldr	r3, [r7, #16]
 8009808:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800980c:	4619      	mov	r1, r3
 800980e:	693a      	ldr	r2, [r7, #16]
 8009810:	2334      	movs	r3, #52	; 0x34
 8009812:	fb01 f303 	mul.w	r3, r1, r3
 8009816:	4413      	add	r3, r2
 8009818:	3391      	adds	r3, #145	; 0x91
 800981a:	2202      	movs	r2, #2
 800981c:	701a      	strb	r2, [r3, #0]
            break;
 800981e:	e01e      	b.n	800985e <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 8009820:	693b      	ldr	r3, [r7, #16]
 8009822:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009826:	3301      	adds	r3, #1
 8009828:	b29a      	uxth	r2, r3
 800982a:	693b      	ldr	r3, [r7, #16]
 800982c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8009830:	e016      	b.n	8009860 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 8009832:	693b      	ldr	r3, [r7, #16]
 8009834:	2200      	movs	r2, #0
 8009836:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 800983a:	693b      	ldr	r3, [r7, #16]
 800983c:	2201      	movs	r2, #1
 800983e:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009846:	2102      	movs	r1, #2
 8009848:	6878      	ldr	r0, [r7, #4]
 800984a:	4798      	blx	r3
      break;
 800984c:	e00c      	b.n	8009868 <USBH_MSC_Process+0x514>
            break;
 800984e:	bf00      	nop
 8009850:	e00a      	b.n	8009868 <USBH_MSC_Process+0x514>
            break;
 8009852:	bf00      	nop
 8009854:	e008      	b.n	8009868 <USBH_MSC_Process+0x514>
            break;
 8009856:	bf00      	nop
 8009858:	e006      	b.n	8009868 <USBH_MSC_Process+0x514>
            break;
 800985a:	bf00      	nop
 800985c:	e004      	b.n	8009868 <USBH_MSC_Process+0x514>
            break;
 800985e:	bf00      	nop
      break;
 8009860:	e002      	b.n	8009868 <USBH_MSC_Process+0x514>
      error = USBH_OK;
 8009862:	2300      	movs	r3, #0
 8009864:	75fb      	strb	r3, [r7, #23]
      break;
 8009866:	bf00      	nop
  }
  return error;
 8009868:	7dfb      	ldrb	r3, [r7, #23]
}
 800986a:	4618      	mov	r0, r3
 800986c:	3718      	adds	r7, #24
 800986e:	46bd      	mov	sp, r7
 8009870:	bd80      	pop	{r7, pc}
 8009872:	bf00      	nop

08009874 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8009874:	b480      	push	{r7}
 8009876:	b083      	sub	sp, #12
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800987c:	2300      	movs	r3, #0
}
 800987e:	4618      	mov	r0, r3
 8009880:	370c      	adds	r7, #12
 8009882:	46bd      	mov	sp, r7
 8009884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009888:	4770      	bx	lr

0800988a <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800988a:	b580      	push	{r7, lr}
 800988c:	b088      	sub	sp, #32
 800988e:	af02      	add	r7, sp, #8
 8009890:	6078      	str	r0, [r7, #4]
 8009892:	460b      	mov	r3, r1
 8009894:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800989c:	69db      	ldr	r3, [r3, #28]
 800989e:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 80098a0:	2301      	movs	r3, #1
 80098a2:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 80098a4:	2301      	movs	r3, #1
 80098a6:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 80098a8:	78fb      	ldrb	r3, [r7, #3]
 80098aa:	693a      	ldr	r2, [r7, #16]
 80098ac:	2134      	movs	r1, #52	; 0x34
 80098ae:	fb01 f303 	mul.w	r3, r1, r3
 80098b2:	4413      	add	r3, r2
 80098b4:	3390      	adds	r3, #144	; 0x90
 80098b6:	781b      	ldrb	r3, [r3, #0]
 80098b8:	2b07      	cmp	r3, #7
 80098ba:	d03c      	beq.n	8009936 <USBH_MSC_RdWrProcess+0xac>
 80098bc:	2b07      	cmp	r3, #7
 80098be:	f300 80a7 	bgt.w	8009a10 <USBH_MSC_RdWrProcess+0x186>
 80098c2:	2b05      	cmp	r3, #5
 80098c4:	d06c      	beq.n	80099a0 <USBH_MSC_RdWrProcess+0x116>
 80098c6:	2b06      	cmp	r3, #6
 80098c8:	f040 80a2 	bne.w	8009a10 <USBH_MSC_RdWrProcess+0x186>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 80098cc:	78f9      	ldrb	r1, [r7, #3]
 80098ce:	2300      	movs	r3, #0
 80098d0:	9300      	str	r3, [sp, #0]
 80098d2:	2300      	movs	r3, #0
 80098d4:	2200      	movs	r2, #0
 80098d6:	6878      	ldr	r0, [r7, #4]
 80098d8:	f000 fea5 	bl	800a626 <USBH_MSC_SCSI_Read>
 80098dc:	4603      	mov	r3, r0
 80098de:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 80098e0:	7bfb      	ldrb	r3, [r7, #15]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d10b      	bne.n	80098fe <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 80098e6:	78fb      	ldrb	r3, [r7, #3]
 80098e8:	693a      	ldr	r2, [r7, #16]
 80098ea:	2134      	movs	r1, #52	; 0x34
 80098ec:	fb01 f303 	mul.w	r3, r1, r3
 80098f0:	4413      	add	r3, r2
 80098f2:	3390      	adds	r3, #144	; 0x90
 80098f4:	2201      	movs	r2, #1
 80098f6:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 80098f8:	2300      	movs	r3, #0
 80098fa:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80098fc:	e08a      	b.n	8009a14 <USBH_MSC_RdWrProcess+0x18a>
      else if (scsi_status == USBH_FAIL)
 80098fe:	7bfb      	ldrb	r3, [r7, #15]
 8009900:	2b02      	cmp	r3, #2
 8009902:	d109      	bne.n	8009918 <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8009904:	78fb      	ldrb	r3, [r7, #3]
 8009906:	693a      	ldr	r2, [r7, #16]
 8009908:	2134      	movs	r1, #52	; 0x34
 800990a:	fb01 f303 	mul.w	r3, r1, r3
 800990e:	4413      	add	r3, r2
 8009910:	3390      	adds	r3, #144	; 0x90
 8009912:	2205      	movs	r2, #5
 8009914:	701a      	strb	r2, [r3, #0]
      break;
 8009916:	e07d      	b.n	8009a14 <USBH_MSC_RdWrProcess+0x18a>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009918:	7bfb      	ldrb	r3, [r7, #15]
 800991a:	2b04      	cmp	r3, #4
 800991c:	d17a      	bne.n	8009a14 <USBH_MSC_RdWrProcess+0x18a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800991e:	78fb      	ldrb	r3, [r7, #3]
 8009920:	693a      	ldr	r2, [r7, #16]
 8009922:	2134      	movs	r1, #52	; 0x34
 8009924:	fb01 f303 	mul.w	r3, r1, r3
 8009928:	4413      	add	r3, r2
 800992a:	3390      	adds	r3, #144	; 0x90
 800992c:	2208      	movs	r2, #8
 800992e:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8009930:	2302      	movs	r3, #2
 8009932:	75fb      	strb	r3, [r7, #23]
      break;
 8009934:	e06e      	b.n	8009a14 <USBH_MSC_RdWrProcess+0x18a>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 8009936:	78f9      	ldrb	r1, [r7, #3]
 8009938:	2300      	movs	r3, #0
 800993a:	9300      	str	r3, [sp, #0]
 800993c:	2300      	movs	r3, #0
 800993e:	2200      	movs	r2, #0
 8009940:	6878      	ldr	r0, [r7, #4]
 8009942:	f000 fe05 	bl	800a550 <USBH_MSC_SCSI_Write>
 8009946:	4603      	mov	r3, r0
 8009948:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800994a:	7bfb      	ldrb	r3, [r7, #15]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d10b      	bne.n	8009968 <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8009950:	78fb      	ldrb	r3, [r7, #3]
 8009952:	693a      	ldr	r2, [r7, #16]
 8009954:	2134      	movs	r1, #52	; 0x34
 8009956:	fb01 f303 	mul.w	r3, r1, r3
 800995a:	4413      	add	r3, r2
 800995c:	3390      	adds	r3, #144	; 0x90
 800995e:	2201      	movs	r2, #1
 8009960:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8009962:	2300      	movs	r3, #0
 8009964:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009966:	e057      	b.n	8009a18 <USBH_MSC_RdWrProcess+0x18e>
      else if (scsi_status == USBH_FAIL)
 8009968:	7bfb      	ldrb	r3, [r7, #15]
 800996a:	2b02      	cmp	r3, #2
 800996c:	d109      	bne.n	8009982 <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800996e:	78fb      	ldrb	r3, [r7, #3]
 8009970:	693a      	ldr	r2, [r7, #16]
 8009972:	2134      	movs	r1, #52	; 0x34
 8009974:	fb01 f303 	mul.w	r3, r1, r3
 8009978:	4413      	add	r3, r2
 800997a:	3390      	adds	r3, #144	; 0x90
 800997c:	2205      	movs	r2, #5
 800997e:	701a      	strb	r2, [r3, #0]
      break;
 8009980:	e04a      	b.n	8009a18 <USBH_MSC_RdWrProcess+0x18e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009982:	7bfb      	ldrb	r3, [r7, #15]
 8009984:	2b04      	cmp	r3, #4
 8009986:	d147      	bne.n	8009a18 <USBH_MSC_RdWrProcess+0x18e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8009988:	78fb      	ldrb	r3, [r7, #3]
 800998a:	693a      	ldr	r2, [r7, #16]
 800998c:	2134      	movs	r1, #52	; 0x34
 800998e:	fb01 f303 	mul.w	r3, r1, r3
 8009992:	4413      	add	r3, r2
 8009994:	3390      	adds	r3, #144	; 0x90
 8009996:	2208      	movs	r2, #8
 8009998:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800999a:	2302      	movs	r3, #2
 800999c:	75fb      	strb	r3, [r7, #23]
      break;
 800999e:	e03b      	b.n	8009a18 <USBH_MSC_RdWrProcess+0x18e>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 80099a0:	78fb      	ldrb	r3, [r7, #3]
 80099a2:	2234      	movs	r2, #52	; 0x34
 80099a4:	fb02 f303 	mul.w	r3, r2, r3
 80099a8:	3398      	adds	r3, #152	; 0x98
 80099aa:	693a      	ldr	r2, [r7, #16]
 80099ac:	4413      	add	r3, r2
 80099ae:	1d1a      	adds	r2, r3, #4
 80099b0:	78fb      	ldrb	r3, [r7, #3]
 80099b2:	4619      	mov	r1, r3
 80099b4:	6878      	ldr	r0, [r7, #4]
 80099b6:	f000 fd52 	bl	800a45e <USBH_MSC_SCSI_RequestSense>
 80099ba:	4603      	mov	r3, r0
 80099bc:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 80099be:	7bfb      	ldrb	r3, [r7, #15]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d113      	bne.n	80099ec <USBH_MSC_RdWrProcess+0x162>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 80099c4:	78fb      	ldrb	r3, [r7, #3]
 80099c6:	693a      	ldr	r2, [r7, #16]
 80099c8:	2134      	movs	r1, #52	; 0x34
 80099ca:	fb01 f303 	mul.w	r3, r1, r3
 80099ce:	4413      	add	r3, r2
 80099d0:	3390      	adds	r3, #144	; 0x90
 80099d2:	2201      	movs	r2, #1
 80099d4:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 80099d6:	78fb      	ldrb	r3, [r7, #3]
 80099d8:	693a      	ldr	r2, [r7, #16]
 80099da:	2134      	movs	r1, #52	; 0x34
 80099dc:	fb01 f303 	mul.w	r3, r1, r3
 80099e0:	4413      	add	r3, r2
 80099e2:	3391      	adds	r3, #145	; 0x91
 80099e4:	2202      	movs	r2, #2
 80099e6:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 80099e8:	2302      	movs	r3, #2
 80099ea:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 80099ec:	7bfb      	ldrb	r3, [r7, #15]
 80099ee:	2b02      	cmp	r3, #2
 80099f0:	d014      	beq.n	8009a1c <USBH_MSC_RdWrProcess+0x192>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 80099f2:	7bfb      	ldrb	r3, [r7, #15]
 80099f4:	2b04      	cmp	r3, #4
 80099f6:	d111      	bne.n	8009a1c <USBH_MSC_RdWrProcess+0x192>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 80099f8:	78fb      	ldrb	r3, [r7, #3]
 80099fa:	693a      	ldr	r2, [r7, #16]
 80099fc:	2134      	movs	r1, #52	; 0x34
 80099fe:	fb01 f303 	mul.w	r3, r1, r3
 8009a02:	4413      	add	r3, r2
 8009a04:	3390      	adds	r3, #144	; 0x90
 8009a06:	2208      	movs	r2, #8
 8009a08:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8009a0a:	2302      	movs	r3, #2
 8009a0c:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009a0e:	e005      	b.n	8009a1c <USBH_MSC_RdWrProcess+0x192>

    default:
      break;
 8009a10:	bf00      	nop
 8009a12:	e004      	b.n	8009a1e <USBH_MSC_RdWrProcess+0x194>
      break;
 8009a14:	bf00      	nop
 8009a16:	e002      	b.n	8009a1e <USBH_MSC_RdWrProcess+0x194>
      break;
 8009a18:	bf00      	nop
 8009a1a:	e000      	b.n	8009a1e <USBH_MSC_RdWrProcess+0x194>
      break;
 8009a1c:	bf00      	nop

  }
  return error;
 8009a1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a20:	4618      	mov	r0, r3
 8009a22:	3718      	adds	r7, #24
 8009a24:	46bd      	mov	sp, r7
 8009a26:	bd80      	pop	{r7, pc}

08009a28 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8009a28:	b480      	push	{r7}
 8009a2a:	b085      	sub	sp, #20
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
 8009a30:	460b      	mov	r3, r1
 8009a32:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009a3a:	69db      	ldr	r3, [r3, #28]
 8009a3c:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	781b      	ldrb	r3, [r3, #0]
 8009a42:	b2db      	uxtb	r3, r3
 8009a44:	2b0b      	cmp	r3, #11
 8009a46:	d10c      	bne.n	8009a62 <USBH_MSC_UnitIsReady+0x3a>
 8009a48:	78fb      	ldrb	r3, [r7, #3]
 8009a4a:	68ba      	ldr	r2, [r7, #8]
 8009a4c:	2134      	movs	r1, #52	; 0x34
 8009a4e:	fb01 f303 	mul.w	r3, r1, r3
 8009a52:	4413      	add	r3, r2
 8009a54:	3391      	adds	r3, #145	; 0x91
 8009a56:	781b      	ldrb	r3, [r3, #0]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d102      	bne.n	8009a62 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 8009a5c:	2301      	movs	r3, #1
 8009a5e:	73fb      	strb	r3, [r7, #15]
 8009a60:	e001      	b.n	8009a66 <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 8009a62:	2300      	movs	r3, #0
 8009a64:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8009a66:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a68:	4618      	mov	r0, r3
 8009a6a:	3714      	adds	r7, #20
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a72:	4770      	bx	lr

08009a74 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b086      	sub	sp, #24
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	60f8      	str	r0, [r7, #12]
 8009a7c:	460b      	mov	r3, r1
 8009a7e:	607a      	str	r2, [r7, #4]
 8009a80:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009a88:	69db      	ldr	r3, [r3, #28]
 8009a8a:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	781b      	ldrb	r3, [r3, #0]
 8009a90:	b2db      	uxtb	r3, r3
 8009a92:	2b0b      	cmp	r3, #11
 8009a94:	d10d      	bne.n	8009ab2 <USBH_MSC_GetLUNInfo+0x3e>
  {
    (void)USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 8009a96:	7afb      	ldrb	r3, [r7, #11]
 8009a98:	2234      	movs	r2, #52	; 0x34
 8009a9a:	fb02 f303 	mul.w	r3, r2, r3
 8009a9e:	3390      	adds	r3, #144	; 0x90
 8009aa0:	697a      	ldr	r2, [r7, #20]
 8009aa2:	4413      	add	r3, r2
 8009aa4:	2234      	movs	r2, #52	; 0x34
 8009aa6:	4619      	mov	r1, r3
 8009aa8:	6878      	ldr	r0, [r7, #4]
 8009aaa:	f006 f9cd 	bl	800fe48 <memcpy>
    return USBH_OK;
 8009aae:	2300      	movs	r3, #0
 8009ab0:	e000      	b.n	8009ab4 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 8009ab2:	2302      	movs	r3, #2
  }
}
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	3718      	adds	r7, #24
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	bd80      	pop	{r7, pc}

08009abc <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b088      	sub	sp, #32
 8009ac0:	af02      	add	r7, sp, #8
 8009ac2:	60f8      	str	r0, [r7, #12]
 8009ac4:	607a      	str	r2, [r7, #4]
 8009ac6:	603b      	str	r3, [r7, #0]
 8009ac8:	460b      	mov	r3, r1
 8009aca:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009ad2:	69db      	ldr	r3, [r3, #28]
 8009ad4:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009adc:	b2db      	uxtb	r3, r3
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d00e      	beq.n	8009b00 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	781b      	ldrb	r3, [r3, #0]
 8009ae6:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8009ae8:	2b0b      	cmp	r3, #11
 8009aea:	d109      	bne.n	8009b00 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8009aec:	7afb      	ldrb	r3, [r7, #11]
 8009aee:	697a      	ldr	r2, [r7, #20]
 8009af0:	2134      	movs	r1, #52	; 0x34
 8009af2:	fb01 f303 	mul.w	r3, r1, r3
 8009af6:	4413      	add	r3, r2
 8009af8:	3390      	adds	r3, #144	; 0x90
 8009afa:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8009afc:	2b01      	cmp	r3, #1
 8009afe:	d001      	beq.n	8009b04 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 8009b00:	2302      	movs	r3, #2
 8009b02:	e040      	b.n	8009b86 <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 8009b04:	697b      	ldr	r3, [r7, #20]
 8009b06:	2206      	movs	r2, #6
 8009b08:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 8009b0a:	7afb      	ldrb	r3, [r7, #11]
 8009b0c:	697a      	ldr	r2, [r7, #20]
 8009b0e:	2134      	movs	r1, #52	; 0x34
 8009b10:	fb01 f303 	mul.w	r3, r1, r3
 8009b14:	4413      	add	r3, r2
 8009b16:	3390      	adds	r3, #144	; 0x90
 8009b18:	2206      	movs	r2, #6
 8009b1a:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8009b1c:	7afb      	ldrb	r3, [r7, #11]
 8009b1e:	b29a      	uxth	r2, r3
 8009b20:	697b      	ldr	r3, [r7, #20]
 8009b22:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 8009b26:	7af9      	ldrb	r1, [r7, #11]
 8009b28:	6a3b      	ldr	r3, [r7, #32]
 8009b2a:	9300      	str	r3, [sp, #0]
 8009b2c:	683b      	ldr	r3, [r7, #0]
 8009b2e:	687a      	ldr	r2, [r7, #4]
 8009b30:	68f8      	ldr	r0, [r7, #12]
 8009b32:	f000 fd78 	bl	800a626 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009b3c:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8009b3e:	e016      	b.n	8009b6e <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8009b46:	693b      	ldr	r3, [r7, #16]
 8009b48:	1ad2      	subs	r2, r2, r3
 8009b4a:	6a3b      	ldr	r3, [r7, #32]
 8009b4c:	f242 7110 	movw	r1, #10000	; 0x2710
 8009b50:	fb01 f303 	mul.w	r3, r1, r3
 8009b54:	429a      	cmp	r2, r3
 8009b56:	d805      	bhi.n	8009b64 <USBH_MSC_Read+0xa8>
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009b5e:	b2db      	uxtb	r3, r3
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d104      	bne.n	8009b6e <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8009b64:	697b      	ldr	r3, [r7, #20]
 8009b66:	2201      	movs	r2, #1
 8009b68:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8009b6a:	2302      	movs	r3, #2
 8009b6c:	e00b      	b.n	8009b86 <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8009b6e:	7afb      	ldrb	r3, [r7, #11]
 8009b70:	4619      	mov	r1, r3
 8009b72:	68f8      	ldr	r0, [r7, #12]
 8009b74:	f7ff fe89 	bl	800988a <USBH_MSC_RdWrProcess>
 8009b78:	4603      	mov	r3, r0
 8009b7a:	2b01      	cmp	r3, #1
 8009b7c:	d0e0      	beq.n	8009b40 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8009b7e:	697b      	ldr	r3, [r7, #20]
 8009b80:	2201      	movs	r2, #1
 8009b82:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 8009b84:	2300      	movs	r3, #0
}
 8009b86:	4618      	mov	r0, r3
 8009b88:	3718      	adds	r7, #24
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	bd80      	pop	{r7, pc}

08009b8e <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 8009b8e:	b580      	push	{r7, lr}
 8009b90:	b088      	sub	sp, #32
 8009b92:	af02      	add	r7, sp, #8
 8009b94:	60f8      	str	r0, [r7, #12]
 8009b96:	607a      	str	r2, [r7, #4]
 8009b98:	603b      	str	r3, [r7, #0]
 8009b9a:	460b      	mov	r3, r1
 8009b9c:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009ba4:	69db      	ldr	r3, [r3, #28]
 8009ba6:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009bae:	b2db      	uxtb	r3, r3
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d00e      	beq.n	8009bd2 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	781b      	ldrb	r3, [r3, #0]
 8009bb8:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8009bba:	2b0b      	cmp	r3, #11
 8009bbc:	d109      	bne.n	8009bd2 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8009bbe:	7afb      	ldrb	r3, [r7, #11]
 8009bc0:	697a      	ldr	r2, [r7, #20]
 8009bc2:	2134      	movs	r1, #52	; 0x34
 8009bc4:	fb01 f303 	mul.w	r3, r1, r3
 8009bc8:	4413      	add	r3, r2
 8009bca:	3390      	adds	r3, #144	; 0x90
 8009bcc:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8009bce:	2b01      	cmp	r3, #1
 8009bd0:	d001      	beq.n	8009bd6 <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 8009bd2:	2302      	movs	r3, #2
 8009bd4:	e040      	b.n	8009c58 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 8009bd6:	697b      	ldr	r3, [r7, #20]
 8009bd8:	2207      	movs	r2, #7
 8009bda:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 8009bdc:	7afb      	ldrb	r3, [r7, #11]
 8009bde:	697a      	ldr	r2, [r7, #20]
 8009be0:	2134      	movs	r1, #52	; 0x34
 8009be2:	fb01 f303 	mul.w	r3, r1, r3
 8009be6:	4413      	add	r3, r2
 8009be8:	3390      	adds	r3, #144	; 0x90
 8009bea:	2207      	movs	r2, #7
 8009bec:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8009bee:	7afb      	ldrb	r3, [r7, #11]
 8009bf0:	b29a      	uxth	r2, r3
 8009bf2:	697b      	ldr	r3, [r7, #20]
 8009bf4:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 8009bf8:	7af9      	ldrb	r1, [r7, #11]
 8009bfa:	6a3b      	ldr	r3, [r7, #32]
 8009bfc:	9300      	str	r3, [sp, #0]
 8009bfe:	683b      	ldr	r3, [r7, #0]
 8009c00:	687a      	ldr	r2, [r7, #4]
 8009c02:	68f8      	ldr	r0, [r7, #12]
 8009c04:	f000 fca4 	bl	800a550 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009c0e:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8009c10:	e016      	b.n	8009c40 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8009c18:	693b      	ldr	r3, [r7, #16]
 8009c1a:	1ad2      	subs	r2, r2, r3
 8009c1c:	6a3b      	ldr	r3, [r7, #32]
 8009c1e:	f242 7110 	movw	r1, #10000	; 0x2710
 8009c22:	fb01 f303 	mul.w	r3, r1, r3
 8009c26:	429a      	cmp	r2, r3
 8009c28:	d805      	bhi.n	8009c36 <USBH_MSC_Write+0xa8>
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009c30:	b2db      	uxtb	r3, r3
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d104      	bne.n	8009c40 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8009c36:	697b      	ldr	r3, [r7, #20]
 8009c38:	2201      	movs	r2, #1
 8009c3a:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8009c3c:	2302      	movs	r3, #2
 8009c3e:	e00b      	b.n	8009c58 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8009c40:	7afb      	ldrb	r3, [r7, #11]
 8009c42:	4619      	mov	r1, r3
 8009c44:	68f8      	ldr	r0, [r7, #12]
 8009c46:	f7ff fe20 	bl	800988a <USBH_MSC_RdWrProcess>
 8009c4a:	4603      	mov	r3, r0
 8009c4c:	2b01      	cmp	r3, #1
 8009c4e:	d0e0      	beq.n	8009c12 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8009c50:	697b      	ldr	r3, [r7, #20]
 8009c52:	2201      	movs	r2, #1
 8009c54:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 8009c56:	2300      	movs	r3, #0
}
 8009c58:	4618      	mov	r0, r3
 8009c5a:	3718      	adds	r7, #24
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	bd80      	pop	{r7, pc}

08009c60 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b082      	sub	sp, #8
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	2221      	movs	r2, #33	; 0x21
 8009c6c:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	22ff      	movs	r2, #255	; 0xff
 8009c72:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2200      	movs	r2, #0
 8009c78:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	2200      	movs	r2, #0
 8009c84:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 8009c86:	2200      	movs	r2, #0
 8009c88:	2100      	movs	r1, #0
 8009c8a:	6878      	ldr	r0, [r7, #4]
 8009c8c:	f001 fea6 	bl	800b9dc <USBH_CtlReq>
 8009c90:	4603      	mov	r3, r0
}
 8009c92:	4618      	mov	r0, r3
 8009c94:	3708      	adds	r7, #8
 8009c96:	46bd      	mov	sp, r7
 8009c98:	bd80      	pop	{r7, pc}

08009c9a <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 8009c9a:	b580      	push	{r7, lr}
 8009c9c:	b082      	sub	sp, #8
 8009c9e:	af00      	add	r7, sp, #0
 8009ca0:	6078      	str	r0, [r7, #4]
 8009ca2:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	22a1      	movs	r2, #161	; 0xa1
 8009ca8:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	22fe      	movs	r2, #254	; 0xfe
 8009cae:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	2200      	movs	r2, #0
 8009cba:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	2201      	movs	r2, #1
 8009cc0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 8009cc2:	2201      	movs	r2, #1
 8009cc4:	6839      	ldr	r1, [r7, #0]
 8009cc6:	6878      	ldr	r0, [r7, #4]
 8009cc8:	f001 fe88 	bl	800b9dc <USBH_CtlReq>
 8009ccc:	4603      	mov	r3, r0
}
 8009cce:	4618      	mov	r0, r3
 8009cd0:	3708      	adds	r7, #8
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	bd80      	pop	{r7, pc}
	...

08009cd8 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 8009cd8:	b480      	push	{r7}
 8009cda:	b085      	sub	sp, #20
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009ce6:	69db      	ldr	r3, [r3, #28]
 8009ce8:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	4a09      	ldr	r2, [pc, #36]	; (8009d14 <USBH_MSC_BOT_Init+0x3c>)
 8009cee:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	4a09      	ldr	r2, [pc, #36]	; (8009d18 <USBH_MSC_BOT_Init+0x40>)
 8009cf4:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	2201      	movs	r2, #1
 8009cfa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	2201      	movs	r2, #1
 8009d02:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 8009d06:	2300      	movs	r3, #0
}
 8009d08:	4618      	mov	r0, r3
 8009d0a:	3714      	adds	r7, #20
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d12:	4770      	bx	lr
 8009d14:	43425355 	.word	0x43425355
 8009d18:	20304050 	.word	0x20304050

08009d1c <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b088      	sub	sp, #32
 8009d20:	af02      	add	r7, sp, #8
 8009d22:	6078      	str	r0, [r7, #4]
 8009d24:	460b      	mov	r3, r1
 8009d26:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 8009d28:	2301      	movs	r3, #1
 8009d2a:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 8009d2c:	2301      	movs	r3, #1
 8009d2e:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 8009d30:	2301      	movs	r3, #1
 8009d32:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009d34:	2300      	movs	r3, #0
 8009d36:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009d3e:	69db      	ldr	r3, [r3, #28]
 8009d40:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 8009d42:	2300      	movs	r3, #0
 8009d44:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 8009d46:	693b      	ldr	r3, [r7, #16]
 8009d48:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009d4c:	3b01      	subs	r3, #1
 8009d4e:	2b0a      	cmp	r3, #10
 8009d50:	f200 819e 	bhi.w	800a090 <USBH_MSC_BOT_Process+0x374>
 8009d54:	a201      	add	r2, pc, #4	; (adr r2, 8009d5c <USBH_MSC_BOT_Process+0x40>)
 8009d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d5a:	bf00      	nop
 8009d5c:	08009d89 	.word	0x08009d89
 8009d60:	08009db1 	.word	0x08009db1
 8009d64:	08009e1b 	.word	0x08009e1b
 8009d68:	08009e39 	.word	0x08009e39
 8009d6c:	08009ebd 	.word	0x08009ebd
 8009d70:	08009edf 	.word	0x08009edf
 8009d74:	08009f77 	.word	0x08009f77
 8009d78:	08009f93 	.word	0x08009f93
 8009d7c:	08009fe5 	.word	0x08009fe5
 8009d80:	0800a015 	.word	0x0800a015
 8009d84:	0800a077 	.word	0x0800a077
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 8009d88:	693b      	ldr	r3, [r7, #16]
 8009d8a:	78fa      	ldrb	r2, [r7, #3]
 8009d8c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 8009d90:	693b      	ldr	r3, [r7, #16]
 8009d92:	2202      	movs	r2, #2
 8009d94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 8009d98:	693b      	ldr	r3, [r7, #16]
 8009d9a:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8009d9e:	693b      	ldr	r3, [r7, #16]
 8009da0:	795b      	ldrb	r3, [r3, #5]
 8009da2:	2201      	movs	r2, #1
 8009da4:	9200      	str	r2, [sp, #0]
 8009da6:	221f      	movs	r2, #31
 8009da8:	6878      	ldr	r0, [r7, #4]
 8009daa:	f002 f826 	bl	800bdfa <USBH_BulkSendData>
                              BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 8009dae:	e17e      	b.n	800a0ae <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8009db0:	693b      	ldr	r3, [r7, #16]
 8009db2:	795b      	ldrb	r3, [r3, #5]
 8009db4:	4619      	mov	r1, r3
 8009db6:	6878      	ldr	r0, [r7, #4]
 8009db8:	f005 fe3e 	bl	800fa38 <USBH_LL_GetURBState>
 8009dbc:	4603      	mov	r3, r0
 8009dbe:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8009dc0:	7d3b      	ldrb	r3, [r7, #20]
 8009dc2:	2b01      	cmp	r3, #1
 8009dc4:	d118      	bne.n	8009df8 <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 8009dc6:	693b      	ldr	r3, [r7, #16]
 8009dc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d00f      	beq.n	8009dee <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 8009dce:	693b      	ldr	r3, [r7, #16]
 8009dd0:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8009dd4:	b25b      	sxtb	r3, r3
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	da04      	bge.n	8009de4 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 8009dda:	693b      	ldr	r3, [r7, #16]
 8009ddc:	2203      	movs	r2, #3
 8009dde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009de2:	e157      	b.n	800a094 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 8009de4:	693b      	ldr	r3, [r7, #16]
 8009de6:	2205      	movs	r2, #5
 8009de8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009dec:	e152      	b.n	800a094 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8009dee:	693b      	ldr	r3, [r7, #16]
 8009df0:	2207      	movs	r2, #7
 8009df2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009df6:	e14d      	b.n	800a094 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009df8:	7d3b      	ldrb	r3, [r7, #20]
 8009dfa:	2b02      	cmp	r3, #2
 8009dfc:	d104      	bne.n	8009e08 <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009dfe:	693b      	ldr	r3, [r7, #16]
 8009e00:	2201      	movs	r2, #1
 8009e02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009e06:	e145      	b.n	800a094 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 8009e08:	7d3b      	ldrb	r3, [r7, #20]
 8009e0a:	2b05      	cmp	r3, #5
 8009e0c:	f040 8142 	bne.w	800a094 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8009e10:	693b      	ldr	r3, [r7, #16]
 8009e12:	220a      	movs	r2, #10
 8009e14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009e18:	e13c      	b.n	800a094 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8009e1a:	693b      	ldr	r3, [r7, #16]
 8009e1c:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009e20:	693b      	ldr	r3, [r7, #16]
 8009e22:	895a      	ldrh	r2, [r3, #10]
 8009e24:	693b      	ldr	r3, [r7, #16]
 8009e26:	791b      	ldrb	r3, [r3, #4]
 8009e28:	6878      	ldr	r0, [r7, #4]
 8009e2a:	f002 f80b 	bl	800be44 <USBH_BulkReceiveData>
                                 MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 8009e2e:	693b      	ldr	r3, [r7, #16]
 8009e30:	2204      	movs	r2, #4
 8009e32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 8009e36:	e13a      	b.n	800a0ae <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8009e38:	693b      	ldr	r3, [r7, #16]
 8009e3a:	791b      	ldrb	r3, [r3, #4]
 8009e3c:	4619      	mov	r1, r3
 8009e3e:	6878      	ldr	r0, [r7, #4]
 8009e40:	f005 fdfa 	bl	800fa38 <USBH_LL_GetURBState>
 8009e44:	4603      	mov	r3, r0
 8009e46:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8009e48:	7d3b      	ldrb	r3, [r7, #20]
 8009e4a:	2b01      	cmp	r3, #1
 8009e4c:	d12d      	bne.n	8009eaa <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 8009e4e:	693b      	ldr	r3, [r7, #16]
 8009e50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e52:	693a      	ldr	r2, [r7, #16]
 8009e54:	8952      	ldrh	r2, [r2, #10]
 8009e56:	4293      	cmp	r3, r2
 8009e58:	d910      	bls.n	8009e7c <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8009e5a:	693b      	ldr	r3, [r7, #16]
 8009e5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009e60:	693a      	ldr	r2, [r7, #16]
 8009e62:	8952      	ldrh	r2, [r2, #10]
 8009e64:	441a      	add	r2, r3
 8009e66:	693b      	ldr	r3, [r7, #16]
 8009e68:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 8009e6c:	693b      	ldr	r3, [r7, #16]
 8009e6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e70:	693a      	ldr	r2, [r7, #16]
 8009e72:	8952      	ldrh	r2, [r2, #10]
 8009e74:	1a9a      	subs	r2, r3, r2
 8009e76:	693b      	ldr	r3, [r7, #16]
 8009e78:	65da      	str	r2, [r3, #92]	; 0x5c
 8009e7a:	e002      	b.n	8009e82 <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8009e7c:	693b      	ldr	r3, [r7, #16]
 8009e7e:	2200      	movs	r2, #0
 8009e80:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8009e82:	693b      	ldr	r3, [r7, #16]
 8009e84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d00a      	beq.n	8009ea0 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8009e8a:	693b      	ldr	r3, [r7, #16]
 8009e8c:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009e90:	693b      	ldr	r3, [r7, #16]
 8009e92:	895a      	ldrh	r2, [r3, #10]
 8009e94:	693b      	ldr	r3, [r7, #16]
 8009e96:	791b      	ldrb	r3, [r3, #4]
 8009e98:	6878      	ldr	r0, [r7, #4]
 8009e9a:	f001 ffd3 	bl	800be44 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 8009e9e:	e0fb      	b.n	800a098 <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8009ea0:	693b      	ldr	r3, [r7, #16]
 8009ea2:	2207      	movs	r2, #7
 8009ea4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009ea8:	e0f6      	b.n	800a098 <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 8009eaa:	7d3b      	ldrb	r3, [r7, #20]
 8009eac:	2b05      	cmp	r3, #5
 8009eae:	f040 80f3 	bne.w	800a098 <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8009eb2:	693b      	ldr	r3, [r7, #16]
 8009eb4:	2209      	movs	r2, #9
 8009eb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009eba:	e0ed      	b.n	800a098 <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8009ebc:	693b      	ldr	r3, [r7, #16]
 8009ebe:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009ec2:	693b      	ldr	r3, [r7, #16]
 8009ec4:	891a      	ldrh	r2, [r3, #8]
 8009ec6:	693b      	ldr	r3, [r7, #16]
 8009ec8:	795b      	ldrb	r3, [r3, #5]
 8009eca:	2001      	movs	r0, #1
 8009ecc:	9000      	str	r0, [sp, #0]
 8009ece:	6878      	ldr	r0, [r7, #4]
 8009ed0:	f001 ff93 	bl	800bdfa <USBH_BulkSendData>
                              MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8009ed4:	693b      	ldr	r3, [r7, #16]
 8009ed6:	2206      	movs	r2, #6
 8009ed8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009edc:	e0e7      	b.n	800a0ae <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8009ede:	693b      	ldr	r3, [r7, #16]
 8009ee0:	795b      	ldrb	r3, [r3, #5]
 8009ee2:	4619      	mov	r1, r3
 8009ee4:	6878      	ldr	r0, [r7, #4]
 8009ee6:	f005 fda7 	bl	800fa38 <USBH_LL_GetURBState>
 8009eea:	4603      	mov	r3, r0
 8009eec:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8009eee:	7d3b      	ldrb	r3, [r7, #20]
 8009ef0:	2b01      	cmp	r3, #1
 8009ef2:	d12f      	bne.n	8009f54 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8009ef4:	693b      	ldr	r3, [r7, #16]
 8009ef6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ef8:	693a      	ldr	r2, [r7, #16]
 8009efa:	8912      	ldrh	r2, [r2, #8]
 8009efc:	4293      	cmp	r3, r2
 8009efe:	d910      	bls.n	8009f22 <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8009f00:	693b      	ldr	r3, [r7, #16]
 8009f02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f06:	693a      	ldr	r2, [r7, #16]
 8009f08:	8912      	ldrh	r2, [r2, #8]
 8009f0a:	441a      	add	r2, r3
 8009f0c:	693b      	ldr	r3, [r7, #16]
 8009f0e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8009f12:	693b      	ldr	r3, [r7, #16]
 8009f14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f16:	693a      	ldr	r2, [r7, #16]
 8009f18:	8912      	ldrh	r2, [r2, #8]
 8009f1a:	1a9a      	subs	r2, r3, r2
 8009f1c:	693b      	ldr	r3, [r7, #16]
 8009f1e:	65da      	str	r2, [r3, #92]	; 0x5c
 8009f20:	e002      	b.n	8009f28 <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8009f22:	693b      	ldr	r3, [r7, #16]
 8009f24:	2200      	movs	r2, #0
 8009f26:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8009f28:	693b      	ldr	r3, [r7, #16]
 8009f2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d00c      	beq.n	8009f4a <USBH_MSC_BOT_Process+0x22e>
        {
          (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8009f30:	693b      	ldr	r3, [r7, #16]
 8009f32:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009f36:	693b      	ldr	r3, [r7, #16]
 8009f38:	891a      	ldrh	r2, [r3, #8]
 8009f3a:	693b      	ldr	r3, [r7, #16]
 8009f3c:	795b      	ldrb	r3, [r3, #5]
 8009f3e:	2001      	movs	r0, #1
 8009f40:	9000      	str	r0, [sp, #0]
 8009f42:	6878      	ldr	r0, [r7, #4]
 8009f44:	f001 ff59 	bl	800bdfa <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 8009f48:	e0a8      	b.n	800a09c <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8009f4a:	693b      	ldr	r3, [r7, #16]
 8009f4c:	2207      	movs	r2, #7
 8009f4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009f52:	e0a3      	b.n	800a09c <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009f54:	7d3b      	ldrb	r3, [r7, #20]
 8009f56:	2b02      	cmp	r3, #2
 8009f58:	d104      	bne.n	8009f64 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 8009f5a:	693b      	ldr	r3, [r7, #16]
 8009f5c:	2205      	movs	r2, #5
 8009f5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009f62:	e09b      	b.n	800a09c <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 8009f64:	7d3b      	ldrb	r3, [r7, #20]
 8009f66:	2b05      	cmp	r3, #5
 8009f68:	f040 8098 	bne.w	800a09c <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8009f6c:	693b      	ldr	r3, [r7, #16]
 8009f6e:	220a      	movs	r2, #10
 8009f70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009f74:	e092      	b.n	800a09c <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 8009f76:	693b      	ldr	r3, [r7, #16]
 8009f78:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8009f7c:	693b      	ldr	r3, [r7, #16]
 8009f7e:	791b      	ldrb	r3, [r3, #4]
 8009f80:	220d      	movs	r2, #13
 8009f82:	6878      	ldr	r0, [r7, #4]
 8009f84:	f001 ff5e 	bl	800be44 <USBH_BulkReceiveData>
                                 BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 8009f88:	693b      	ldr	r3, [r7, #16]
 8009f8a:	2208      	movs	r2, #8
 8009f8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009f90:	e08d      	b.n	800a0ae <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8009f92:	693b      	ldr	r3, [r7, #16]
 8009f94:	791b      	ldrb	r3, [r3, #4]
 8009f96:	4619      	mov	r1, r3
 8009f98:	6878      	ldr	r0, [r7, #4]
 8009f9a:	f005 fd4d 	bl	800fa38 <USBH_LL_GetURBState>
 8009f9e:	4603      	mov	r3, r0
 8009fa0:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 8009fa2:	7d3b      	ldrb	r3, [r7, #20]
 8009fa4:	2b01      	cmp	r3, #1
 8009fa6:	d115      	bne.n	8009fd4 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009fa8:	693b      	ldr	r3, [r7, #16]
 8009faa:	2201      	movs	r2, #1
 8009fac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8009fb0:	693b      	ldr	r3, [r7, #16]
 8009fb2:	2201      	movs	r2, #1
 8009fb4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 8009fb8:	6878      	ldr	r0, [r7, #4]
 8009fba:	f000 f8a9 	bl	800a110 <USBH_MSC_DecodeCSW>
 8009fbe:	4603      	mov	r3, r0
 8009fc0:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 8009fc2:	7d7b      	ldrb	r3, [r7, #21]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d102      	bne.n	8009fce <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 8009fc8:	2300      	movs	r3, #0
 8009fca:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 8009fcc:	e068      	b.n	800a0a0 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 8009fce:	2302      	movs	r3, #2
 8009fd0:	75fb      	strb	r3, [r7, #23]
      break;
 8009fd2:	e065      	b.n	800a0a0 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 8009fd4:	7d3b      	ldrb	r3, [r7, #20]
 8009fd6:	2b05      	cmp	r3, #5
 8009fd8:	d162      	bne.n	800a0a0 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8009fda:	693b      	ldr	r3, [r7, #16]
 8009fdc:	2209      	movs	r2, #9
 8009fde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009fe2:	e05d      	b.n	800a0a0 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 8009fe4:	78fb      	ldrb	r3, [r7, #3]
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	4619      	mov	r1, r3
 8009fea:	6878      	ldr	r0, [r7, #4]
 8009fec:	f000 f864 	bl	800a0b8 <USBH_MSC_BOT_Abort>
 8009ff0:	4603      	mov	r3, r0
 8009ff2:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8009ff4:	7dbb      	ldrb	r3, [r7, #22]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d104      	bne.n	800a004 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8009ffa:	693b      	ldr	r3, [r7, #16]
 8009ffc:	2207      	movs	r2, #7
 8009ffe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 800a002:	e04f      	b.n	800a0a4 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 800a004:	7dbb      	ldrb	r3, [r7, #22]
 800a006:	2b04      	cmp	r3, #4
 800a008:	d14c      	bne.n	800a0a4 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800a00a:	693b      	ldr	r3, [r7, #16]
 800a00c:	220b      	movs	r2, #11
 800a00e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a012:	e047      	b.n	800a0a4 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 800a014:	78fb      	ldrb	r3, [r7, #3]
 800a016:	2201      	movs	r2, #1
 800a018:	4619      	mov	r1, r3
 800a01a:	6878      	ldr	r0, [r7, #4]
 800a01c:	f000 f84c 	bl	800a0b8 <USBH_MSC_BOT_Abort>
 800a020:	4603      	mov	r3, r0
 800a022:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800a024:	7dbb      	ldrb	r3, [r7, #22]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d11d      	bne.n	800a066 <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 800a02a:	693b      	ldr	r3, [r7, #16]
 800a02c:	795b      	ldrb	r3, [r3, #5]
 800a02e:	4619      	mov	r1, r3
 800a030:	6878      	ldr	r0, [r7, #4]
 800a032:	f005 fd5b 	bl	800faec <USBH_LL_GetToggle>
 800a036:	4603      	mov	r3, r0
 800a038:	73fb      	strb	r3, [r7, #15]
        (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 800a03a:	693b      	ldr	r3, [r7, #16]
 800a03c:	7959      	ldrb	r1, [r3, #5]
 800a03e:	7bfb      	ldrb	r3, [r7, #15]
 800a040:	f1c3 0301 	rsb	r3, r3, #1
 800a044:	b2db      	uxtb	r3, r3
 800a046:	461a      	mov	r2, r3
 800a048:	6878      	ldr	r0, [r7, #4]
 800a04a:	f005 fd1f 	bl	800fa8c <USBH_LL_SetToggle>
        (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800a04e:	693b      	ldr	r3, [r7, #16]
 800a050:	791b      	ldrb	r3, [r3, #4]
 800a052:	2200      	movs	r2, #0
 800a054:	4619      	mov	r1, r3
 800a056:	6878      	ldr	r0, [r7, #4]
 800a058:	f005 fd18 	bl	800fa8c <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 800a05c:	693b      	ldr	r3, [r7, #16]
 800a05e:	2209      	movs	r2, #9
 800a060:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 800a064:	e020      	b.n	800a0a8 <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 800a066:	7dbb      	ldrb	r3, [r7, #22]
 800a068:	2b04      	cmp	r3, #4
 800a06a:	d11d      	bne.n	800a0a8 <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800a06c:	693b      	ldr	r3, [r7, #16]
 800a06e:	220b      	movs	r2, #11
 800a070:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a074:	e018      	b.n	800a0a8 <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 800a076:	6878      	ldr	r0, [r7, #4]
 800a078:	f7ff fdf2 	bl	8009c60 <USBH_MSC_BOT_REQ_Reset>
 800a07c:	4603      	mov	r3, r0
 800a07e:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800a080:	7dfb      	ldrb	r3, [r7, #23]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d112      	bne.n	800a0ac <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a086:	693b      	ldr	r3, [r7, #16]
 800a088:	2201      	movs	r2, #1
 800a08a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 800a08e:	e00d      	b.n	800a0ac <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 800a090:	bf00      	nop
 800a092:	e00c      	b.n	800a0ae <USBH_MSC_BOT_Process+0x392>
      break;
 800a094:	bf00      	nop
 800a096:	e00a      	b.n	800a0ae <USBH_MSC_BOT_Process+0x392>
      break;
 800a098:	bf00      	nop
 800a09a:	e008      	b.n	800a0ae <USBH_MSC_BOT_Process+0x392>
      break;
 800a09c:	bf00      	nop
 800a09e:	e006      	b.n	800a0ae <USBH_MSC_BOT_Process+0x392>
      break;
 800a0a0:	bf00      	nop
 800a0a2:	e004      	b.n	800a0ae <USBH_MSC_BOT_Process+0x392>
      break;
 800a0a4:	bf00      	nop
 800a0a6:	e002      	b.n	800a0ae <USBH_MSC_BOT_Process+0x392>
      break;
 800a0a8:	bf00      	nop
 800a0aa:	e000      	b.n	800a0ae <USBH_MSC_BOT_Process+0x392>
      break;
 800a0ac:	bf00      	nop
  }
  return status;
 800a0ae:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	3718      	adds	r7, #24
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	bd80      	pop	{r7, pc}

0800a0b8 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b084      	sub	sp, #16
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
 800a0c0:	460b      	mov	r3, r1
 800a0c2:	70fb      	strb	r3, [r7, #3]
 800a0c4:	4613      	mov	r3, r2
 800a0c6:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 800a0c8:	2302      	movs	r3, #2
 800a0ca:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a0d2:	69db      	ldr	r3, [r3, #28]
 800a0d4:	60bb      	str	r3, [r7, #8]

  switch (dir)
 800a0d6:	78bb      	ldrb	r3, [r7, #2]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d002      	beq.n	800a0e2 <USBH_MSC_BOT_Abort+0x2a>
 800a0dc:	2b01      	cmp	r3, #1
 800a0de:	d009      	beq.n	800a0f4 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 800a0e0:	e011      	b.n	800a106 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 800a0e2:	68bb      	ldr	r3, [r7, #8]
 800a0e4:	79db      	ldrb	r3, [r3, #7]
 800a0e6:	4619      	mov	r1, r3
 800a0e8:	6878      	ldr	r0, [r7, #4]
 800a0ea:	f001 f9a8 	bl	800b43e <USBH_ClrFeature>
 800a0ee:	4603      	mov	r3, r0
 800a0f0:	73fb      	strb	r3, [r7, #15]
      break;
 800a0f2:	e008      	b.n	800a106 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 800a0f4:	68bb      	ldr	r3, [r7, #8]
 800a0f6:	799b      	ldrb	r3, [r3, #6]
 800a0f8:	4619      	mov	r1, r3
 800a0fa:	6878      	ldr	r0, [r7, #4]
 800a0fc:	f001 f99f 	bl	800b43e <USBH_ClrFeature>
 800a100:	4603      	mov	r3, r0
 800a102:	73fb      	strb	r3, [r7, #15]
      break;
 800a104:	bf00      	nop
  }
  return status;
 800a106:	7bfb      	ldrb	r3, [r7, #15]
}
 800a108:	4618      	mov	r0, r3
 800a10a:	3710      	adds	r7, #16
 800a10c:	46bd      	mov	sp, r7
 800a10e:	bd80      	pop	{r7, pc}

0800a110 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b084      	sub	sp, #16
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a11e:	69db      	ldr	r3, [r3, #28]
 800a120:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 800a122:	2301      	movs	r3, #1
 800a124:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800a126:	68bb      	ldr	r3, [r7, #8]
 800a128:	791b      	ldrb	r3, [r3, #4]
 800a12a:	4619      	mov	r1, r3
 800a12c:	6878      	ldr	r0, [r7, #4]
 800a12e:	f005 fbf1 	bl	800f914 <USBH_LL_GetLastXferSize>
 800a132:	4603      	mov	r3, r0
 800a134:	2b0d      	cmp	r3, #13
 800a136:	d002      	beq.n	800a13e <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 800a138:	2302      	movs	r3, #2
 800a13a:	73fb      	strb	r3, [r7, #15]
 800a13c:	e024      	b.n	800a188 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800a13e:	68bb      	ldr	r3, [r7, #8]
 800a140:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a142:	4a14      	ldr	r2, [pc, #80]	; (800a194 <USBH_MSC_DecodeCSW+0x84>)
 800a144:	4293      	cmp	r3, r2
 800a146:	d11d      	bne.n	800a184 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 800a148:	68bb      	ldr	r3, [r7, #8]
 800a14a:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800a14c:	68bb      	ldr	r3, [r7, #8]
 800a14e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a150:	429a      	cmp	r2, r3
 800a152:	d119      	bne.n	800a188 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 800a154:	68bb      	ldr	r3, [r7, #8]
 800a156:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d102      	bne.n	800a164 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 800a15e:	2300      	movs	r3, #0
 800a160:	73fb      	strb	r3, [r7, #15]
 800a162:	e011      	b.n	800a188 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 800a164:	68bb      	ldr	r3, [r7, #8]
 800a166:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a16a:	2b01      	cmp	r3, #1
 800a16c:	d102      	bne.n	800a174 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 800a16e:	2301      	movs	r3, #1
 800a170:	73fb      	strb	r3, [r7, #15]
 800a172:	e009      	b.n	800a188 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 800a174:	68bb      	ldr	r3, [r7, #8]
 800a176:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a17a:	2b02      	cmp	r3, #2
 800a17c:	d104      	bne.n	800a188 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 800a17e:	2302      	movs	r3, #2
 800a180:	73fb      	strb	r3, [r7, #15]
 800a182:	e001      	b.n	800a188 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 800a184:	2302      	movs	r3, #2
 800a186:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 800a188:	7bfb      	ldrb	r3, [r7, #15]
}
 800a18a:	4618      	mov	r0, r3
 800a18c:	3710      	adds	r7, #16
 800a18e:	46bd      	mov	sp, r7
 800a190:	bd80      	pop	{r7, pc}
 800a192:	bf00      	nop
 800a194:	53425355 	.word	0x53425355

0800a198 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b084      	sub	sp, #16
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
 800a1a0:	460b      	mov	r3, r1
 800a1a2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800a1a4:	2302      	movs	r3, #2
 800a1a6:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a1ae:	69db      	ldr	r3, [r3, #28]
 800a1b0:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 800a1b2:	68bb      	ldr	r3, [r7, #8]
 800a1b4:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a1b8:	2b01      	cmp	r3, #1
 800a1ba:	d002      	beq.n	800a1c2 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 800a1bc:	2b02      	cmp	r3, #2
 800a1be:	d021      	beq.n	800a204 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800a1c0:	e028      	b.n	800a214 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 800a1c2:	68bb      	ldr	r3, [r7, #8]
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800a1c8:	68bb      	ldr	r3, [r7, #8]
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a1d0:	68bb      	ldr	r3, [r7, #8]
 800a1d2:	220a      	movs	r2, #10
 800a1d4:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a1d8:	68bb      	ldr	r3, [r7, #8]
 800a1da:	3363      	adds	r3, #99	; 0x63
 800a1dc:	2210      	movs	r2, #16
 800a1de:	2100      	movs	r1, #0
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	f005 fdc3 	bl	800fd6c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 800a1e6:	68bb      	ldr	r3, [r7, #8]
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a1ee:	68bb      	ldr	r3, [r7, #8]
 800a1f0:	2201      	movs	r2, #1
 800a1f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a1f6:	68bb      	ldr	r3, [r7, #8]
 800a1f8:	2202      	movs	r2, #2
 800a1fa:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 800a1fe:	2301      	movs	r3, #1
 800a200:	73fb      	strb	r3, [r7, #15]
      break;
 800a202:	e007      	b.n	800a214 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a204:	78fb      	ldrb	r3, [r7, #3]
 800a206:	4619      	mov	r1, r3
 800a208:	6878      	ldr	r0, [r7, #4]
 800a20a:	f7ff fd87 	bl	8009d1c <USBH_MSC_BOT_Process>
 800a20e:	4603      	mov	r3, r0
 800a210:	73fb      	strb	r3, [r7, #15]
      break;
 800a212:	bf00      	nop
  }

  return error;
 800a214:	7bfb      	ldrb	r3, [r7, #15]
}
 800a216:	4618      	mov	r0, r3
 800a218:	3710      	adds	r7, #16
 800a21a:	46bd      	mov	sp, r7
 800a21c:	bd80      	pop	{r7, pc}

0800a21e <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 800a21e:	b580      	push	{r7, lr}
 800a220:	b086      	sub	sp, #24
 800a222:	af00      	add	r7, sp, #0
 800a224:	60f8      	str	r0, [r7, #12]
 800a226:	460b      	mov	r3, r1
 800a228:	607a      	str	r2, [r7, #4]
 800a22a:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 800a22c:	2301      	movs	r3, #1
 800a22e:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a236:	69db      	ldr	r3, [r3, #28]
 800a238:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a23a:	693b      	ldr	r3, [r7, #16]
 800a23c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a240:	2b01      	cmp	r3, #1
 800a242:	d002      	beq.n	800a24a <USBH_MSC_SCSI_ReadCapacity+0x2c>
 800a244:	2b02      	cmp	r3, #2
 800a246:	d027      	beq.n	800a298 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 800a248:	e05f      	b.n	800a30a <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800a24a:	693b      	ldr	r3, [r7, #16]
 800a24c:	2208      	movs	r2, #8
 800a24e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800a250:	693b      	ldr	r3, [r7, #16]
 800a252:	2280      	movs	r2, #128	; 0x80
 800a254:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a258:	693b      	ldr	r3, [r7, #16]
 800a25a:	220a      	movs	r2, #10
 800a25c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a260:	693b      	ldr	r3, [r7, #16]
 800a262:	3363      	adds	r3, #99	; 0x63
 800a264:	2210      	movs	r2, #16
 800a266:	2100      	movs	r1, #0
 800a268:	4618      	mov	r0, r3
 800a26a:	f005 fd7f 	bl	800fd6c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 800a26e:	693b      	ldr	r3, [r7, #16]
 800a270:	2225      	movs	r2, #37	; 0x25
 800a272:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a276:	693b      	ldr	r3, [r7, #16]
 800a278:	2201      	movs	r2, #1
 800a27a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a27e:	693b      	ldr	r3, [r7, #16]
 800a280:	2202      	movs	r2, #2
 800a282:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800a286:	693b      	ldr	r3, [r7, #16]
 800a288:	f103 0210 	add.w	r2, r3, #16
 800a28c:	693b      	ldr	r3, [r7, #16]
 800a28e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a292:	2301      	movs	r3, #1
 800a294:	75fb      	strb	r3, [r7, #23]
      break;
 800a296:	e038      	b.n	800a30a <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a298:	7afb      	ldrb	r3, [r7, #11]
 800a29a:	4619      	mov	r1, r3
 800a29c:	68f8      	ldr	r0, [r7, #12]
 800a29e:	f7ff fd3d 	bl	8009d1c <USBH_MSC_BOT_Process>
 800a2a2:	4603      	mov	r3, r0
 800a2a4:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800a2a6:	7dfb      	ldrb	r3, [r7, #23]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d12d      	bne.n	800a308 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800a2ac:	693b      	ldr	r3, [r7, #16]
 800a2ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a2b2:	3303      	adds	r3, #3
 800a2b4:	781b      	ldrb	r3, [r3, #0]
 800a2b6:	461a      	mov	r2, r3
 800a2b8:	693b      	ldr	r3, [r7, #16]
 800a2ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a2be:	3302      	adds	r3, #2
 800a2c0:	781b      	ldrb	r3, [r3, #0]
 800a2c2:	021b      	lsls	r3, r3, #8
 800a2c4:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800a2c6:	693b      	ldr	r3, [r7, #16]
 800a2c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a2cc:	3301      	adds	r3, #1
 800a2ce:	781b      	ldrb	r3, [r3, #0]
 800a2d0:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800a2d2:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800a2d4:	693b      	ldr	r3, [r7, #16]
 800a2d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a2da:	781b      	ldrb	r3, [r3, #0]
 800a2dc:	061b      	lsls	r3, r3, #24
 800a2de:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 800a2e4:	693b      	ldr	r3, [r7, #16]
 800a2e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a2ea:	3307      	adds	r3, #7
 800a2ec:	781b      	ldrb	r3, [r3, #0]
 800a2ee:	b29a      	uxth	r2, r3
 800a2f0:	693b      	ldr	r3, [r7, #16]
 800a2f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a2f6:	3306      	adds	r3, #6
 800a2f8:	781b      	ldrb	r3, [r3, #0]
 800a2fa:	b29b      	uxth	r3, r3
 800a2fc:	021b      	lsls	r3, r3, #8
 800a2fe:	b29b      	uxth	r3, r3
 800a300:	4313      	orrs	r3, r2
 800a302:	b29a      	uxth	r2, r3
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	809a      	strh	r2, [r3, #4]
      break;
 800a308:	bf00      	nop
  }

  return error;
 800a30a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a30c:	4618      	mov	r0, r3
 800a30e:	3718      	adds	r7, #24
 800a310:	46bd      	mov	sp, r7
 800a312:	bd80      	pop	{r7, pc}

0800a314 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 800a314:	b580      	push	{r7, lr}
 800a316:	b086      	sub	sp, #24
 800a318:	af00      	add	r7, sp, #0
 800a31a:	60f8      	str	r0, [r7, #12]
 800a31c:	460b      	mov	r3, r1
 800a31e:	607a      	str	r2, [r7, #4]
 800a320:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800a322:	2302      	movs	r3, #2
 800a324:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a32c:	69db      	ldr	r3, [r3, #28]
 800a32e:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a330:	693b      	ldr	r3, [r7, #16]
 800a332:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a336:	2b01      	cmp	r3, #1
 800a338:	d002      	beq.n	800a340 <USBH_MSC_SCSI_Inquiry+0x2c>
 800a33a:	2b02      	cmp	r3, #2
 800a33c:	d03d      	beq.n	800a3ba <USBH_MSC_SCSI_Inquiry+0xa6>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 800a33e:	e089      	b.n	800a454 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 800a340:	693b      	ldr	r3, [r7, #16]
 800a342:	2224      	movs	r2, #36	; 0x24
 800a344:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800a346:	693b      	ldr	r3, [r7, #16]
 800a348:	2280      	movs	r2, #128	; 0x80
 800a34a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a34e:	693b      	ldr	r3, [r7, #16]
 800a350:	220a      	movs	r2, #10
 800a352:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800a356:	693b      	ldr	r3, [r7, #16]
 800a358:	3363      	adds	r3, #99	; 0x63
 800a35a:	220a      	movs	r2, #10
 800a35c:	2100      	movs	r1, #0
 800a35e:	4618      	mov	r0, r3
 800a360:	f005 fd04 	bl	800fd6c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 800a364:	693b      	ldr	r3, [r7, #16]
 800a366:	2212      	movs	r2, #18
 800a368:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800a36c:	7afb      	ldrb	r3, [r7, #11]
 800a36e:	015b      	lsls	r3, r3, #5
 800a370:	b2da      	uxtb	r2, r3
 800a372:	693b      	ldr	r3, [r7, #16]
 800a374:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800a378:	693b      	ldr	r3, [r7, #16]
 800a37a:	2200      	movs	r2, #0
 800a37c:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800a380:	693b      	ldr	r3, [r7, #16]
 800a382:	2200      	movs	r2, #0
 800a384:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 800a388:	693b      	ldr	r3, [r7, #16]
 800a38a:	2224      	movs	r2, #36	; 0x24
 800a38c:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800a390:	693b      	ldr	r3, [r7, #16]
 800a392:	2200      	movs	r2, #0
 800a394:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a398:	693b      	ldr	r3, [r7, #16]
 800a39a:	2201      	movs	r2, #1
 800a39c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a3a0:	693b      	ldr	r3, [r7, #16]
 800a3a2:	2202      	movs	r2, #2
 800a3a4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800a3a8:	693b      	ldr	r3, [r7, #16]
 800a3aa:	f103 0210 	add.w	r2, r3, #16
 800a3ae:	693b      	ldr	r3, [r7, #16]
 800a3b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a3b4:	2301      	movs	r3, #1
 800a3b6:	75fb      	strb	r3, [r7, #23]
      break;
 800a3b8:	e04c      	b.n	800a454 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a3ba:	7afb      	ldrb	r3, [r7, #11]
 800a3bc:	4619      	mov	r1, r3
 800a3be:	68f8      	ldr	r0, [r7, #12]
 800a3c0:	f7ff fcac 	bl	8009d1c <USBH_MSC_BOT_Process>
 800a3c4:	4603      	mov	r3, r0
 800a3c6:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800a3c8:	7dfb      	ldrb	r3, [r7, #23]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d141      	bne.n	800a452 <USBH_MSC_SCSI_Inquiry+0x13e>
        (void)USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800a3ce:	2222      	movs	r2, #34	; 0x22
 800a3d0:	2100      	movs	r1, #0
 800a3d2:	6878      	ldr	r0, [r7, #4]
 800a3d4:	f005 fcca 	bl	800fd6c <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800a3d8:	693b      	ldr	r3, [r7, #16]
 800a3da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a3de:	781b      	ldrb	r3, [r3, #0]
 800a3e0:	f003 031f 	and.w	r3, r3, #31
 800a3e4:	b2da      	uxtb	r2, r3
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800a3ea:	693b      	ldr	r3, [r7, #16]
 800a3ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a3f0:	781b      	ldrb	r3, [r3, #0]
 800a3f2:	095b      	lsrs	r3, r3, #5
 800a3f4:	b2da      	uxtb	r2, r3
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800a3fa:	693b      	ldr	r3, [r7, #16]
 800a3fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a400:	3301      	adds	r3, #1
 800a402:	781b      	ldrb	r3, [r3, #0]
 800a404:	b25b      	sxtb	r3, r3
 800a406:	2b00      	cmp	r3, #0
 800a408:	da03      	bge.n	800a412 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	2201      	movs	r2, #1
 800a40e:	709a      	strb	r2, [r3, #2]
 800a410:	e002      	b.n	800a418 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	2200      	movs	r2, #0
 800a416:	709a      	strb	r2, [r3, #2]
        (void)USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	1cd8      	adds	r0, r3, #3
 800a41c:	693b      	ldr	r3, [r7, #16]
 800a41e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a422:	3308      	adds	r3, #8
 800a424:	2208      	movs	r2, #8
 800a426:	4619      	mov	r1, r3
 800a428:	f005 fd0e 	bl	800fe48 <memcpy>
        (void)USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	f103 000c 	add.w	r0, r3, #12
 800a432:	693b      	ldr	r3, [r7, #16]
 800a434:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a438:	3310      	adds	r3, #16
 800a43a:	2210      	movs	r2, #16
 800a43c:	4619      	mov	r1, r3
 800a43e:	f005 fd03 	bl	800fe48 <memcpy>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	331d      	adds	r3, #29
 800a446:	693a      	ldr	r2, [r7, #16]
 800a448:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800a44c:	3220      	adds	r2, #32
 800a44e:	6812      	ldr	r2, [r2, #0]
 800a450:	601a      	str	r2, [r3, #0]
      break;
 800a452:	bf00      	nop
  }

  return error;
 800a454:	7dfb      	ldrb	r3, [r7, #23]
}
 800a456:	4618      	mov	r0, r3
 800a458:	3718      	adds	r7, #24
 800a45a:	46bd      	mov	sp, r7
 800a45c:	bd80      	pop	{r7, pc}

0800a45e <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800a45e:	b580      	push	{r7, lr}
 800a460:	b086      	sub	sp, #24
 800a462:	af00      	add	r7, sp, #0
 800a464:	60f8      	str	r0, [r7, #12]
 800a466:	460b      	mov	r3, r1
 800a468:	607a      	str	r2, [r7, #4]
 800a46a:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800a46c:	2302      	movs	r3, #2
 800a46e:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a476:	69db      	ldr	r3, [r3, #28]
 800a478:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a47a:	693b      	ldr	r3, [r7, #16]
 800a47c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a480:	2b01      	cmp	r3, #1
 800a482:	d002      	beq.n	800a48a <USBH_MSC_SCSI_RequestSense+0x2c>
 800a484:	2b02      	cmp	r3, #2
 800a486:	d03d      	beq.n	800a504 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 800a488:	e05d      	b.n	800a546 <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800a48a:	693b      	ldr	r3, [r7, #16]
 800a48c:	220e      	movs	r2, #14
 800a48e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800a490:	693b      	ldr	r3, [r7, #16]
 800a492:	2280      	movs	r2, #128	; 0x80
 800a494:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a498:	693b      	ldr	r3, [r7, #16]
 800a49a:	220a      	movs	r2, #10
 800a49c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a4a0:	693b      	ldr	r3, [r7, #16]
 800a4a2:	3363      	adds	r3, #99	; 0x63
 800a4a4:	2210      	movs	r2, #16
 800a4a6:	2100      	movs	r1, #0
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	f005 fc5f 	bl	800fd6c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 800a4ae:	693b      	ldr	r3, [r7, #16]
 800a4b0:	2203      	movs	r2, #3
 800a4b2:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800a4b6:	7afb      	ldrb	r3, [r7, #11]
 800a4b8:	015b      	lsls	r3, r3, #5
 800a4ba:	b2da      	uxtb	r2, r3
 800a4bc:	693b      	ldr	r3, [r7, #16]
 800a4be:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800a4c2:	693b      	ldr	r3, [r7, #16]
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800a4ca:	693b      	ldr	r3, [r7, #16]
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800a4d2:	693b      	ldr	r3, [r7, #16]
 800a4d4:	220e      	movs	r2, #14
 800a4d6:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800a4da:	693b      	ldr	r3, [r7, #16]
 800a4dc:	2200      	movs	r2, #0
 800a4de:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a4e2:	693b      	ldr	r3, [r7, #16]
 800a4e4:	2201      	movs	r2, #1
 800a4e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a4ea:	693b      	ldr	r3, [r7, #16]
 800a4ec:	2202      	movs	r2, #2
 800a4ee:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800a4f2:	693b      	ldr	r3, [r7, #16]
 800a4f4:	f103 0210 	add.w	r2, r3, #16
 800a4f8:	693b      	ldr	r3, [r7, #16]
 800a4fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a4fe:	2301      	movs	r3, #1
 800a500:	75fb      	strb	r3, [r7, #23]
      break;
 800a502:	e020      	b.n	800a546 <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a504:	7afb      	ldrb	r3, [r7, #11]
 800a506:	4619      	mov	r1, r3
 800a508:	68f8      	ldr	r0, [r7, #12]
 800a50a:	f7ff fc07 	bl	8009d1c <USBH_MSC_BOT_Process>
 800a50e:	4603      	mov	r3, r0
 800a510:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800a512:	7dfb      	ldrb	r3, [r7, #23]
 800a514:	2b00      	cmp	r3, #0
 800a516:	d115      	bne.n	800a544 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800a518:	693b      	ldr	r3, [r7, #16]
 800a51a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a51e:	3302      	adds	r3, #2
 800a520:	781b      	ldrb	r3, [r3, #0]
 800a522:	f003 030f 	and.w	r3, r3, #15
 800a526:	b2da      	uxtb	r2, r3
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800a52c:	693b      	ldr	r3, [r7, #16]
 800a52e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a532:	7b1a      	ldrb	r2, [r3, #12]
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800a538:	693b      	ldr	r3, [r7, #16]
 800a53a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a53e:	7b5a      	ldrb	r2, [r3, #13]
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	709a      	strb	r2, [r3, #2]
      break;
 800a544:	bf00      	nop
  }

  return error;
 800a546:	7dfb      	ldrb	r3, [r7, #23]
}
 800a548:	4618      	mov	r0, r3
 800a54a:	3718      	adds	r7, #24
 800a54c:	46bd      	mov	sp, r7
 800a54e:	bd80      	pop	{r7, pc}

0800a550 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b086      	sub	sp, #24
 800a554:	af00      	add	r7, sp, #0
 800a556:	60f8      	str	r0, [r7, #12]
 800a558:	607a      	str	r2, [r7, #4]
 800a55a:	603b      	str	r3, [r7, #0]
 800a55c:	460b      	mov	r3, r1
 800a55e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800a560:	2302      	movs	r3, #2
 800a562:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a56a:	69db      	ldr	r3, [r3, #28]
 800a56c:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a56e:	693b      	ldr	r3, [r7, #16]
 800a570:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a574:	2b01      	cmp	r3, #1
 800a576:	d002      	beq.n	800a57e <USBH_MSC_SCSI_Write+0x2e>
 800a578:	2b02      	cmp	r3, #2
 800a57a:	d047      	beq.n	800a60c <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800a57c:	e04e      	b.n	800a61c <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800a57e:	693b      	ldr	r3, [r7, #16]
 800a580:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800a584:	461a      	mov	r2, r3
 800a586:	6a3b      	ldr	r3, [r7, #32]
 800a588:	fb03 f202 	mul.w	r2, r3, r2
 800a58c:	693b      	ldr	r3, [r7, #16]
 800a58e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800a590:	693b      	ldr	r3, [r7, #16]
 800a592:	2200      	movs	r2, #0
 800a594:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a598:	693b      	ldr	r3, [r7, #16]
 800a59a:	220a      	movs	r2, #10
 800a59c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a5a0:	693b      	ldr	r3, [r7, #16]
 800a5a2:	3363      	adds	r3, #99	; 0x63
 800a5a4:	2210      	movs	r2, #16
 800a5a6:	2100      	movs	r1, #0
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	f005 fbdf 	bl	800fd6c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800a5ae:	693b      	ldr	r3, [r7, #16]
 800a5b0:	222a      	movs	r2, #42	; 0x2a
 800a5b2:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800a5b6:	79fa      	ldrb	r2, [r7, #7]
 800a5b8:	693b      	ldr	r3, [r7, #16]
 800a5ba:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800a5be:	79ba      	ldrb	r2, [r7, #6]
 800a5c0:	693b      	ldr	r3, [r7, #16]
 800a5c2:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800a5c6:	797a      	ldrb	r2, [r7, #5]
 800a5c8:	693b      	ldr	r3, [r7, #16]
 800a5ca:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800a5ce:	1d3b      	adds	r3, r7, #4
 800a5d0:	781a      	ldrb	r2, [r3, #0]
 800a5d2:	693b      	ldr	r3, [r7, #16]
 800a5d4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800a5d8:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800a5dc:	693b      	ldr	r3, [r7, #16]
 800a5de:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800a5e2:	f107 0320 	add.w	r3, r7, #32
 800a5e6:	781a      	ldrb	r2, [r3, #0]
 800a5e8:	693b      	ldr	r3, [r7, #16]
 800a5ea:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a5ee:	693b      	ldr	r3, [r7, #16]
 800a5f0:	2201      	movs	r2, #1
 800a5f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a5f6:	693b      	ldr	r3, [r7, #16]
 800a5f8:	2202      	movs	r2, #2
 800a5fa:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800a5fe:	693b      	ldr	r3, [r7, #16]
 800a600:	683a      	ldr	r2, [r7, #0]
 800a602:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a606:	2301      	movs	r3, #1
 800a608:	75fb      	strb	r3, [r7, #23]
      break;
 800a60a:	e007      	b.n	800a61c <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a60c:	7afb      	ldrb	r3, [r7, #11]
 800a60e:	4619      	mov	r1, r3
 800a610:	68f8      	ldr	r0, [r7, #12]
 800a612:	f7ff fb83 	bl	8009d1c <USBH_MSC_BOT_Process>
 800a616:	4603      	mov	r3, r0
 800a618:	75fb      	strb	r3, [r7, #23]
      break;
 800a61a:	bf00      	nop
  }

  return error;
 800a61c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a61e:	4618      	mov	r0, r3
 800a620:	3718      	adds	r7, #24
 800a622:	46bd      	mov	sp, r7
 800a624:	bd80      	pop	{r7, pc}

0800a626 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800a626:	b580      	push	{r7, lr}
 800a628:	b086      	sub	sp, #24
 800a62a:	af00      	add	r7, sp, #0
 800a62c:	60f8      	str	r0, [r7, #12]
 800a62e:	607a      	str	r2, [r7, #4]
 800a630:	603b      	str	r3, [r7, #0]
 800a632:	460b      	mov	r3, r1
 800a634:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800a636:	2302      	movs	r3, #2
 800a638:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a640:	69db      	ldr	r3, [r3, #28]
 800a642:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a644:	693b      	ldr	r3, [r7, #16]
 800a646:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a64a:	2b01      	cmp	r3, #1
 800a64c:	d002      	beq.n	800a654 <USBH_MSC_SCSI_Read+0x2e>
 800a64e:	2b02      	cmp	r3, #2
 800a650:	d047      	beq.n	800a6e2 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800a652:	e04e      	b.n	800a6f2 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800a654:	693b      	ldr	r3, [r7, #16]
 800a656:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800a65a:	461a      	mov	r2, r3
 800a65c:	6a3b      	ldr	r3, [r7, #32]
 800a65e:	fb03 f202 	mul.w	r2, r3, r2
 800a662:	693b      	ldr	r3, [r7, #16]
 800a664:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800a666:	693b      	ldr	r3, [r7, #16]
 800a668:	2280      	movs	r2, #128	; 0x80
 800a66a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a66e:	693b      	ldr	r3, [r7, #16]
 800a670:	220a      	movs	r2, #10
 800a672:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a676:	693b      	ldr	r3, [r7, #16]
 800a678:	3363      	adds	r3, #99	; 0x63
 800a67a:	2210      	movs	r2, #16
 800a67c:	2100      	movs	r1, #0
 800a67e:	4618      	mov	r0, r3
 800a680:	f005 fb74 	bl	800fd6c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 800a684:	693b      	ldr	r3, [r7, #16]
 800a686:	2228      	movs	r2, #40	; 0x28
 800a688:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800a68c:	79fa      	ldrb	r2, [r7, #7]
 800a68e:	693b      	ldr	r3, [r7, #16]
 800a690:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800a694:	79ba      	ldrb	r2, [r7, #6]
 800a696:	693b      	ldr	r3, [r7, #16]
 800a698:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800a69c:	797a      	ldrb	r2, [r7, #5]
 800a69e:	693b      	ldr	r3, [r7, #16]
 800a6a0:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800a6a4:	1d3b      	adds	r3, r7, #4
 800a6a6:	781a      	ldrb	r2, [r3, #0]
 800a6a8:	693b      	ldr	r3, [r7, #16]
 800a6aa:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800a6ae:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800a6b2:	693b      	ldr	r3, [r7, #16]
 800a6b4:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800a6b8:	f107 0320 	add.w	r3, r7, #32
 800a6bc:	781a      	ldrb	r2, [r3, #0]
 800a6be:	693b      	ldr	r3, [r7, #16]
 800a6c0:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a6c4:	693b      	ldr	r3, [r7, #16]
 800a6c6:	2201      	movs	r2, #1
 800a6c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a6cc:	693b      	ldr	r3, [r7, #16]
 800a6ce:	2202      	movs	r2, #2
 800a6d0:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800a6d4:	693b      	ldr	r3, [r7, #16]
 800a6d6:	683a      	ldr	r2, [r7, #0]
 800a6d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a6dc:	2301      	movs	r3, #1
 800a6de:	75fb      	strb	r3, [r7, #23]
      break;
 800a6e0:	e007      	b.n	800a6f2 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a6e2:	7afb      	ldrb	r3, [r7, #11]
 800a6e4:	4619      	mov	r1, r3
 800a6e6:	68f8      	ldr	r0, [r7, #12]
 800a6e8:	f7ff fb18 	bl	8009d1c <USBH_MSC_BOT_Process>
 800a6ec:	4603      	mov	r3, r0
 800a6ee:	75fb      	strb	r3, [r7, #23]
      break;
 800a6f0:	bf00      	nop
  }

  return error;
 800a6f2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	3718      	adds	r7, #24
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	bd80      	pop	{r7, pc}

0800a6fc <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	b084      	sub	sp, #16
 800a700:	af00      	add	r7, sp, #0
 800a702:	60f8      	str	r0, [r7, #12]
 800a704:	60b9      	str	r1, [r7, #8]
 800a706:	4613      	mov	r3, r2
 800a708:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d101      	bne.n	800a714 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800a710:	2302      	movs	r3, #2
 800a712:	e029      	b.n	800a768 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	79fa      	ldrb	r2, [r7, #7]
 800a718:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	2200      	movs	r2, #0
 800a720:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	2200      	movs	r2, #0
 800a728:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800a72c:	68f8      	ldr	r0, [r7, #12]
 800a72e:	f000 f81f 	bl	800a770 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	2200      	movs	r2, #0
 800a736:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	2200      	movs	r2, #0
 800a73e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	2200      	movs	r2, #0
 800a746:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	2200      	movs	r2, #0
 800a74e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800a752:	68bb      	ldr	r3, [r7, #8]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d003      	beq.n	800a760 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	68ba      	ldr	r2, [r7, #8]
 800a75c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800a760:	68f8      	ldr	r0, [r7, #12]
 800a762:	f005 f823 	bl	800f7ac <USBH_LL_Init>

  return USBH_OK;
 800a766:	2300      	movs	r3, #0
}
 800a768:	4618      	mov	r0, r3
 800a76a:	3710      	adds	r7, #16
 800a76c:	46bd      	mov	sp, r7
 800a76e:	bd80      	pop	{r7, pc}

0800a770 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800a770:	b480      	push	{r7}
 800a772:	b085      	sub	sp, #20
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800a778:	2300      	movs	r3, #0
 800a77a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a77c:	2300      	movs	r3, #0
 800a77e:	60fb      	str	r3, [r7, #12]
 800a780:	e009      	b.n	800a796 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800a782:	687a      	ldr	r2, [r7, #4]
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	33e0      	adds	r3, #224	; 0xe0
 800a788:	009b      	lsls	r3, r3, #2
 800a78a:	4413      	add	r3, r2
 800a78c:	2200      	movs	r2, #0
 800a78e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	3301      	adds	r3, #1
 800a794:	60fb      	str	r3, [r7, #12]
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	2b0f      	cmp	r3, #15
 800a79a:	d9f2      	bls.n	800a782 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a79c:	2300      	movs	r3, #0
 800a79e:	60fb      	str	r3, [r7, #12]
 800a7a0:	e009      	b.n	800a7b6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800a7a2:	687a      	ldr	r2, [r7, #4]
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	4413      	add	r3, r2
 800a7a8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a7ac:	2200      	movs	r2, #0
 800a7ae:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	3301      	adds	r3, #1
 800a7b4:	60fb      	str	r3, [r7, #12]
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a7bc:	d3f1      	bcc.n	800a7a2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	2200      	movs	r2, #0
 800a7c8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	2201      	movs	r2, #1
 800a7ce:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2201      	movs	r2, #1
 800a7dc:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	2240      	movs	r2, #64	; 0x40
 800a7e2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	2201      	movs	r2, #1
 800a7f6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	2200      	movs	r2, #0
 800a806:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800a80a:	2300      	movs	r3, #0
}
 800a80c:	4618      	mov	r0, r3
 800a80e:	3714      	adds	r7, #20
 800a810:	46bd      	mov	sp, r7
 800a812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a816:	4770      	bx	lr

0800a818 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800a818:	b480      	push	{r7}
 800a81a:	b085      	sub	sp, #20
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
 800a820:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800a822:	2300      	movs	r3, #0
 800a824:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800a826:	683b      	ldr	r3, [r7, #0]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d016      	beq.n	800a85a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a832:	2b00      	cmp	r3, #0
 800a834:	d10e      	bne.n	800a854 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a83c:	1c59      	adds	r1, r3, #1
 800a83e:	687a      	ldr	r2, [r7, #4]
 800a840:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800a844:	687a      	ldr	r2, [r7, #4]
 800a846:	33de      	adds	r3, #222	; 0xde
 800a848:	6839      	ldr	r1, [r7, #0]
 800a84a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800a84e:	2300      	movs	r3, #0
 800a850:	73fb      	strb	r3, [r7, #15]
 800a852:	e004      	b.n	800a85e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800a854:	2302      	movs	r3, #2
 800a856:	73fb      	strb	r3, [r7, #15]
 800a858:	e001      	b.n	800a85e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800a85a:	2302      	movs	r3, #2
 800a85c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a85e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a860:	4618      	mov	r0, r3
 800a862:	3714      	adds	r7, #20
 800a864:	46bd      	mov	sp, r7
 800a866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86a:	4770      	bx	lr

0800a86c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800a86c:	b480      	push	{r7}
 800a86e:	b085      	sub	sp, #20
 800a870:	af00      	add	r7, sp, #0
 800a872:	6078      	str	r0, [r7, #4]
 800a874:	460b      	mov	r3, r1
 800a876:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800a878:	2300      	movs	r3, #0
 800a87a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800a882:	78fa      	ldrb	r2, [r7, #3]
 800a884:	429a      	cmp	r2, r3
 800a886:	d204      	bcs.n	800a892 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	78fa      	ldrb	r2, [r7, #3]
 800a88c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800a890:	e001      	b.n	800a896 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800a892:	2302      	movs	r3, #2
 800a894:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a896:	7bfb      	ldrb	r3, [r7, #15]
}
 800a898:	4618      	mov	r0, r3
 800a89a:	3714      	adds	r7, #20
 800a89c:	46bd      	mov	sp, r7
 800a89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a2:	4770      	bx	lr

0800a8a4 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800a8a4:	b480      	push	{r7}
 800a8a6:	b087      	sub	sp, #28
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]
 800a8ac:	4608      	mov	r0, r1
 800a8ae:	4611      	mov	r1, r2
 800a8b0:	461a      	mov	r2, r3
 800a8b2:	4603      	mov	r3, r0
 800a8b4:	70fb      	strb	r3, [r7, #3]
 800a8b6:	460b      	mov	r3, r1
 800a8b8:	70bb      	strb	r3, [r7, #2]
 800a8ba:	4613      	mov	r3, r2
 800a8bc:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800a8be:	2300      	movs	r3, #0
 800a8c0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a8cc:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a8ce:	e025      	b.n	800a91c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800a8d0:	7dfb      	ldrb	r3, [r7, #23]
 800a8d2:	221a      	movs	r2, #26
 800a8d4:	fb02 f303 	mul.w	r3, r2, r3
 800a8d8:	3308      	adds	r3, #8
 800a8da:	68fa      	ldr	r2, [r7, #12]
 800a8dc:	4413      	add	r3, r2
 800a8de:	3302      	adds	r3, #2
 800a8e0:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a8e2:	693b      	ldr	r3, [r7, #16]
 800a8e4:	795b      	ldrb	r3, [r3, #5]
 800a8e6:	78fa      	ldrb	r2, [r7, #3]
 800a8e8:	429a      	cmp	r2, r3
 800a8ea:	d002      	beq.n	800a8f2 <USBH_FindInterface+0x4e>
 800a8ec:	78fb      	ldrb	r3, [r7, #3]
 800a8ee:	2bff      	cmp	r3, #255	; 0xff
 800a8f0:	d111      	bne.n	800a916 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a8f2:	693b      	ldr	r3, [r7, #16]
 800a8f4:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a8f6:	78ba      	ldrb	r2, [r7, #2]
 800a8f8:	429a      	cmp	r2, r3
 800a8fa:	d002      	beq.n	800a902 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a8fc:	78bb      	ldrb	r3, [r7, #2]
 800a8fe:	2bff      	cmp	r3, #255	; 0xff
 800a900:	d109      	bne.n	800a916 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a902:	693b      	ldr	r3, [r7, #16]
 800a904:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a906:	787a      	ldrb	r2, [r7, #1]
 800a908:	429a      	cmp	r2, r3
 800a90a:	d002      	beq.n	800a912 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a90c:	787b      	ldrb	r3, [r7, #1]
 800a90e:	2bff      	cmp	r3, #255	; 0xff
 800a910:	d101      	bne.n	800a916 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800a912:	7dfb      	ldrb	r3, [r7, #23]
 800a914:	e006      	b.n	800a924 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800a916:	7dfb      	ldrb	r3, [r7, #23]
 800a918:	3301      	adds	r3, #1
 800a91a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a91c:	7dfb      	ldrb	r3, [r7, #23]
 800a91e:	2b01      	cmp	r3, #1
 800a920:	d9d6      	bls.n	800a8d0 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800a922:	23ff      	movs	r3, #255	; 0xff
}
 800a924:	4618      	mov	r0, r3
 800a926:	371c      	adds	r7, #28
 800a928:	46bd      	mov	sp, r7
 800a92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92e:	4770      	bx	lr

0800a930 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800a930:	b580      	push	{r7, lr}
 800a932:	b082      	sub	sp, #8
 800a934:	af00      	add	r7, sp, #0
 800a936:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800a938:	6878      	ldr	r0, [r7, #4]
 800a93a:	f004 ff73 	bl	800f824 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800a93e:	2101      	movs	r1, #1
 800a940:	6878      	ldr	r0, [r7, #4]
 800a942:	f005 f88c 	bl	800fa5e <USBH_LL_DriverVBUS>

  return USBH_OK;
 800a946:	2300      	movs	r3, #0
}
 800a948:	4618      	mov	r0, r3
 800a94a:	3708      	adds	r7, #8
 800a94c:	46bd      	mov	sp, r7
 800a94e:	bd80      	pop	{r7, pc}

0800a950 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800a950:	b580      	push	{r7, lr}
 800a952:	b088      	sub	sp, #32
 800a954:	af04      	add	r7, sp, #16
 800a956:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800a958:	2302      	movs	r3, #2
 800a95a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800a95c:	2300      	movs	r3, #0
 800a95e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800a966:	b2db      	uxtb	r3, r3
 800a968:	2b01      	cmp	r3, #1
 800a96a:	d102      	bne.n	800a972 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	2203      	movs	r2, #3
 800a970:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	781b      	ldrb	r3, [r3, #0]
 800a976:	b2db      	uxtb	r3, r3
 800a978:	2b0b      	cmp	r3, #11
 800a97a:	f200 81be 	bhi.w	800acfa <USBH_Process+0x3aa>
 800a97e:	a201      	add	r2, pc, #4	; (adr r2, 800a984 <USBH_Process+0x34>)
 800a980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a984:	0800a9b5 	.word	0x0800a9b5
 800a988:	0800a9e7 	.word	0x0800a9e7
 800a98c:	0800aa4f 	.word	0x0800aa4f
 800a990:	0800ac95 	.word	0x0800ac95
 800a994:	0800acfb 	.word	0x0800acfb
 800a998:	0800aaf3 	.word	0x0800aaf3
 800a99c:	0800ac3b 	.word	0x0800ac3b
 800a9a0:	0800ab29 	.word	0x0800ab29
 800a9a4:	0800ab49 	.word	0x0800ab49
 800a9a8:	0800ab69 	.word	0x0800ab69
 800a9ac:	0800abad 	.word	0x0800abad
 800a9b0:	0800ac7d 	.word	0x0800ac7d
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a9ba:	b2db      	uxtb	r3, r3
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	f000 819e 	beq.w	800acfe <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	2201      	movs	r2, #1
 800a9c6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800a9c8:	20c8      	movs	r0, #200	; 0xc8
 800a9ca:	f005 f8bf 	bl	800fb4c <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800a9ce:	6878      	ldr	r0, [r7, #4]
 800a9d0:	f004 ff85 	bl	800f8de <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	2200      	movs	r2, #0
 800a9e0:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a9e4:	e18b      	b.n	800acfe <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800a9ec:	2b01      	cmp	r3, #1
 800a9ee:	d107      	bne.n	800aa00 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	2202      	movs	r2, #2
 800a9fc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a9fe:	e18d      	b.n	800ad1c <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800aa06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800aa0a:	d914      	bls.n	800aa36 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800aa12:	3301      	adds	r3, #1
 800aa14:	b2da      	uxtb	r2, r3
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800aa22:	2b03      	cmp	r3, #3
 800aa24:	d903      	bls.n	800aa2e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	220d      	movs	r2, #13
 800aa2a:	701a      	strb	r2, [r3, #0]
      break;
 800aa2c:	e176      	b.n	800ad1c <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	2200      	movs	r2, #0
 800aa32:	701a      	strb	r2, [r3, #0]
      break;
 800aa34:	e172      	b.n	800ad1c <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800aa3c:	f103 020a 	add.w	r2, r3, #10
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800aa46:	200a      	movs	r0, #10
 800aa48:	f005 f880 	bl	800fb4c <USBH_Delay>
      break;
 800aa4c:	e166      	b.n	800ad1c <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d005      	beq.n	800aa64 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800aa5e:	2104      	movs	r1, #4
 800aa60:	6878      	ldr	r0, [r7, #4]
 800aa62:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800aa64:	2064      	movs	r0, #100	; 0x64
 800aa66:	f005 f871 	bl	800fb4c <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800aa6a:	6878      	ldr	r0, [r7, #4]
 800aa6c:	f004 ff10 	bl	800f890 <USBH_LL_GetSpeed>
 800aa70:	4603      	mov	r3, r0
 800aa72:	461a      	mov	r2, r3
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	2205      	movs	r2, #5
 800aa7e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800aa80:	2100      	movs	r1, #0
 800aa82:	6878      	ldr	r0, [r7, #4]
 800aa84:	f001 fa2b 	bl	800bede <USBH_AllocPipe>
 800aa88:	4603      	mov	r3, r0
 800aa8a:	461a      	mov	r2, r3
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800aa90:	2180      	movs	r1, #128	; 0x80
 800aa92:	6878      	ldr	r0, [r7, #4]
 800aa94:	f001 fa23 	bl	800bede <USBH_AllocPipe>
 800aa98:	4603      	mov	r3, r0
 800aa9a:	461a      	mov	r2, r3
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	7919      	ldrb	r1, [r3, #4]
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800aab0:	687a      	ldr	r2, [r7, #4]
 800aab2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800aab4:	b292      	uxth	r2, r2
 800aab6:	9202      	str	r2, [sp, #8]
 800aab8:	2200      	movs	r2, #0
 800aaba:	9201      	str	r2, [sp, #4]
 800aabc:	9300      	str	r3, [sp, #0]
 800aabe:	4603      	mov	r3, r0
 800aac0:	2280      	movs	r2, #128	; 0x80
 800aac2:	6878      	ldr	r0, [r7, #4]
 800aac4:	f001 f9dc 	bl	800be80 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	7959      	ldrb	r1, [r3, #5]
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800aad8:	687a      	ldr	r2, [r7, #4]
 800aada:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800aadc:	b292      	uxth	r2, r2
 800aade:	9202      	str	r2, [sp, #8]
 800aae0:	2200      	movs	r2, #0
 800aae2:	9201      	str	r2, [sp, #4]
 800aae4:	9300      	str	r3, [sp, #0]
 800aae6:	4603      	mov	r3, r0
 800aae8:	2200      	movs	r2, #0
 800aaea:	6878      	ldr	r0, [r7, #4]
 800aaec:	f001 f9c8 	bl	800be80 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800aaf0:	e114      	b.n	800ad1c <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800aaf2:	6878      	ldr	r0, [r7, #4]
 800aaf4:	f000 f918 	bl	800ad28 <USBH_HandleEnum>
 800aaf8:	4603      	mov	r3, r0
 800aafa:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800aafc:	7bbb      	ldrb	r3, [r7, #14]
 800aafe:	b2db      	uxtb	r3, r3
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	f040 80fe 	bne.w	800ad02 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	2200      	movs	r2, #0
 800ab0a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800ab14:	2b01      	cmp	r3, #1
 800ab16:	d103      	bne.n	800ab20 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	2208      	movs	r2, #8
 800ab1c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800ab1e:	e0f0      	b.n	800ad02 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	2207      	movs	r2, #7
 800ab24:	701a      	strb	r2, [r3, #0]
      break;
 800ab26:	e0ec      	b.n	800ad02 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	f000 80e9 	beq.w	800ad06 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ab3a:	2101      	movs	r1, #1
 800ab3c:	6878      	ldr	r0, [r7, #4]
 800ab3e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	2208      	movs	r2, #8
 800ab44:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800ab46:	e0de      	b.n	800ad06 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800ab4e:	b29b      	uxth	r3, r3
 800ab50:	4619      	mov	r1, r3
 800ab52:	6878      	ldr	r0, [r7, #4]
 800ab54:	f000 fc2c 	bl	800b3b0 <USBH_SetCfg>
 800ab58:	4603      	mov	r3, r0
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	f040 80d5 	bne.w	800ad0a <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	2209      	movs	r2, #9
 800ab64:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ab66:	e0d0      	b.n	800ad0a <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800ab6e:	f003 0320 	and.w	r3, r3, #32
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d016      	beq.n	800aba4 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800ab76:	2101      	movs	r1, #1
 800ab78:	6878      	ldr	r0, [r7, #4]
 800ab7a:	f000 fc3c 	bl	800b3f6 <USBH_SetFeature>
 800ab7e:	4603      	mov	r3, r0
 800ab80:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800ab82:	7bbb      	ldrb	r3, [r7, #14]
 800ab84:	b2db      	uxtb	r3, r3
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d103      	bne.n	800ab92 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	220a      	movs	r2, #10
 800ab8e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ab90:	e0bd      	b.n	800ad0e <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800ab92:	7bbb      	ldrb	r3, [r7, #14]
 800ab94:	b2db      	uxtb	r3, r3
 800ab96:	2b03      	cmp	r3, #3
 800ab98:	f040 80b9 	bne.w	800ad0e <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	220a      	movs	r2, #10
 800aba0:	701a      	strb	r2, [r3, #0]
      break;
 800aba2:	e0b4      	b.n	800ad0e <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	220a      	movs	r2, #10
 800aba8:	701a      	strb	r2, [r3, #0]
      break;
 800abaa:	e0b0      	b.n	800ad0e <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	f000 80ad 	beq.w	800ad12 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	2200      	movs	r2, #0
 800abbc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800abc0:	2300      	movs	r3, #0
 800abc2:	73fb      	strb	r3, [r7, #15]
 800abc4:	e016      	b.n	800abf4 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800abc6:	7bfa      	ldrb	r2, [r7, #15]
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	32de      	adds	r2, #222	; 0xde
 800abcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abd0:	791a      	ldrb	r2, [r3, #4]
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800abd8:	429a      	cmp	r2, r3
 800abda:	d108      	bne.n	800abee <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 800abdc:	7bfa      	ldrb	r2, [r7, #15]
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	32de      	adds	r2, #222	; 0xde
 800abe2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800abec:	e005      	b.n	800abfa <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800abee:	7bfb      	ldrb	r3, [r7, #15]
 800abf0:	3301      	adds	r3, #1
 800abf2:	73fb      	strb	r3, [r7, #15]
 800abf4:	7bfb      	ldrb	r3, [r7, #15]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d0e5      	beq.n	800abc6 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d016      	beq.n	800ac32 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ac0a:	689b      	ldr	r3, [r3, #8]
 800ac0c:	6878      	ldr	r0, [r7, #4]
 800ac0e:	4798      	blx	r3
 800ac10:	4603      	mov	r3, r0
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d109      	bne.n	800ac2a <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	2206      	movs	r2, #6
 800ac1a:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ac22:	2103      	movs	r1, #3
 800ac24:	6878      	ldr	r0, [r7, #4]
 800ac26:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ac28:	e073      	b.n	800ad12 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	220d      	movs	r2, #13
 800ac2e:	701a      	strb	r2, [r3, #0]
      break;
 800ac30:	e06f      	b.n	800ad12 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	220d      	movs	r2, #13
 800ac36:	701a      	strb	r2, [r3, #0]
      break;
 800ac38:	e06b      	b.n	800ad12 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d017      	beq.n	800ac74 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ac4a:	691b      	ldr	r3, [r3, #16]
 800ac4c:	6878      	ldr	r0, [r7, #4]
 800ac4e:	4798      	blx	r3
 800ac50:	4603      	mov	r3, r0
 800ac52:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800ac54:	7bbb      	ldrb	r3, [r7, #14]
 800ac56:	b2db      	uxtb	r3, r3
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d103      	bne.n	800ac64 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	220b      	movs	r2, #11
 800ac60:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ac62:	e058      	b.n	800ad16 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 800ac64:	7bbb      	ldrb	r3, [r7, #14]
 800ac66:	b2db      	uxtb	r3, r3
 800ac68:	2b02      	cmp	r3, #2
 800ac6a:	d154      	bne.n	800ad16 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	220d      	movs	r2, #13
 800ac70:	701a      	strb	r2, [r3, #0]
      break;
 800ac72:	e050      	b.n	800ad16 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	220d      	movs	r2, #13
 800ac78:	701a      	strb	r2, [r3, #0]
      break;
 800ac7a:	e04c      	b.n	800ad16 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d049      	beq.n	800ad1a <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ac8c:	695b      	ldr	r3, [r3, #20]
 800ac8e:	6878      	ldr	r0, [r7, #4]
 800ac90:	4798      	blx	r3
      }
      break;
 800ac92:	e042      	b.n	800ad1a <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	2200      	movs	r2, #0
 800ac98:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800ac9c:	6878      	ldr	r0, [r7, #4]
 800ac9e:	f7ff fd67 	bl	800a770 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d009      	beq.n	800acc0 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800acb2:	68db      	ldr	r3, [r3, #12]
 800acb4:	6878      	ldr	r0, [r7, #4]
 800acb6:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	2200      	movs	r2, #0
 800acbc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d005      	beq.n	800acd6 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800acd0:	2105      	movs	r1, #5
 800acd2:	6878      	ldr	r0, [r7, #4]
 800acd4:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800acdc:	b2db      	uxtb	r3, r3
 800acde:	2b01      	cmp	r3, #1
 800ace0:	d107      	bne.n	800acf2 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	2200      	movs	r2, #0
 800ace6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800acea:	6878      	ldr	r0, [r7, #4]
 800acec:	f7ff fe20 	bl	800a930 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800acf0:	e014      	b.n	800ad1c <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800acf2:	6878      	ldr	r0, [r7, #4]
 800acf4:	f004 fd96 	bl	800f824 <USBH_LL_Start>
      break;
 800acf8:	e010      	b.n	800ad1c <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800acfa:	bf00      	nop
 800acfc:	e00e      	b.n	800ad1c <USBH_Process+0x3cc>
      break;
 800acfe:	bf00      	nop
 800ad00:	e00c      	b.n	800ad1c <USBH_Process+0x3cc>
      break;
 800ad02:	bf00      	nop
 800ad04:	e00a      	b.n	800ad1c <USBH_Process+0x3cc>
    break;
 800ad06:	bf00      	nop
 800ad08:	e008      	b.n	800ad1c <USBH_Process+0x3cc>
      break;
 800ad0a:	bf00      	nop
 800ad0c:	e006      	b.n	800ad1c <USBH_Process+0x3cc>
      break;
 800ad0e:	bf00      	nop
 800ad10:	e004      	b.n	800ad1c <USBH_Process+0x3cc>
      break;
 800ad12:	bf00      	nop
 800ad14:	e002      	b.n	800ad1c <USBH_Process+0x3cc>
      break;
 800ad16:	bf00      	nop
 800ad18:	e000      	b.n	800ad1c <USBH_Process+0x3cc>
      break;
 800ad1a:	bf00      	nop
  }
  return USBH_OK;
 800ad1c:	2300      	movs	r3, #0
}
 800ad1e:	4618      	mov	r0, r3
 800ad20:	3710      	adds	r7, #16
 800ad22:	46bd      	mov	sp, r7
 800ad24:	bd80      	pop	{r7, pc}
 800ad26:	bf00      	nop

0800ad28 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b088      	sub	sp, #32
 800ad2c:	af04      	add	r7, sp, #16
 800ad2e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800ad30:	2301      	movs	r3, #1
 800ad32:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800ad34:	2301      	movs	r3, #1
 800ad36:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	785b      	ldrb	r3, [r3, #1]
 800ad3c:	2b07      	cmp	r3, #7
 800ad3e:	f200 81c1 	bhi.w	800b0c4 <USBH_HandleEnum+0x39c>
 800ad42:	a201      	add	r2, pc, #4	; (adr r2, 800ad48 <USBH_HandleEnum+0x20>)
 800ad44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad48:	0800ad69 	.word	0x0800ad69
 800ad4c:	0800ae27 	.word	0x0800ae27
 800ad50:	0800ae91 	.word	0x0800ae91
 800ad54:	0800af1f 	.word	0x0800af1f
 800ad58:	0800af89 	.word	0x0800af89
 800ad5c:	0800aff9 	.word	0x0800aff9
 800ad60:	0800b03f 	.word	0x0800b03f
 800ad64:	0800b085 	.word	0x0800b085
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800ad68:	2108      	movs	r1, #8
 800ad6a:	6878      	ldr	r0, [r7, #4]
 800ad6c:	f000 fa50 	bl	800b210 <USBH_Get_DevDesc>
 800ad70:	4603      	mov	r3, r0
 800ad72:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ad74:	7bbb      	ldrb	r3, [r7, #14]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d130      	bne.n	800addc <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	2201      	movs	r2, #1
 800ad88:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	7919      	ldrb	r1, [r3, #4]
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800ad9a:	687a      	ldr	r2, [r7, #4]
 800ad9c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800ad9e:	b292      	uxth	r2, r2
 800ada0:	9202      	str	r2, [sp, #8]
 800ada2:	2200      	movs	r2, #0
 800ada4:	9201      	str	r2, [sp, #4]
 800ada6:	9300      	str	r3, [sp, #0]
 800ada8:	4603      	mov	r3, r0
 800adaa:	2280      	movs	r2, #128	; 0x80
 800adac:	6878      	ldr	r0, [r7, #4]
 800adae:	f001 f867 	bl	800be80 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	7959      	ldrb	r1, [r3, #5]
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800adc2:	687a      	ldr	r2, [r7, #4]
 800adc4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800adc6:	b292      	uxth	r2, r2
 800adc8:	9202      	str	r2, [sp, #8]
 800adca:	2200      	movs	r2, #0
 800adcc:	9201      	str	r2, [sp, #4]
 800adce:	9300      	str	r3, [sp, #0]
 800add0:	4603      	mov	r3, r0
 800add2:	2200      	movs	r2, #0
 800add4:	6878      	ldr	r0, [r7, #4]
 800add6:	f001 f853 	bl	800be80 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800adda:	e175      	b.n	800b0c8 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800addc:	7bbb      	ldrb	r3, [r7, #14]
 800adde:	2b03      	cmp	r3, #3
 800ade0:	f040 8172 	bne.w	800b0c8 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800adea:	3301      	adds	r3, #1
 800adec:	b2da      	uxtb	r2, r3
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800adfa:	2b03      	cmp	r3, #3
 800adfc:	d903      	bls.n	800ae06 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	220d      	movs	r2, #13
 800ae02:	701a      	strb	r2, [r3, #0]
      break;
 800ae04:	e160      	b.n	800b0c8 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	795b      	ldrb	r3, [r3, #5]
 800ae0a:	4619      	mov	r1, r3
 800ae0c:	6878      	ldr	r0, [r7, #4]
 800ae0e:	f001 f887 	bl	800bf20 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	791b      	ldrb	r3, [r3, #4]
 800ae16:	4619      	mov	r1, r3
 800ae18:	6878      	ldr	r0, [r7, #4]
 800ae1a:	f001 f881 	bl	800bf20 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	2200      	movs	r2, #0
 800ae22:	701a      	strb	r2, [r3, #0]
      break;
 800ae24:	e150      	b.n	800b0c8 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800ae26:	2112      	movs	r1, #18
 800ae28:	6878      	ldr	r0, [r7, #4]
 800ae2a:	f000 f9f1 	bl	800b210 <USBH_Get_DevDesc>
 800ae2e:	4603      	mov	r3, r0
 800ae30:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ae32:	7bbb      	ldrb	r3, [r7, #14]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d103      	bne.n	800ae40 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	2202      	movs	r2, #2
 800ae3c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ae3e:	e145      	b.n	800b0cc <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ae40:	7bbb      	ldrb	r3, [r7, #14]
 800ae42:	2b03      	cmp	r3, #3
 800ae44:	f040 8142 	bne.w	800b0cc <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ae4e:	3301      	adds	r3, #1
 800ae50:	b2da      	uxtb	r2, r3
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ae5e:	2b03      	cmp	r3, #3
 800ae60:	d903      	bls.n	800ae6a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	220d      	movs	r2, #13
 800ae66:	701a      	strb	r2, [r3, #0]
      break;
 800ae68:	e130      	b.n	800b0cc <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	795b      	ldrb	r3, [r3, #5]
 800ae6e:	4619      	mov	r1, r3
 800ae70:	6878      	ldr	r0, [r7, #4]
 800ae72:	f001 f855 	bl	800bf20 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	791b      	ldrb	r3, [r3, #4]
 800ae7a:	4619      	mov	r1, r3
 800ae7c:	6878      	ldr	r0, [r7, #4]
 800ae7e:	f001 f84f 	bl	800bf20 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	2200      	movs	r2, #0
 800ae86:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	2200      	movs	r2, #0
 800ae8c:	701a      	strb	r2, [r3, #0]
      break;
 800ae8e:	e11d      	b.n	800b0cc <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800ae90:	2101      	movs	r1, #1
 800ae92:	6878      	ldr	r0, [r7, #4]
 800ae94:	f000 fa68 	bl	800b368 <USBH_SetAddress>
 800ae98:	4603      	mov	r3, r0
 800ae9a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ae9c:	7bbb      	ldrb	r3, [r7, #14]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d132      	bne.n	800af08 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800aea2:	2002      	movs	r0, #2
 800aea4:	f004 fe52 	bl	800fb4c <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	2201      	movs	r2, #1
 800aeac:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	2203      	movs	r2, #3
 800aeb4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	7919      	ldrb	r1, [r3, #4]
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800aec6:	687a      	ldr	r2, [r7, #4]
 800aec8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800aeca:	b292      	uxth	r2, r2
 800aecc:	9202      	str	r2, [sp, #8]
 800aece:	2200      	movs	r2, #0
 800aed0:	9201      	str	r2, [sp, #4]
 800aed2:	9300      	str	r3, [sp, #0]
 800aed4:	4603      	mov	r3, r0
 800aed6:	2280      	movs	r2, #128	; 0x80
 800aed8:	6878      	ldr	r0, [r7, #4]
 800aeda:	f000 ffd1 	bl	800be80 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	7959      	ldrb	r1, [r3, #5]
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800aeee:	687a      	ldr	r2, [r7, #4]
 800aef0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800aef2:	b292      	uxth	r2, r2
 800aef4:	9202      	str	r2, [sp, #8]
 800aef6:	2200      	movs	r2, #0
 800aef8:	9201      	str	r2, [sp, #4]
 800aefa:	9300      	str	r3, [sp, #0]
 800aefc:	4603      	mov	r3, r0
 800aefe:	2200      	movs	r2, #0
 800af00:	6878      	ldr	r0, [r7, #4]
 800af02:	f000 ffbd 	bl	800be80 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800af06:	e0e3      	b.n	800b0d0 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800af08:	7bbb      	ldrb	r3, [r7, #14]
 800af0a:	2b03      	cmp	r3, #3
 800af0c:	f040 80e0 	bne.w	800b0d0 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	220d      	movs	r2, #13
 800af14:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	2200      	movs	r2, #0
 800af1a:	705a      	strb	r2, [r3, #1]
      break;
 800af1c:	e0d8      	b.n	800b0d0 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800af1e:	2109      	movs	r1, #9
 800af20:	6878      	ldr	r0, [r7, #4]
 800af22:	f000 f99d 	bl	800b260 <USBH_Get_CfgDesc>
 800af26:	4603      	mov	r3, r0
 800af28:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800af2a:	7bbb      	ldrb	r3, [r7, #14]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d103      	bne.n	800af38 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	2204      	movs	r2, #4
 800af34:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800af36:	e0cd      	b.n	800b0d4 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800af38:	7bbb      	ldrb	r3, [r7, #14]
 800af3a:	2b03      	cmp	r3, #3
 800af3c:	f040 80ca 	bne.w	800b0d4 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800af46:	3301      	adds	r3, #1
 800af48:	b2da      	uxtb	r2, r3
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800af56:	2b03      	cmp	r3, #3
 800af58:	d903      	bls.n	800af62 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	220d      	movs	r2, #13
 800af5e:	701a      	strb	r2, [r3, #0]
      break;
 800af60:	e0b8      	b.n	800b0d4 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	795b      	ldrb	r3, [r3, #5]
 800af66:	4619      	mov	r1, r3
 800af68:	6878      	ldr	r0, [r7, #4]
 800af6a:	f000 ffd9 	bl	800bf20 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	791b      	ldrb	r3, [r3, #4]
 800af72:	4619      	mov	r1, r3
 800af74:	6878      	ldr	r0, [r7, #4]
 800af76:	f000 ffd3 	bl	800bf20 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	2200      	movs	r2, #0
 800af7e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	2200      	movs	r2, #0
 800af84:	701a      	strb	r2, [r3, #0]
      break;
 800af86:	e0a5      	b.n	800b0d4 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800af8e:	4619      	mov	r1, r3
 800af90:	6878      	ldr	r0, [r7, #4]
 800af92:	f000 f965 	bl	800b260 <USBH_Get_CfgDesc>
 800af96:	4603      	mov	r3, r0
 800af98:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800af9a:	7bbb      	ldrb	r3, [r7, #14]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d103      	bne.n	800afa8 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	2205      	movs	r2, #5
 800afa4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800afa6:	e097      	b.n	800b0d8 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800afa8:	7bbb      	ldrb	r3, [r7, #14]
 800afaa:	2b03      	cmp	r3, #3
 800afac:	f040 8094 	bne.w	800b0d8 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800afb6:	3301      	adds	r3, #1
 800afb8:	b2da      	uxtb	r2, r3
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800afc6:	2b03      	cmp	r3, #3
 800afc8:	d903      	bls.n	800afd2 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	220d      	movs	r2, #13
 800afce:	701a      	strb	r2, [r3, #0]
      break;
 800afd0:	e082      	b.n	800b0d8 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	795b      	ldrb	r3, [r3, #5]
 800afd6:	4619      	mov	r1, r3
 800afd8:	6878      	ldr	r0, [r7, #4]
 800afda:	f000 ffa1 	bl	800bf20 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	791b      	ldrb	r3, [r3, #4]
 800afe2:	4619      	mov	r1, r3
 800afe4:	6878      	ldr	r0, [r7, #4]
 800afe6:	f000 ff9b 	bl	800bf20 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	2200      	movs	r2, #0
 800afee:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	2200      	movs	r2, #0
 800aff4:	701a      	strb	r2, [r3, #0]
      break;
 800aff6:	e06f      	b.n	800b0d8 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800affe:	2b00      	cmp	r3, #0
 800b000:	d019      	beq.n	800b036 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b00e:	23ff      	movs	r3, #255	; 0xff
 800b010:	6878      	ldr	r0, [r7, #4]
 800b012:	f000 f949 	bl	800b2a8 <USBH_Get_StringDesc>
 800b016:	4603      	mov	r3, r0
 800b018:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b01a:	7bbb      	ldrb	r3, [r7, #14]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d103      	bne.n	800b028 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	2206      	movs	r2, #6
 800b024:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b026:	e059      	b.n	800b0dc <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b028:	7bbb      	ldrb	r3, [r7, #14]
 800b02a:	2b03      	cmp	r3, #3
 800b02c:	d156      	bne.n	800b0dc <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	2206      	movs	r2, #6
 800b032:	705a      	strb	r2, [r3, #1]
      break;
 800b034:	e052      	b.n	800b0dc <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	2206      	movs	r2, #6
 800b03a:	705a      	strb	r2, [r3, #1]
      break;
 800b03c:	e04e      	b.n	800b0dc <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800b044:	2b00      	cmp	r3, #0
 800b046:	d019      	beq.n	800b07c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b054:	23ff      	movs	r3, #255	; 0xff
 800b056:	6878      	ldr	r0, [r7, #4]
 800b058:	f000 f926 	bl	800b2a8 <USBH_Get_StringDesc>
 800b05c:	4603      	mov	r3, r0
 800b05e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b060:	7bbb      	ldrb	r3, [r7, #14]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d103      	bne.n	800b06e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	2207      	movs	r2, #7
 800b06a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b06c:	e038      	b.n	800b0e0 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b06e:	7bbb      	ldrb	r3, [r7, #14]
 800b070:	2b03      	cmp	r3, #3
 800b072:	d135      	bne.n	800b0e0 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	2207      	movs	r2, #7
 800b078:	705a      	strb	r2, [r3, #1]
      break;
 800b07a:	e031      	b.n	800b0e0 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	2207      	movs	r2, #7
 800b080:	705a      	strb	r2, [r3, #1]
      break;
 800b082:	e02d      	b.n	800b0e0 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d017      	beq.n	800b0be <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b09a:	23ff      	movs	r3, #255	; 0xff
 800b09c:	6878      	ldr	r0, [r7, #4]
 800b09e:	f000 f903 	bl	800b2a8 <USBH_Get_StringDesc>
 800b0a2:	4603      	mov	r3, r0
 800b0a4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b0a6:	7bbb      	ldrb	r3, [r7, #14]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d102      	bne.n	800b0b2 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800b0b0:	e018      	b.n	800b0e4 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b0b2:	7bbb      	ldrb	r3, [r7, #14]
 800b0b4:	2b03      	cmp	r3, #3
 800b0b6:	d115      	bne.n	800b0e4 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	73fb      	strb	r3, [r7, #15]
      break;
 800b0bc:	e012      	b.n	800b0e4 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800b0be:	2300      	movs	r3, #0
 800b0c0:	73fb      	strb	r3, [r7, #15]
      break;
 800b0c2:	e00f      	b.n	800b0e4 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800b0c4:	bf00      	nop
 800b0c6:	e00e      	b.n	800b0e6 <USBH_HandleEnum+0x3be>
      break;
 800b0c8:	bf00      	nop
 800b0ca:	e00c      	b.n	800b0e6 <USBH_HandleEnum+0x3be>
      break;
 800b0cc:	bf00      	nop
 800b0ce:	e00a      	b.n	800b0e6 <USBH_HandleEnum+0x3be>
      break;
 800b0d0:	bf00      	nop
 800b0d2:	e008      	b.n	800b0e6 <USBH_HandleEnum+0x3be>
      break;
 800b0d4:	bf00      	nop
 800b0d6:	e006      	b.n	800b0e6 <USBH_HandleEnum+0x3be>
      break;
 800b0d8:	bf00      	nop
 800b0da:	e004      	b.n	800b0e6 <USBH_HandleEnum+0x3be>
      break;
 800b0dc:	bf00      	nop
 800b0de:	e002      	b.n	800b0e6 <USBH_HandleEnum+0x3be>
      break;
 800b0e0:	bf00      	nop
 800b0e2:	e000      	b.n	800b0e6 <USBH_HandleEnum+0x3be>
      break;
 800b0e4:	bf00      	nop
  }
  return Status;
 800b0e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	3710      	adds	r7, #16
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	bd80      	pop	{r7, pc}

0800b0f0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800b0f0:	b480      	push	{r7}
 800b0f2:	b083      	sub	sp, #12
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	6078      	str	r0, [r7, #4]
 800b0f8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	683a      	ldr	r2, [r7, #0]
 800b0fe:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800b102:	bf00      	nop
 800b104:	370c      	adds	r7, #12
 800b106:	46bd      	mov	sp, r7
 800b108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10c:	4770      	bx	lr

0800b10e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800b10e:	b580      	push	{r7, lr}
 800b110:	b082      	sub	sp, #8
 800b112:	af00      	add	r7, sp, #0
 800b114:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b11c:	1c5a      	adds	r2, r3, #1
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800b124:	6878      	ldr	r0, [r7, #4]
 800b126:	f000 f804 	bl	800b132 <USBH_HandleSof>
}
 800b12a:	bf00      	nop
 800b12c:	3708      	adds	r7, #8
 800b12e:	46bd      	mov	sp, r7
 800b130:	bd80      	pop	{r7, pc}

0800b132 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800b132:	b580      	push	{r7, lr}
 800b134:	b082      	sub	sp, #8
 800b136:	af00      	add	r7, sp, #0
 800b138:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	781b      	ldrb	r3, [r3, #0]
 800b13e:	b2db      	uxtb	r3, r3
 800b140:	2b0b      	cmp	r3, #11
 800b142:	d10a      	bne.n	800b15a <USBH_HandleSof+0x28>
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d005      	beq.n	800b15a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b154:	699b      	ldr	r3, [r3, #24]
 800b156:	6878      	ldr	r0, [r7, #4]
 800b158:	4798      	blx	r3
  }
}
 800b15a:	bf00      	nop
 800b15c:	3708      	adds	r7, #8
 800b15e:	46bd      	mov	sp, r7
 800b160:	bd80      	pop	{r7, pc}

0800b162 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800b162:	b480      	push	{r7}
 800b164:	b083      	sub	sp, #12
 800b166:	af00      	add	r7, sp, #0
 800b168:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	2201      	movs	r2, #1
 800b16e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800b172:	bf00      	nop
}
 800b174:	370c      	adds	r7, #12
 800b176:	46bd      	mov	sp, r7
 800b178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17c:	4770      	bx	lr

0800b17e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800b17e:	b480      	push	{r7}
 800b180:	b083      	sub	sp, #12
 800b182:	af00      	add	r7, sp, #0
 800b184:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	2200      	movs	r2, #0
 800b18a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800b18e:	bf00      	nop
}
 800b190:	370c      	adds	r7, #12
 800b192:	46bd      	mov	sp, r7
 800b194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b198:	4770      	bx	lr

0800b19a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800b19a:	b480      	push	{r7}
 800b19c:	b083      	sub	sp, #12
 800b19e:	af00      	add	r7, sp, #0
 800b1a0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	2201      	movs	r2, #1
 800b1a6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	2200      	movs	r2, #0
 800b1ae:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	2200      	movs	r2, #0
 800b1b6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800b1ba:	2300      	movs	r3, #0
}
 800b1bc:	4618      	mov	r0, r3
 800b1be:	370c      	adds	r7, #12
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c6:	4770      	bx	lr

0800b1c8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800b1c8:	b580      	push	{r7, lr}
 800b1ca:	b082      	sub	sp, #8
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	2201      	movs	r2, #1
 800b1d4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	2200      	movs	r2, #0
 800b1dc:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800b1e8:	6878      	ldr	r0, [r7, #4]
 800b1ea:	f004 fb36 	bl	800f85a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	791b      	ldrb	r3, [r3, #4]
 800b1f2:	4619      	mov	r1, r3
 800b1f4:	6878      	ldr	r0, [r7, #4]
 800b1f6:	f000 fe93 	bl	800bf20 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	795b      	ldrb	r3, [r3, #5]
 800b1fe:	4619      	mov	r1, r3
 800b200:	6878      	ldr	r0, [r7, #4]
 800b202:	f000 fe8d 	bl	800bf20 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800b206:	2300      	movs	r3, #0
}
 800b208:	4618      	mov	r0, r3
 800b20a:	3708      	adds	r7, #8
 800b20c:	46bd      	mov	sp, r7
 800b20e:	bd80      	pop	{r7, pc}

0800b210 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800b210:	b580      	push	{r7, lr}
 800b212:	b086      	sub	sp, #24
 800b214:	af02      	add	r7, sp, #8
 800b216:	6078      	str	r0, [r7, #4]
 800b218:	460b      	mov	r3, r1
 800b21a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800b222:	78fb      	ldrb	r3, [r7, #3]
 800b224:	b29b      	uxth	r3, r3
 800b226:	9300      	str	r3, [sp, #0]
 800b228:	4613      	mov	r3, r2
 800b22a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b22e:	2100      	movs	r1, #0
 800b230:	6878      	ldr	r0, [r7, #4]
 800b232:	f000 f864 	bl	800b2fe <USBH_GetDescriptor>
 800b236:	4603      	mov	r3, r0
 800b238:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800b23a:	7bfb      	ldrb	r3, [r7, #15]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d10a      	bne.n	800b256 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	f203 3026 	addw	r0, r3, #806	; 0x326
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b24c:	78fa      	ldrb	r2, [r7, #3]
 800b24e:	b292      	uxth	r2, r2
 800b250:	4619      	mov	r1, r3
 800b252:	f000 f919 	bl	800b488 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800b256:	7bfb      	ldrb	r3, [r7, #15]
}
 800b258:	4618      	mov	r0, r3
 800b25a:	3710      	adds	r7, #16
 800b25c:	46bd      	mov	sp, r7
 800b25e:	bd80      	pop	{r7, pc}

0800b260 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800b260:	b580      	push	{r7, lr}
 800b262:	b086      	sub	sp, #24
 800b264:	af02      	add	r7, sp, #8
 800b266:	6078      	str	r0, [r7, #4]
 800b268:	460b      	mov	r3, r1
 800b26a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	331c      	adds	r3, #28
 800b270:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800b272:	887b      	ldrh	r3, [r7, #2]
 800b274:	9300      	str	r3, [sp, #0]
 800b276:	68bb      	ldr	r3, [r7, #8]
 800b278:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b27c:	2100      	movs	r1, #0
 800b27e:	6878      	ldr	r0, [r7, #4]
 800b280:	f000 f83d 	bl	800b2fe <USBH_GetDescriptor>
 800b284:	4603      	mov	r3, r0
 800b286:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800b288:	7bfb      	ldrb	r3, [r7, #15]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d107      	bne.n	800b29e <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800b28e:	887b      	ldrh	r3, [r7, #2]
 800b290:	461a      	mov	r2, r3
 800b292:	68b9      	ldr	r1, [r7, #8]
 800b294:	6878      	ldr	r0, [r7, #4]
 800b296:	f000 f989 	bl	800b5ac <USBH_ParseCfgDesc>
 800b29a:	4603      	mov	r3, r0
 800b29c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b29e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	3710      	adds	r7, #16
 800b2a4:	46bd      	mov	sp, r7
 800b2a6:	bd80      	pop	{r7, pc}

0800b2a8 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800b2a8:	b580      	push	{r7, lr}
 800b2aa:	b088      	sub	sp, #32
 800b2ac:	af02      	add	r7, sp, #8
 800b2ae:	60f8      	str	r0, [r7, #12]
 800b2b0:	607a      	str	r2, [r7, #4]
 800b2b2:	461a      	mov	r2, r3
 800b2b4:	460b      	mov	r3, r1
 800b2b6:	72fb      	strb	r3, [r7, #11]
 800b2b8:	4613      	mov	r3, r2
 800b2ba:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800b2bc:	7afb      	ldrb	r3, [r7, #11]
 800b2be:	b29b      	uxth	r3, r3
 800b2c0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800b2c4:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800b2cc:	893b      	ldrh	r3, [r7, #8]
 800b2ce:	9300      	str	r3, [sp, #0]
 800b2d0:	460b      	mov	r3, r1
 800b2d2:	2100      	movs	r1, #0
 800b2d4:	68f8      	ldr	r0, [r7, #12]
 800b2d6:	f000 f812 	bl	800b2fe <USBH_GetDescriptor>
 800b2da:	4603      	mov	r3, r0
 800b2dc:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800b2de:	7dfb      	ldrb	r3, [r7, #23]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d107      	bne.n	800b2f4 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b2ea:	893a      	ldrh	r2, [r7, #8]
 800b2ec:	6879      	ldr	r1, [r7, #4]
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	f000 fb26 	bl	800b940 <USBH_ParseStringDesc>
  }

  return status;
 800b2f4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	3718      	adds	r7, #24
 800b2fa:	46bd      	mov	sp, r7
 800b2fc:	bd80      	pop	{r7, pc}

0800b2fe <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800b2fe:	b580      	push	{r7, lr}
 800b300:	b084      	sub	sp, #16
 800b302:	af00      	add	r7, sp, #0
 800b304:	60f8      	str	r0, [r7, #12]
 800b306:	607b      	str	r3, [r7, #4]
 800b308:	460b      	mov	r3, r1
 800b30a:	72fb      	strb	r3, [r7, #11]
 800b30c:	4613      	mov	r3, r2
 800b30e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	789b      	ldrb	r3, [r3, #2]
 800b314:	2b01      	cmp	r3, #1
 800b316:	d11c      	bne.n	800b352 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800b318:	7afb      	ldrb	r3, [r7, #11]
 800b31a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b31e:	b2da      	uxtb	r2, r3
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	2206      	movs	r2, #6
 800b328:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	893a      	ldrh	r2, [r7, #8]
 800b32e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800b330:	893b      	ldrh	r3, [r7, #8]
 800b332:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b336:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b33a:	d104      	bne.n	800b346 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	f240 4209 	movw	r2, #1033	; 0x409
 800b342:	829a      	strh	r2, [r3, #20]
 800b344:	e002      	b.n	800b34c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	2200      	movs	r2, #0
 800b34a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	8b3a      	ldrh	r2, [r7, #24]
 800b350:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800b352:	8b3b      	ldrh	r3, [r7, #24]
 800b354:	461a      	mov	r2, r3
 800b356:	6879      	ldr	r1, [r7, #4]
 800b358:	68f8      	ldr	r0, [r7, #12]
 800b35a:	f000 fb3f 	bl	800b9dc <USBH_CtlReq>
 800b35e:	4603      	mov	r3, r0
}
 800b360:	4618      	mov	r0, r3
 800b362:	3710      	adds	r7, #16
 800b364:	46bd      	mov	sp, r7
 800b366:	bd80      	pop	{r7, pc}

0800b368 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800b368:	b580      	push	{r7, lr}
 800b36a:	b082      	sub	sp, #8
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	6078      	str	r0, [r7, #4]
 800b370:	460b      	mov	r3, r1
 800b372:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	789b      	ldrb	r3, [r3, #2]
 800b378:	2b01      	cmp	r3, #1
 800b37a:	d10f      	bne.n	800b39c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	2200      	movs	r2, #0
 800b380:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	2205      	movs	r2, #5
 800b386:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800b388:	78fb      	ldrb	r3, [r7, #3]
 800b38a:	b29a      	uxth	r2, r3
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	2200      	movs	r2, #0
 800b394:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	2200      	movs	r2, #0
 800b39a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b39c:	2200      	movs	r2, #0
 800b39e:	2100      	movs	r1, #0
 800b3a0:	6878      	ldr	r0, [r7, #4]
 800b3a2:	f000 fb1b 	bl	800b9dc <USBH_CtlReq>
 800b3a6:	4603      	mov	r3, r0
}
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	3708      	adds	r7, #8
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	bd80      	pop	{r7, pc}

0800b3b0 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800b3b0:	b580      	push	{r7, lr}
 800b3b2:	b082      	sub	sp, #8
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
 800b3b8:	460b      	mov	r3, r1
 800b3ba:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	789b      	ldrb	r3, [r3, #2]
 800b3c0:	2b01      	cmp	r3, #1
 800b3c2:	d10e      	bne.n	800b3e2 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	2200      	movs	r2, #0
 800b3c8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	2209      	movs	r2, #9
 800b3ce:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	887a      	ldrh	r2, [r7, #2]
 800b3d4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	2200      	movs	r2, #0
 800b3da:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	2200      	movs	r2, #0
 800b3e0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b3e2:	2200      	movs	r2, #0
 800b3e4:	2100      	movs	r1, #0
 800b3e6:	6878      	ldr	r0, [r7, #4]
 800b3e8:	f000 faf8 	bl	800b9dc <USBH_CtlReq>
 800b3ec:	4603      	mov	r3, r0
}
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	3708      	adds	r7, #8
 800b3f2:	46bd      	mov	sp, r7
 800b3f4:	bd80      	pop	{r7, pc}

0800b3f6 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800b3f6:	b580      	push	{r7, lr}
 800b3f8:	b082      	sub	sp, #8
 800b3fa:	af00      	add	r7, sp, #0
 800b3fc:	6078      	str	r0, [r7, #4]
 800b3fe:	460b      	mov	r3, r1
 800b400:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	789b      	ldrb	r3, [r3, #2]
 800b406:	2b01      	cmp	r3, #1
 800b408:	d10f      	bne.n	800b42a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	2200      	movs	r2, #0
 800b40e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	2203      	movs	r2, #3
 800b414:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800b416:	78fb      	ldrb	r3, [r7, #3]
 800b418:	b29a      	uxth	r2, r3
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	2200      	movs	r2, #0
 800b422:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	2200      	movs	r2, #0
 800b428:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b42a:	2200      	movs	r2, #0
 800b42c:	2100      	movs	r1, #0
 800b42e:	6878      	ldr	r0, [r7, #4]
 800b430:	f000 fad4 	bl	800b9dc <USBH_CtlReq>
 800b434:	4603      	mov	r3, r0
}
 800b436:	4618      	mov	r0, r3
 800b438:	3708      	adds	r7, #8
 800b43a:	46bd      	mov	sp, r7
 800b43c:	bd80      	pop	{r7, pc}

0800b43e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800b43e:	b580      	push	{r7, lr}
 800b440:	b082      	sub	sp, #8
 800b442:	af00      	add	r7, sp, #0
 800b444:	6078      	str	r0, [r7, #4]
 800b446:	460b      	mov	r3, r1
 800b448:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	789b      	ldrb	r3, [r3, #2]
 800b44e:	2b01      	cmp	r3, #1
 800b450:	d10f      	bne.n	800b472 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	2202      	movs	r2, #2
 800b456:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	2201      	movs	r2, #1
 800b45c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	2200      	movs	r2, #0
 800b462:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800b464:	78fb      	ldrb	r3, [r7, #3]
 800b466:	b29a      	uxth	r2, r3
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	2200      	movs	r2, #0
 800b470:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800b472:	2200      	movs	r2, #0
 800b474:	2100      	movs	r1, #0
 800b476:	6878      	ldr	r0, [r7, #4]
 800b478:	f000 fab0 	bl	800b9dc <USBH_CtlReq>
 800b47c:	4603      	mov	r3, r0
}
 800b47e:	4618      	mov	r0, r3
 800b480:	3708      	adds	r7, #8
 800b482:	46bd      	mov	sp, r7
 800b484:	bd80      	pop	{r7, pc}
	...

0800b488 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800b488:	b480      	push	{r7}
 800b48a:	b085      	sub	sp, #20
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	60f8      	str	r0, [r7, #12]
 800b490:	60b9      	str	r1, [r7, #8]
 800b492:	4613      	mov	r3, r2
 800b494:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800b496:	68bb      	ldr	r3, [r7, #8]
 800b498:	781a      	ldrb	r2, [r3, #0]
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800b49e:	68bb      	ldr	r3, [r7, #8]
 800b4a0:	785a      	ldrb	r2, [r3, #1]
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800b4a6:	68bb      	ldr	r3, [r7, #8]
 800b4a8:	3302      	adds	r3, #2
 800b4aa:	781b      	ldrb	r3, [r3, #0]
 800b4ac:	b29a      	uxth	r2, r3
 800b4ae:	68bb      	ldr	r3, [r7, #8]
 800b4b0:	3303      	adds	r3, #3
 800b4b2:	781b      	ldrb	r3, [r3, #0]
 800b4b4:	b29b      	uxth	r3, r3
 800b4b6:	021b      	lsls	r3, r3, #8
 800b4b8:	b29b      	uxth	r3, r3
 800b4ba:	4313      	orrs	r3, r2
 800b4bc:	b29a      	uxth	r2, r3
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800b4c2:	68bb      	ldr	r3, [r7, #8]
 800b4c4:	791a      	ldrb	r2, [r3, #4]
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800b4ca:	68bb      	ldr	r3, [r7, #8]
 800b4cc:	795a      	ldrb	r2, [r3, #5]
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800b4d2:	68bb      	ldr	r3, [r7, #8]
 800b4d4:	799a      	ldrb	r2, [r3, #6]
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800b4da:	68bb      	ldr	r3, [r7, #8]
 800b4dc:	79da      	ldrb	r2, [r3, #7]
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	79db      	ldrb	r3, [r3, #7]
 800b4e6:	2b20      	cmp	r3, #32
 800b4e8:	dc0f      	bgt.n	800b50a <USBH_ParseDevDesc+0x82>
 800b4ea:	2b08      	cmp	r3, #8
 800b4ec:	db14      	blt.n	800b518 <USBH_ParseDevDesc+0x90>
 800b4ee:	3b08      	subs	r3, #8
 800b4f0:	4a2d      	ldr	r2, [pc, #180]	; (800b5a8 <USBH_ParseDevDesc+0x120>)
 800b4f2:	fa22 f303 	lsr.w	r3, r2, r3
 800b4f6:	f003 0301 	and.w	r3, r3, #1
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	bf14      	ite	ne
 800b4fe:	2301      	movne	r3, #1
 800b500:	2300      	moveq	r3, #0
 800b502:	b2db      	uxtb	r3, r3
 800b504:	2b00      	cmp	r3, #0
 800b506:	d102      	bne.n	800b50e <USBH_ParseDevDesc+0x86>
 800b508:	e006      	b.n	800b518 <USBH_ParseDevDesc+0x90>
 800b50a:	2b40      	cmp	r3, #64	; 0x40
 800b50c:	d104      	bne.n	800b518 <USBH_ParseDevDesc+0x90>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	79da      	ldrb	r2, [r3, #7]
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	71da      	strb	r2, [r3, #7]
      break;
 800b516:	e003      	b.n	800b520 <USBH_ParseDevDesc+0x98>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	2240      	movs	r2, #64	; 0x40
 800b51c:	71da      	strb	r2, [r3, #7]
      break;
 800b51e:	bf00      	nop
  }

  if (length > 8U)
 800b520:	88fb      	ldrh	r3, [r7, #6]
 800b522:	2b08      	cmp	r3, #8
 800b524:	d939      	bls.n	800b59a <USBH_ParseDevDesc+0x112>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800b526:	68bb      	ldr	r3, [r7, #8]
 800b528:	3308      	adds	r3, #8
 800b52a:	781b      	ldrb	r3, [r3, #0]
 800b52c:	b29a      	uxth	r2, r3
 800b52e:	68bb      	ldr	r3, [r7, #8]
 800b530:	3309      	adds	r3, #9
 800b532:	781b      	ldrb	r3, [r3, #0]
 800b534:	b29b      	uxth	r3, r3
 800b536:	021b      	lsls	r3, r3, #8
 800b538:	b29b      	uxth	r3, r3
 800b53a:	4313      	orrs	r3, r2
 800b53c:	b29a      	uxth	r2, r3
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800b542:	68bb      	ldr	r3, [r7, #8]
 800b544:	330a      	adds	r3, #10
 800b546:	781b      	ldrb	r3, [r3, #0]
 800b548:	b29a      	uxth	r2, r3
 800b54a:	68bb      	ldr	r3, [r7, #8]
 800b54c:	330b      	adds	r3, #11
 800b54e:	781b      	ldrb	r3, [r3, #0]
 800b550:	b29b      	uxth	r3, r3
 800b552:	021b      	lsls	r3, r3, #8
 800b554:	b29b      	uxth	r3, r3
 800b556:	4313      	orrs	r3, r2
 800b558:	b29a      	uxth	r2, r3
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800b55e:	68bb      	ldr	r3, [r7, #8]
 800b560:	330c      	adds	r3, #12
 800b562:	781b      	ldrb	r3, [r3, #0]
 800b564:	b29a      	uxth	r2, r3
 800b566:	68bb      	ldr	r3, [r7, #8]
 800b568:	330d      	adds	r3, #13
 800b56a:	781b      	ldrb	r3, [r3, #0]
 800b56c:	b29b      	uxth	r3, r3
 800b56e:	021b      	lsls	r3, r3, #8
 800b570:	b29b      	uxth	r3, r3
 800b572:	4313      	orrs	r3, r2
 800b574:	b29a      	uxth	r2, r3
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800b57a:	68bb      	ldr	r3, [r7, #8]
 800b57c:	7b9a      	ldrb	r2, [r3, #14]
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800b582:	68bb      	ldr	r3, [r7, #8]
 800b584:	7bda      	ldrb	r2, [r3, #15]
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800b58a:	68bb      	ldr	r3, [r7, #8]
 800b58c:	7c1a      	ldrb	r2, [r3, #16]
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800b592:	68bb      	ldr	r3, [r7, #8]
 800b594:	7c5a      	ldrb	r2, [r3, #17]
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	745a      	strb	r2, [r3, #17]
  }
}
 800b59a:	bf00      	nop
 800b59c:	3714      	adds	r7, #20
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a4:	4770      	bx	lr
 800b5a6:	bf00      	nop
 800b5a8:	01000101 	.word	0x01000101

0800b5ac <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	b08c      	sub	sp, #48	; 0x30
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	60f8      	str	r0, [r7, #12]
 800b5b4:	60b9      	str	r1, [r7, #8]
 800b5b6:	4613      	mov	r3, r2
 800b5b8:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800b5c0:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800b5c8:	68bb      	ldr	r3, [r7, #8]
 800b5ca:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800b5d8:	68bb      	ldr	r3, [r7, #8]
 800b5da:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800b5dc:	68bb      	ldr	r3, [r7, #8]
 800b5de:	781a      	ldrb	r2, [r3, #0]
 800b5e0:	6a3b      	ldr	r3, [r7, #32]
 800b5e2:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800b5e4:	68bb      	ldr	r3, [r7, #8]
 800b5e6:	785a      	ldrb	r2, [r3, #1]
 800b5e8:	6a3b      	ldr	r3, [r7, #32]
 800b5ea:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800b5ec:	68bb      	ldr	r3, [r7, #8]
 800b5ee:	3302      	adds	r3, #2
 800b5f0:	781b      	ldrb	r3, [r3, #0]
 800b5f2:	b29a      	uxth	r2, r3
 800b5f4:	68bb      	ldr	r3, [r7, #8]
 800b5f6:	3303      	adds	r3, #3
 800b5f8:	781b      	ldrb	r3, [r3, #0]
 800b5fa:	b29b      	uxth	r3, r3
 800b5fc:	021b      	lsls	r3, r3, #8
 800b5fe:	b29b      	uxth	r3, r3
 800b600:	4313      	orrs	r3, r2
 800b602:	b29b      	uxth	r3, r3
 800b604:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b608:	bf28      	it	cs
 800b60a:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800b60e:	b29a      	uxth	r2, r3
 800b610:	6a3b      	ldr	r3, [r7, #32]
 800b612:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800b614:	68bb      	ldr	r3, [r7, #8]
 800b616:	791a      	ldrb	r2, [r3, #4]
 800b618:	6a3b      	ldr	r3, [r7, #32]
 800b61a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800b61c:	68bb      	ldr	r3, [r7, #8]
 800b61e:	795a      	ldrb	r2, [r3, #5]
 800b620:	6a3b      	ldr	r3, [r7, #32]
 800b622:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800b624:	68bb      	ldr	r3, [r7, #8]
 800b626:	799a      	ldrb	r2, [r3, #6]
 800b628:	6a3b      	ldr	r3, [r7, #32]
 800b62a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800b62c:	68bb      	ldr	r3, [r7, #8]
 800b62e:	79da      	ldrb	r2, [r3, #7]
 800b630:	6a3b      	ldr	r3, [r7, #32]
 800b632:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800b634:	68bb      	ldr	r3, [r7, #8]
 800b636:	7a1a      	ldrb	r2, [r3, #8]
 800b638:	6a3b      	ldr	r3, [r7, #32]
 800b63a:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800b63c:	6a3b      	ldr	r3, [r7, #32]
 800b63e:	781b      	ldrb	r3, [r3, #0]
 800b640:	2b09      	cmp	r3, #9
 800b642:	d002      	beq.n	800b64a <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800b644:	6a3b      	ldr	r3, [r7, #32]
 800b646:	2209      	movs	r2, #9
 800b648:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800b64a:	88fb      	ldrh	r3, [r7, #6]
 800b64c:	2b09      	cmp	r3, #9
 800b64e:	f240 809d 	bls.w	800b78c <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800b652:	2309      	movs	r3, #9
 800b654:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800b656:	2300      	movs	r3, #0
 800b658:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b65a:	e081      	b.n	800b760 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b65c:	f107 0316 	add.w	r3, r7, #22
 800b660:	4619      	mov	r1, r3
 800b662:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b664:	f000 f99f 	bl	800b9a6 <USBH_GetNextDesc>
 800b668:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800b66a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b66c:	785b      	ldrb	r3, [r3, #1]
 800b66e:	2b04      	cmp	r3, #4
 800b670:	d176      	bne.n	800b760 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800b672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b674:	781b      	ldrb	r3, [r3, #0]
 800b676:	2b09      	cmp	r3, #9
 800b678:	d002      	beq.n	800b680 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800b67a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b67c:	2209      	movs	r2, #9
 800b67e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800b680:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b684:	221a      	movs	r2, #26
 800b686:	fb02 f303 	mul.w	r3, r2, r3
 800b68a:	3308      	adds	r3, #8
 800b68c:	6a3a      	ldr	r2, [r7, #32]
 800b68e:	4413      	add	r3, r2
 800b690:	3302      	adds	r3, #2
 800b692:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800b694:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b696:	69f8      	ldr	r0, [r7, #28]
 800b698:	f000 f87e 	bl	800b798 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800b69c:	2300      	movs	r3, #0
 800b69e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b6a6:	e043      	b.n	800b730 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b6a8:	f107 0316 	add.w	r3, r7, #22
 800b6ac:	4619      	mov	r1, r3
 800b6ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b6b0:	f000 f979 	bl	800b9a6 <USBH_GetNextDesc>
 800b6b4:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b6b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6b8:	785b      	ldrb	r3, [r3, #1]
 800b6ba:	2b05      	cmp	r3, #5
 800b6bc:	d138      	bne.n	800b730 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800b6be:	69fb      	ldr	r3, [r7, #28]
 800b6c0:	795b      	ldrb	r3, [r3, #5]
 800b6c2:	2b01      	cmp	r3, #1
 800b6c4:	d10f      	bne.n	800b6e6 <USBH_ParseCfgDesc+0x13a>
 800b6c6:	69fb      	ldr	r3, [r7, #28]
 800b6c8:	799b      	ldrb	r3, [r3, #6]
 800b6ca:	2b02      	cmp	r3, #2
 800b6cc:	d10b      	bne.n	800b6e6 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b6ce:	69fb      	ldr	r3, [r7, #28]
 800b6d0:	79db      	ldrb	r3, [r3, #7]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d10f      	bne.n	800b6f6 <USBH_ParseCfgDesc+0x14a>
 800b6d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6d8:	781b      	ldrb	r3, [r3, #0]
 800b6da:	2b09      	cmp	r3, #9
 800b6dc:	d00b      	beq.n	800b6f6 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800b6de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6e0:	2209      	movs	r2, #9
 800b6e2:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b6e4:	e007      	b.n	800b6f6 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800b6e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6e8:	781b      	ldrb	r3, [r3, #0]
 800b6ea:	2b07      	cmp	r3, #7
 800b6ec:	d004      	beq.n	800b6f8 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800b6ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6f0:	2207      	movs	r2, #7
 800b6f2:	701a      	strb	r2, [r3, #0]
 800b6f4:	e000      	b.n	800b6f8 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b6f6:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800b6f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b6fc:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800b700:	3201      	adds	r2, #1
 800b702:	00d2      	lsls	r2, r2, #3
 800b704:	211a      	movs	r1, #26
 800b706:	fb01 f303 	mul.w	r3, r1, r3
 800b70a:	4413      	add	r3, r2
 800b70c:	3308      	adds	r3, #8
 800b70e:	6a3a      	ldr	r2, [r7, #32]
 800b710:	4413      	add	r3, r2
 800b712:	3304      	adds	r3, #4
 800b714:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800b716:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b718:	69b9      	ldr	r1, [r7, #24]
 800b71a:	68f8      	ldr	r0, [r7, #12]
 800b71c:	f000 f86b 	bl	800b7f6 <USBH_ParseEPDesc>
 800b720:	4603      	mov	r3, r0
 800b722:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800b726:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b72a:	3301      	adds	r3, #1
 800b72c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b730:	69fb      	ldr	r3, [r7, #28]
 800b732:	791b      	ldrb	r3, [r3, #4]
 800b734:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800b738:	429a      	cmp	r2, r3
 800b73a:	d204      	bcs.n	800b746 <USBH_ParseCfgDesc+0x19a>
 800b73c:	6a3b      	ldr	r3, [r7, #32]
 800b73e:	885a      	ldrh	r2, [r3, #2]
 800b740:	8afb      	ldrh	r3, [r7, #22]
 800b742:	429a      	cmp	r2, r3
 800b744:	d8b0      	bhi.n	800b6a8 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800b746:	69fb      	ldr	r3, [r7, #28]
 800b748:	791b      	ldrb	r3, [r3, #4]
 800b74a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800b74e:	429a      	cmp	r2, r3
 800b750:	d201      	bcs.n	800b756 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800b752:	2303      	movs	r3, #3
 800b754:	e01c      	b.n	800b790 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800b756:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b75a:	3301      	adds	r3, #1
 800b75c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b760:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b764:	2b01      	cmp	r3, #1
 800b766:	d805      	bhi.n	800b774 <USBH_ParseCfgDesc+0x1c8>
 800b768:	6a3b      	ldr	r3, [r7, #32]
 800b76a:	885a      	ldrh	r2, [r3, #2]
 800b76c:	8afb      	ldrh	r3, [r7, #22]
 800b76e:	429a      	cmp	r2, r3
 800b770:	f63f af74 	bhi.w	800b65c <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800b774:	6a3b      	ldr	r3, [r7, #32]
 800b776:	791b      	ldrb	r3, [r3, #4]
 800b778:	2b02      	cmp	r3, #2
 800b77a:	bf28      	it	cs
 800b77c:	2302      	movcs	r3, #2
 800b77e:	b2db      	uxtb	r3, r3
 800b780:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b784:	429a      	cmp	r2, r3
 800b786:	d201      	bcs.n	800b78c <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800b788:	2303      	movs	r3, #3
 800b78a:	e001      	b.n	800b790 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800b78c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b790:	4618      	mov	r0, r3
 800b792:	3730      	adds	r7, #48	; 0x30
 800b794:	46bd      	mov	sp, r7
 800b796:	bd80      	pop	{r7, pc}

0800b798 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800b798:	b480      	push	{r7}
 800b79a:	b083      	sub	sp, #12
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	6078      	str	r0, [r7, #4]
 800b7a0:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800b7a2:	683b      	ldr	r3, [r7, #0]
 800b7a4:	781a      	ldrb	r2, [r3, #0]
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800b7aa:	683b      	ldr	r3, [r7, #0]
 800b7ac:	785a      	ldrb	r2, [r3, #1]
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800b7b2:	683b      	ldr	r3, [r7, #0]
 800b7b4:	789a      	ldrb	r2, [r3, #2]
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800b7ba:	683b      	ldr	r3, [r7, #0]
 800b7bc:	78da      	ldrb	r2, [r3, #3]
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800b7c2:	683b      	ldr	r3, [r7, #0]
 800b7c4:	791a      	ldrb	r2, [r3, #4]
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800b7ca:	683b      	ldr	r3, [r7, #0]
 800b7cc:	795a      	ldrb	r2, [r3, #5]
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800b7d2:	683b      	ldr	r3, [r7, #0]
 800b7d4:	799a      	ldrb	r2, [r3, #6]
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800b7da:	683b      	ldr	r3, [r7, #0]
 800b7dc:	79da      	ldrb	r2, [r3, #7]
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800b7e2:	683b      	ldr	r3, [r7, #0]
 800b7e4:	7a1a      	ldrb	r2, [r3, #8]
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	721a      	strb	r2, [r3, #8]
}
 800b7ea:	bf00      	nop
 800b7ec:	370c      	adds	r7, #12
 800b7ee:	46bd      	mov	sp, r7
 800b7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f4:	4770      	bx	lr

0800b7f6 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800b7f6:	b480      	push	{r7}
 800b7f8:	b087      	sub	sp, #28
 800b7fa:	af00      	add	r7, sp, #0
 800b7fc:	60f8      	str	r0, [r7, #12]
 800b7fe:	60b9      	str	r1, [r7, #8]
 800b800:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800b802:	2300      	movs	r3, #0
 800b804:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	781a      	ldrb	r2, [r3, #0]
 800b80a:	68bb      	ldr	r3, [r7, #8]
 800b80c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	785a      	ldrb	r2, [r3, #1]
 800b812:	68bb      	ldr	r3, [r7, #8]
 800b814:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	789a      	ldrb	r2, [r3, #2]
 800b81a:	68bb      	ldr	r3, [r7, #8]
 800b81c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	78da      	ldrb	r2, [r3, #3]
 800b822:	68bb      	ldr	r3, [r7, #8]
 800b824:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	3304      	adds	r3, #4
 800b82a:	781b      	ldrb	r3, [r3, #0]
 800b82c:	b29a      	uxth	r2, r3
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	3305      	adds	r3, #5
 800b832:	781b      	ldrb	r3, [r3, #0]
 800b834:	b29b      	uxth	r3, r3
 800b836:	021b      	lsls	r3, r3, #8
 800b838:	b29b      	uxth	r3, r3
 800b83a:	4313      	orrs	r3, r2
 800b83c:	b29a      	uxth	r2, r3
 800b83e:	68bb      	ldr	r3, [r7, #8]
 800b840:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	799a      	ldrb	r2, [r3, #6]
 800b846:	68bb      	ldr	r3, [r7, #8]
 800b848:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800b84a:	68bb      	ldr	r3, [r7, #8]
 800b84c:	889b      	ldrh	r3, [r3, #4]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d102      	bne.n	800b858 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800b852:	2303      	movs	r3, #3
 800b854:	75fb      	strb	r3, [r7, #23]
 800b856:	e033      	b.n	800b8c0 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800b858:	68bb      	ldr	r3, [r7, #8]
 800b85a:	889b      	ldrh	r3, [r3, #4]
 800b85c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800b860:	f023 0307 	bic.w	r3, r3, #7
 800b864:	b29a      	uxth	r2, r3
 800b866:	68bb      	ldr	r3, [r7, #8]
 800b868:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800b86a:	68bb      	ldr	r3, [r7, #8]
 800b86c:	889b      	ldrh	r3, [r3, #4]
 800b86e:	b21a      	sxth	r2, r3
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	3304      	adds	r3, #4
 800b874:	781b      	ldrb	r3, [r3, #0]
 800b876:	b299      	uxth	r1, r3
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	3305      	adds	r3, #5
 800b87c:	781b      	ldrb	r3, [r3, #0]
 800b87e:	b29b      	uxth	r3, r3
 800b880:	021b      	lsls	r3, r3, #8
 800b882:	b29b      	uxth	r3, r3
 800b884:	430b      	orrs	r3, r1
 800b886:	b29b      	uxth	r3, r3
 800b888:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d110      	bne.n	800b8b2 <USBH_ParseEPDesc+0xbc>
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	3304      	adds	r3, #4
 800b894:	781b      	ldrb	r3, [r3, #0]
 800b896:	b299      	uxth	r1, r3
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	3305      	adds	r3, #5
 800b89c:	781b      	ldrb	r3, [r3, #0]
 800b89e:	b29b      	uxth	r3, r3
 800b8a0:	021b      	lsls	r3, r3, #8
 800b8a2:	b29b      	uxth	r3, r3
 800b8a4:	430b      	orrs	r3, r1
 800b8a6:	b29b      	uxth	r3, r3
 800b8a8:	b21b      	sxth	r3, r3
 800b8aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b8ae:	b21b      	sxth	r3, r3
 800b8b0:	e001      	b.n	800b8b6 <USBH_ParseEPDesc+0xc0>
 800b8b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b8b6:	4313      	orrs	r3, r2
 800b8b8:	b21b      	sxth	r3, r3
 800b8ba:	b29a      	uxth	r2, r3
 800b8bc:	68bb      	ldr	r3, [r7, #8]
 800b8be:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d116      	bne.n	800b8f8 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800b8ca:	68bb      	ldr	r3, [r7, #8]
 800b8cc:	78db      	ldrb	r3, [r3, #3]
 800b8ce:	f003 0303 	and.w	r3, r3, #3
 800b8d2:	2b01      	cmp	r3, #1
 800b8d4:	d005      	beq.n	800b8e2 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800b8d6:	68bb      	ldr	r3, [r7, #8]
 800b8d8:	78db      	ldrb	r3, [r3, #3]
 800b8da:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800b8de:	2b03      	cmp	r3, #3
 800b8e0:	d127      	bne.n	800b932 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800b8e2:	68bb      	ldr	r3, [r7, #8]
 800b8e4:	799b      	ldrb	r3, [r3, #6]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d003      	beq.n	800b8f2 <USBH_ParseEPDesc+0xfc>
 800b8ea:	68bb      	ldr	r3, [r7, #8]
 800b8ec:	799b      	ldrb	r3, [r3, #6]
 800b8ee:	2b10      	cmp	r3, #16
 800b8f0:	d91f      	bls.n	800b932 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800b8f2:	2303      	movs	r3, #3
 800b8f4:	75fb      	strb	r3, [r7, #23]
 800b8f6:	e01c      	b.n	800b932 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800b8f8:	68bb      	ldr	r3, [r7, #8]
 800b8fa:	78db      	ldrb	r3, [r3, #3]
 800b8fc:	f003 0303 	and.w	r3, r3, #3
 800b900:	2b01      	cmp	r3, #1
 800b902:	d10a      	bne.n	800b91a <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800b904:	68bb      	ldr	r3, [r7, #8]
 800b906:	799b      	ldrb	r3, [r3, #6]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d003      	beq.n	800b914 <USBH_ParseEPDesc+0x11e>
 800b90c:	68bb      	ldr	r3, [r7, #8]
 800b90e:	799b      	ldrb	r3, [r3, #6]
 800b910:	2b10      	cmp	r3, #16
 800b912:	d90e      	bls.n	800b932 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800b914:	2303      	movs	r3, #3
 800b916:	75fb      	strb	r3, [r7, #23]
 800b918:	e00b      	b.n	800b932 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800b91a:	68bb      	ldr	r3, [r7, #8]
 800b91c:	78db      	ldrb	r3, [r3, #3]
 800b91e:	f003 0303 	and.w	r3, r3, #3
 800b922:	2b03      	cmp	r3, #3
 800b924:	d105      	bne.n	800b932 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800b926:	68bb      	ldr	r3, [r7, #8]
 800b928:	799b      	ldrb	r3, [r3, #6]
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d101      	bne.n	800b932 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800b92e:	2303      	movs	r3, #3
 800b930:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800b932:	7dfb      	ldrb	r3, [r7, #23]
}
 800b934:	4618      	mov	r0, r3
 800b936:	371c      	adds	r7, #28
 800b938:	46bd      	mov	sp, r7
 800b93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b93e:	4770      	bx	lr

0800b940 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800b940:	b480      	push	{r7}
 800b942:	b087      	sub	sp, #28
 800b944:	af00      	add	r7, sp, #0
 800b946:	60f8      	str	r0, [r7, #12]
 800b948:	60b9      	str	r1, [r7, #8]
 800b94a:	4613      	mov	r3, r2
 800b94c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	3301      	adds	r3, #1
 800b952:	781b      	ldrb	r3, [r3, #0]
 800b954:	2b03      	cmp	r3, #3
 800b956:	d120      	bne.n	800b99a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	781b      	ldrb	r3, [r3, #0]
 800b95c:	1e9a      	subs	r2, r3, #2
 800b95e:	88fb      	ldrh	r3, [r7, #6]
 800b960:	4293      	cmp	r3, r2
 800b962:	bf28      	it	cs
 800b964:	4613      	movcs	r3, r2
 800b966:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	3302      	adds	r3, #2
 800b96c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800b96e:	2300      	movs	r3, #0
 800b970:	82fb      	strh	r3, [r7, #22]
 800b972:	e00b      	b.n	800b98c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800b974:	8afb      	ldrh	r3, [r7, #22]
 800b976:	68fa      	ldr	r2, [r7, #12]
 800b978:	4413      	add	r3, r2
 800b97a:	781a      	ldrb	r2, [r3, #0]
 800b97c:	68bb      	ldr	r3, [r7, #8]
 800b97e:	701a      	strb	r2, [r3, #0]
      pdest++;
 800b980:	68bb      	ldr	r3, [r7, #8]
 800b982:	3301      	adds	r3, #1
 800b984:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800b986:	8afb      	ldrh	r3, [r7, #22]
 800b988:	3302      	adds	r3, #2
 800b98a:	82fb      	strh	r3, [r7, #22]
 800b98c:	8afa      	ldrh	r2, [r7, #22]
 800b98e:	8abb      	ldrh	r3, [r7, #20]
 800b990:	429a      	cmp	r2, r3
 800b992:	d3ef      	bcc.n	800b974 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800b994:	68bb      	ldr	r3, [r7, #8]
 800b996:	2200      	movs	r2, #0
 800b998:	701a      	strb	r2, [r3, #0]
  }
}
 800b99a:	bf00      	nop
 800b99c:	371c      	adds	r7, #28
 800b99e:	46bd      	mov	sp, r7
 800b9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a4:	4770      	bx	lr

0800b9a6 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800b9a6:	b480      	push	{r7}
 800b9a8:	b085      	sub	sp, #20
 800b9aa:	af00      	add	r7, sp, #0
 800b9ac:	6078      	str	r0, [r7, #4]
 800b9ae:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800b9b0:	683b      	ldr	r3, [r7, #0]
 800b9b2:	881a      	ldrh	r2, [r3, #0]
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	781b      	ldrb	r3, [r3, #0]
 800b9b8:	b29b      	uxth	r3, r3
 800b9ba:	4413      	add	r3, r2
 800b9bc:	b29a      	uxth	r2, r3
 800b9be:	683b      	ldr	r3, [r7, #0]
 800b9c0:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	781b      	ldrb	r3, [r3, #0]
 800b9c6:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	4413      	add	r3, r2
 800b9cc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b9ce:	68fb      	ldr	r3, [r7, #12]
}
 800b9d0:	4618      	mov	r0, r3
 800b9d2:	3714      	adds	r7, #20
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9da:	4770      	bx	lr

0800b9dc <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800b9dc:	b580      	push	{r7, lr}
 800b9de:	b086      	sub	sp, #24
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	60f8      	str	r0, [r7, #12]
 800b9e4:	60b9      	str	r1, [r7, #8]
 800b9e6:	4613      	mov	r3, r2
 800b9e8:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800b9ea:	2301      	movs	r3, #1
 800b9ec:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	789b      	ldrb	r3, [r3, #2]
 800b9f2:	2b01      	cmp	r3, #1
 800b9f4:	d002      	beq.n	800b9fc <USBH_CtlReq+0x20>
 800b9f6:	2b02      	cmp	r3, #2
 800b9f8:	d00f      	beq.n	800ba1a <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800b9fa:	e027      	b.n	800ba4c <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	68ba      	ldr	r2, [r7, #8]
 800ba00:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	88fa      	ldrh	r2, [r7, #6]
 800ba06:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	2201      	movs	r2, #1
 800ba0c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	2202      	movs	r2, #2
 800ba12:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800ba14:	2301      	movs	r3, #1
 800ba16:	75fb      	strb	r3, [r7, #23]
      break;
 800ba18:	e018      	b.n	800ba4c <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800ba1a:	68f8      	ldr	r0, [r7, #12]
 800ba1c:	f000 f81c 	bl	800ba58 <USBH_HandleControl>
 800ba20:	4603      	mov	r3, r0
 800ba22:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800ba24:	7dfb      	ldrb	r3, [r7, #23]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d002      	beq.n	800ba30 <USBH_CtlReq+0x54>
 800ba2a:	7dfb      	ldrb	r3, [r7, #23]
 800ba2c:	2b03      	cmp	r3, #3
 800ba2e:	d106      	bne.n	800ba3e <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	2201      	movs	r2, #1
 800ba34:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	2200      	movs	r2, #0
 800ba3a:	761a      	strb	r2, [r3, #24]
      break;
 800ba3c:	e005      	b.n	800ba4a <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800ba3e:	7dfb      	ldrb	r3, [r7, #23]
 800ba40:	2b02      	cmp	r3, #2
 800ba42:	d102      	bne.n	800ba4a <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	2201      	movs	r2, #1
 800ba48:	709a      	strb	r2, [r3, #2]
      break;
 800ba4a:	bf00      	nop
  }
  return status;
 800ba4c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba4e:	4618      	mov	r0, r3
 800ba50:	3718      	adds	r7, #24
 800ba52:	46bd      	mov	sp, r7
 800ba54:	bd80      	pop	{r7, pc}
	...

0800ba58 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	b086      	sub	sp, #24
 800ba5c:	af02      	add	r7, sp, #8
 800ba5e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800ba60:	2301      	movs	r3, #1
 800ba62:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800ba64:	2300      	movs	r3, #0
 800ba66:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	7e1b      	ldrb	r3, [r3, #24]
 800ba6c:	3b01      	subs	r3, #1
 800ba6e:	2b0a      	cmp	r3, #10
 800ba70:	f200 8156 	bhi.w	800bd20 <USBH_HandleControl+0x2c8>
 800ba74:	a201      	add	r2, pc, #4	; (adr r2, 800ba7c <USBH_HandleControl+0x24>)
 800ba76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba7a:	bf00      	nop
 800ba7c:	0800baa9 	.word	0x0800baa9
 800ba80:	0800bac3 	.word	0x0800bac3
 800ba84:	0800bb2d 	.word	0x0800bb2d
 800ba88:	0800bb53 	.word	0x0800bb53
 800ba8c:	0800bb8b 	.word	0x0800bb8b
 800ba90:	0800bbb5 	.word	0x0800bbb5
 800ba94:	0800bc07 	.word	0x0800bc07
 800ba98:	0800bc29 	.word	0x0800bc29
 800ba9c:	0800bc65 	.word	0x0800bc65
 800baa0:	0800bc8b 	.word	0x0800bc8b
 800baa4:	0800bcc9 	.word	0x0800bcc9
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	f103 0110 	add.w	r1, r3, #16
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	795b      	ldrb	r3, [r3, #5]
 800bab2:	461a      	mov	r2, r3
 800bab4:	6878      	ldr	r0, [r7, #4]
 800bab6:	f000 f943 	bl	800bd40 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	2202      	movs	r2, #2
 800babe:	761a      	strb	r2, [r3, #24]
      break;
 800bac0:	e139      	b.n	800bd36 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	795b      	ldrb	r3, [r3, #5]
 800bac6:	4619      	mov	r1, r3
 800bac8:	6878      	ldr	r0, [r7, #4]
 800baca:	f003 ffb5 	bl	800fa38 <USBH_LL_GetURBState>
 800bace:	4603      	mov	r3, r0
 800bad0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800bad2:	7bbb      	ldrb	r3, [r7, #14]
 800bad4:	2b01      	cmp	r3, #1
 800bad6:	d11e      	bne.n	800bb16 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	7c1b      	ldrb	r3, [r3, #16]
 800badc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800bae0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	8adb      	ldrh	r3, [r3, #22]
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d00a      	beq.n	800bb00 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800baea:	7b7b      	ldrb	r3, [r7, #13]
 800baec:	2b80      	cmp	r3, #128	; 0x80
 800baee:	d103      	bne.n	800baf8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	2203      	movs	r2, #3
 800baf4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800baf6:	e115      	b.n	800bd24 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	2205      	movs	r2, #5
 800bafc:	761a      	strb	r2, [r3, #24]
      break;
 800bafe:	e111      	b.n	800bd24 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800bb00:	7b7b      	ldrb	r3, [r7, #13]
 800bb02:	2b80      	cmp	r3, #128	; 0x80
 800bb04:	d103      	bne.n	800bb0e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	2209      	movs	r2, #9
 800bb0a:	761a      	strb	r2, [r3, #24]
      break;
 800bb0c:	e10a      	b.n	800bd24 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	2207      	movs	r2, #7
 800bb12:	761a      	strb	r2, [r3, #24]
      break;
 800bb14:	e106      	b.n	800bd24 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800bb16:	7bbb      	ldrb	r3, [r7, #14]
 800bb18:	2b04      	cmp	r3, #4
 800bb1a:	d003      	beq.n	800bb24 <USBH_HandleControl+0xcc>
 800bb1c:	7bbb      	ldrb	r3, [r7, #14]
 800bb1e:	2b02      	cmp	r3, #2
 800bb20:	f040 8100 	bne.w	800bd24 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	220b      	movs	r2, #11
 800bb28:	761a      	strb	r2, [r3, #24]
      break;
 800bb2a:	e0fb      	b.n	800bd24 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bb32:	b29a      	uxth	r2, r3
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	6899      	ldr	r1, [r3, #8]
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	899a      	ldrh	r2, [r3, #12]
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	791b      	ldrb	r3, [r3, #4]
 800bb44:	6878      	ldr	r0, [r7, #4]
 800bb46:	f000 f93a 	bl	800bdbe <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	2204      	movs	r2, #4
 800bb4e:	761a      	strb	r2, [r3, #24]
      break;
 800bb50:	e0f1      	b.n	800bd36 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	791b      	ldrb	r3, [r3, #4]
 800bb56:	4619      	mov	r1, r3
 800bb58:	6878      	ldr	r0, [r7, #4]
 800bb5a:	f003 ff6d 	bl	800fa38 <USBH_LL_GetURBState>
 800bb5e:	4603      	mov	r3, r0
 800bb60:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800bb62:	7bbb      	ldrb	r3, [r7, #14]
 800bb64:	2b01      	cmp	r3, #1
 800bb66:	d102      	bne.n	800bb6e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	2209      	movs	r2, #9
 800bb6c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800bb6e:	7bbb      	ldrb	r3, [r7, #14]
 800bb70:	2b05      	cmp	r3, #5
 800bb72:	d102      	bne.n	800bb7a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800bb74:	2303      	movs	r3, #3
 800bb76:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800bb78:	e0d6      	b.n	800bd28 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800bb7a:	7bbb      	ldrb	r3, [r7, #14]
 800bb7c:	2b04      	cmp	r3, #4
 800bb7e:	f040 80d3 	bne.w	800bd28 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	220b      	movs	r2, #11
 800bb86:	761a      	strb	r2, [r3, #24]
      break;
 800bb88:	e0ce      	b.n	800bd28 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	6899      	ldr	r1, [r3, #8]
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	899a      	ldrh	r2, [r3, #12]
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	795b      	ldrb	r3, [r3, #5]
 800bb96:	2001      	movs	r0, #1
 800bb98:	9000      	str	r0, [sp, #0]
 800bb9a:	6878      	ldr	r0, [r7, #4]
 800bb9c:	f000 f8ea 	bl	800bd74 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bba6:	b29a      	uxth	r2, r3
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	2206      	movs	r2, #6
 800bbb0:	761a      	strb	r2, [r3, #24]
      break;
 800bbb2:	e0c0      	b.n	800bd36 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	795b      	ldrb	r3, [r3, #5]
 800bbb8:	4619      	mov	r1, r3
 800bbba:	6878      	ldr	r0, [r7, #4]
 800bbbc:	f003 ff3c 	bl	800fa38 <USBH_LL_GetURBState>
 800bbc0:	4603      	mov	r3, r0
 800bbc2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800bbc4:	7bbb      	ldrb	r3, [r7, #14]
 800bbc6:	2b01      	cmp	r3, #1
 800bbc8:	d103      	bne.n	800bbd2 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	2207      	movs	r2, #7
 800bbce:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800bbd0:	e0ac      	b.n	800bd2c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800bbd2:	7bbb      	ldrb	r3, [r7, #14]
 800bbd4:	2b05      	cmp	r3, #5
 800bbd6:	d105      	bne.n	800bbe4 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	220c      	movs	r2, #12
 800bbdc:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800bbde:	2303      	movs	r3, #3
 800bbe0:	73fb      	strb	r3, [r7, #15]
      break;
 800bbe2:	e0a3      	b.n	800bd2c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800bbe4:	7bbb      	ldrb	r3, [r7, #14]
 800bbe6:	2b02      	cmp	r3, #2
 800bbe8:	d103      	bne.n	800bbf2 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	2205      	movs	r2, #5
 800bbee:	761a      	strb	r2, [r3, #24]
      break;
 800bbf0:	e09c      	b.n	800bd2c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800bbf2:	7bbb      	ldrb	r3, [r7, #14]
 800bbf4:	2b04      	cmp	r3, #4
 800bbf6:	f040 8099 	bne.w	800bd2c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	220b      	movs	r2, #11
 800bbfe:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800bc00:	2302      	movs	r3, #2
 800bc02:	73fb      	strb	r3, [r7, #15]
      break;
 800bc04:	e092      	b.n	800bd2c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	791b      	ldrb	r3, [r3, #4]
 800bc0a:	2200      	movs	r2, #0
 800bc0c:	2100      	movs	r1, #0
 800bc0e:	6878      	ldr	r0, [r7, #4]
 800bc10:	f000 f8d5 	bl	800bdbe <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bc1a:	b29a      	uxth	r2, r3
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	2208      	movs	r2, #8
 800bc24:	761a      	strb	r2, [r3, #24]

      break;
 800bc26:	e086      	b.n	800bd36 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	791b      	ldrb	r3, [r3, #4]
 800bc2c:	4619      	mov	r1, r3
 800bc2e:	6878      	ldr	r0, [r7, #4]
 800bc30:	f003 ff02 	bl	800fa38 <USBH_LL_GetURBState>
 800bc34:	4603      	mov	r3, r0
 800bc36:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800bc38:	7bbb      	ldrb	r3, [r7, #14]
 800bc3a:	2b01      	cmp	r3, #1
 800bc3c:	d105      	bne.n	800bc4a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	220d      	movs	r2, #13
 800bc42:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800bc44:	2300      	movs	r3, #0
 800bc46:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800bc48:	e072      	b.n	800bd30 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800bc4a:	7bbb      	ldrb	r3, [r7, #14]
 800bc4c:	2b04      	cmp	r3, #4
 800bc4e:	d103      	bne.n	800bc58 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	220b      	movs	r2, #11
 800bc54:	761a      	strb	r2, [r3, #24]
      break;
 800bc56:	e06b      	b.n	800bd30 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800bc58:	7bbb      	ldrb	r3, [r7, #14]
 800bc5a:	2b05      	cmp	r3, #5
 800bc5c:	d168      	bne.n	800bd30 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800bc5e:	2303      	movs	r3, #3
 800bc60:	73fb      	strb	r3, [r7, #15]
      break;
 800bc62:	e065      	b.n	800bd30 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	795b      	ldrb	r3, [r3, #5]
 800bc68:	2201      	movs	r2, #1
 800bc6a:	9200      	str	r2, [sp, #0]
 800bc6c:	2200      	movs	r2, #0
 800bc6e:	2100      	movs	r1, #0
 800bc70:	6878      	ldr	r0, [r7, #4]
 800bc72:	f000 f87f 	bl	800bd74 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bc7c:	b29a      	uxth	r2, r3
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	220a      	movs	r2, #10
 800bc86:	761a      	strb	r2, [r3, #24]
      break;
 800bc88:	e055      	b.n	800bd36 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	795b      	ldrb	r3, [r3, #5]
 800bc8e:	4619      	mov	r1, r3
 800bc90:	6878      	ldr	r0, [r7, #4]
 800bc92:	f003 fed1 	bl	800fa38 <USBH_LL_GetURBState>
 800bc96:	4603      	mov	r3, r0
 800bc98:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800bc9a:	7bbb      	ldrb	r3, [r7, #14]
 800bc9c:	2b01      	cmp	r3, #1
 800bc9e:	d105      	bne.n	800bcac <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800bca0:	2300      	movs	r3, #0
 800bca2:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	220d      	movs	r2, #13
 800bca8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800bcaa:	e043      	b.n	800bd34 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800bcac:	7bbb      	ldrb	r3, [r7, #14]
 800bcae:	2b02      	cmp	r3, #2
 800bcb0:	d103      	bne.n	800bcba <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	2209      	movs	r2, #9
 800bcb6:	761a      	strb	r2, [r3, #24]
      break;
 800bcb8:	e03c      	b.n	800bd34 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800bcba:	7bbb      	ldrb	r3, [r7, #14]
 800bcbc:	2b04      	cmp	r3, #4
 800bcbe:	d139      	bne.n	800bd34 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	220b      	movs	r2, #11
 800bcc4:	761a      	strb	r2, [r3, #24]
      break;
 800bcc6:	e035      	b.n	800bd34 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	7e5b      	ldrb	r3, [r3, #25]
 800bccc:	3301      	adds	r3, #1
 800bcce:	b2da      	uxtb	r2, r3
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	765a      	strb	r2, [r3, #25]
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	7e5b      	ldrb	r3, [r3, #25]
 800bcd8:	2b02      	cmp	r3, #2
 800bcda:	d806      	bhi.n	800bcea <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	2201      	movs	r2, #1
 800bce0:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	2201      	movs	r2, #1
 800bce6:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800bce8:	e025      	b.n	800bd36 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bcf0:	2106      	movs	r1, #6
 800bcf2:	6878      	ldr	r0, [r7, #4]
 800bcf4:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	2200      	movs	r2, #0
 800bcfa:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	795b      	ldrb	r3, [r3, #5]
 800bd00:	4619      	mov	r1, r3
 800bd02:	6878      	ldr	r0, [r7, #4]
 800bd04:	f000 f90c 	bl	800bf20 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	791b      	ldrb	r3, [r3, #4]
 800bd0c:	4619      	mov	r1, r3
 800bd0e:	6878      	ldr	r0, [r7, #4]
 800bd10:	f000 f906 	bl	800bf20 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	2200      	movs	r2, #0
 800bd18:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800bd1a:	2302      	movs	r3, #2
 800bd1c:	73fb      	strb	r3, [r7, #15]
      break;
 800bd1e:	e00a      	b.n	800bd36 <USBH_HandleControl+0x2de>

    default:
      break;
 800bd20:	bf00      	nop
 800bd22:	e008      	b.n	800bd36 <USBH_HandleControl+0x2de>
      break;
 800bd24:	bf00      	nop
 800bd26:	e006      	b.n	800bd36 <USBH_HandleControl+0x2de>
      break;
 800bd28:	bf00      	nop
 800bd2a:	e004      	b.n	800bd36 <USBH_HandleControl+0x2de>
      break;
 800bd2c:	bf00      	nop
 800bd2e:	e002      	b.n	800bd36 <USBH_HandleControl+0x2de>
      break;
 800bd30:	bf00      	nop
 800bd32:	e000      	b.n	800bd36 <USBH_HandleControl+0x2de>
      break;
 800bd34:	bf00      	nop
  }

  return status;
 800bd36:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd38:	4618      	mov	r0, r3
 800bd3a:	3710      	adds	r7, #16
 800bd3c:	46bd      	mov	sp, r7
 800bd3e:	bd80      	pop	{r7, pc}

0800bd40 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b088      	sub	sp, #32
 800bd44:	af04      	add	r7, sp, #16
 800bd46:	60f8      	str	r0, [r7, #12]
 800bd48:	60b9      	str	r1, [r7, #8]
 800bd4a:	4613      	mov	r3, r2
 800bd4c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800bd4e:	79f9      	ldrb	r1, [r7, #7]
 800bd50:	2300      	movs	r3, #0
 800bd52:	9303      	str	r3, [sp, #12]
 800bd54:	2308      	movs	r3, #8
 800bd56:	9302      	str	r3, [sp, #8]
 800bd58:	68bb      	ldr	r3, [r7, #8]
 800bd5a:	9301      	str	r3, [sp, #4]
 800bd5c:	2300      	movs	r3, #0
 800bd5e:	9300      	str	r3, [sp, #0]
 800bd60:	2300      	movs	r3, #0
 800bd62:	2200      	movs	r2, #0
 800bd64:	68f8      	ldr	r0, [r7, #12]
 800bd66:	f003 fe36 	bl	800f9d6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800bd6a:	2300      	movs	r3, #0
}
 800bd6c:	4618      	mov	r0, r3
 800bd6e:	3710      	adds	r7, #16
 800bd70:	46bd      	mov	sp, r7
 800bd72:	bd80      	pop	{r7, pc}

0800bd74 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800bd74:	b580      	push	{r7, lr}
 800bd76:	b088      	sub	sp, #32
 800bd78:	af04      	add	r7, sp, #16
 800bd7a:	60f8      	str	r0, [r7, #12]
 800bd7c:	60b9      	str	r1, [r7, #8]
 800bd7e:	4611      	mov	r1, r2
 800bd80:	461a      	mov	r2, r3
 800bd82:	460b      	mov	r3, r1
 800bd84:	80fb      	strh	r3, [r7, #6]
 800bd86:	4613      	mov	r3, r2
 800bd88:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d001      	beq.n	800bd98 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800bd94:	2300      	movs	r3, #0
 800bd96:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800bd98:	7979      	ldrb	r1, [r7, #5]
 800bd9a:	7e3b      	ldrb	r3, [r7, #24]
 800bd9c:	9303      	str	r3, [sp, #12]
 800bd9e:	88fb      	ldrh	r3, [r7, #6]
 800bda0:	9302      	str	r3, [sp, #8]
 800bda2:	68bb      	ldr	r3, [r7, #8]
 800bda4:	9301      	str	r3, [sp, #4]
 800bda6:	2301      	movs	r3, #1
 800bda8:	9300      	str	r3, [sp, #0]
 800bdaa:	2300      	movs	r3, #0
 800bdac:	2200      	movs	r2, #0
 800bdae:	68f8      	ldr	r0, [r7, #12]
 800bdb0:	f003 fe11 	bl	800f9d6 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800bdb4:	2300      	movs	r3, #0
}
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	3710      	adds	r7, #16
 800bdba:	46bd      	mov	sp, r7
 800bdbc:	bd80      	pop	{r7, pc}

0800bdbe <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800bdbe:	b580      	push	{r7, lr}
 800bdc0:	b088      	sub	sp, #32
 800bdc2:	af04      	add	r7, sp, #16
 800bdc4:	60f8      	str	r0, [r7, #12]
 800bdc6:	60b9      	str	r1, [r7, #8]
 800bdc8:	4611      	mov	r1, r2
 800bdca:	461a      	mov	r2, r3
 800bdcc:	460b      	mov	r3, r1
 800bdce:	80fb      	strh	r3, [r7, #6]
 800bdd0:	4613      	mov	r3, r2
 800bdd2:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800bdd4:	7979      	ldrb	r1, [r7, #5]
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	9303      	str	r3, [sp, #12]
 800bdda:	88fb      	ldrh	r3, [r7, #6]
 800bddc:	9302      	str	r3, [sp, #8]
 800bdde:	68bb      	ldr	r3, [r7, #8]
 800bde0:	9301      	str	r3, [sp, #4]
 800bde2:	2301      	movs	r3, #1
 800bde4:	9300      	str	r3, [sp, #0]
 800bde6:	2300      	movs	r3, #0
 800bde8:	2201      	movs	r2, #1
 800bdea:	68f8      	ldr	r0, [r7, #12]
 800bdec:	f003 fdf3 	bl	800f9d6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800bdf0:	2300      	movs	r3, #0

}
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	3710      	adds	r7, #16
 800bdf6:	46bd      	mov	sp, r7
 800bdf8:	bd80      	pop	{r7, pc}

0800bdfa <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800bdfa:	b580      	push	{r7, lr}
 800bdfc:	b088      	sub	sp, #32
 800bdfe:	af04      	add	r7, sp, #16
 800be00:	60f8      	str	r0, [r7, #12]
 800be02:	60b9      	str	r1, [r7, #8]
 800be04:	4611      	mov	r1, r2
 800be06:	461a      	mov	r2, r3
 800be08:	460b      	mov	r3, r1
 800be0a:	80fb      	strh	r3, [r7, #6]
 800be0c:	4613      	mov	r3, r2
 800be0e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800be16:	2b00      	cmp	r3, #0
 800be18:	d001      	beq.n	800be1e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800be1a:	2300      	movs	r3, #0
 800be1c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800be1e:	7979      	ldrb	r1, [r7, #5]
 800be20:	7e3b      	ldrb	r3, [r7, #24]
 800be22:	9303      	str	r3, [sp, #12]
 800be24:	88fb      	ldrh	r3, [r7, #6]
 800be26:	9302      	str	r3, [sp, #8]
 800be28:	68bb      	ldr	r3, [r7, #8]
 800be2a:	9301      	str	r3, [sp, #4]
 800be2c:	2301      	movs	r3, #1
 800be2e:	9300      	str	r3, [sp, #0]
 800be30:	2302      	movs	r3, #2
 800be32:	2200      	movs	r2, #0
 800be34:	68f8      	ldr	r0, [r7, #12]
 800be36:	f003 fdce 	bl	800f9d6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800be3a:	2300      	movs	r3, #0
}
 800be3c:	4618      	mov	r0, r3
 800be3e:	3710      	adds	r7, #16
 800be40:	46bd      	mov	sp, r7
 800be42:	bd80      	pop	{r7, pc}

0800be44 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800be44:	b580      	push	{r7, lr}
 800be46:	b088      	sub	sp, #32
 800be48:	af04      	add	r7, sp, #16
 800be4a:	60f8      	str	r0, [r7, #12]
 800be4c:	60b9      	str	r1, [r7, #8]
 800be4e:	4611      	mov	r1, r2
 800be50:	461a      	mov	r2, r3
 800be52:	460b      	mov	r3, r1
 800be54:	80fb      	strh	r3, [r7, #6]
 800be56:	4613      	mov	r3, r2
 800be58:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800be5a:	7979      	ldrb	r1, [r7, #5]
 800be5c:	2300      	movs	r3, #0
 800be5e:	9303      	str	r3, [sp, #12]
 800be60:	88fb      	ldrh	r3, [r7, #6]
 800be62:	9302      	str	r3, [sp, #8]
 800be64:	68bb      	ldr	r3, [r7, #8]
 800be66:	9301      	str	r3, [sp, #4]
 800be68:	2301      	movs	r3, #1
 800be6a:	9300      	str	r3, [sp, #0]
 800be6c:	2302      	movs	r3, #2
 800be6e:	2201      	movs	r2, #1
 800be70:	68f8      	ldr	r0, [r7, #12]
 800be72:	f003 fdb0 	bl	800f9d6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800be76:	2300      	movs	r3, #0
}
 800be78:	4618      	mov	r0, r3
 800be7a:	3710      	adds	r7, #16
 800be7c:	46bd      	mov	sp, r7
 800be7e:	bd80      	pop	{r7, pc}

0800be80 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800be80:	b580      	push	{r7, lr}
 800be82:	b086      	sub	sp, #24
 800be84:	af04      	add	r7, sp, #16
 800be86:	6078      	str	r0, [r7, #4]
 800be88:	4608      	mov	r0, r1
 800be8a:	4611      	mov	r1, r2
 800be8c:	461a      	mov	r2, r3
 800be8e:	4603      	mov	r3, r0
 800be90:	70fb      	strb	r3, [r7, #3]
 800be92:	460b      	mov	r3, r1
 800be94:	70bb      	strb	r3, [r7, #2]
 800be96:	4613      	mov	r3, r2
 800be98:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800be9a:	7878      	ldrb	r0, [r7, #1]
 800be9c:	78ba      	ldrb	r2, [r7, #2]
 800be9e:	78f9      	ldrb	r1, [r7, #3]
 800bea0:	8b3b      	ldrh	r3, [r7, #24]
 800bea2:	9302      	str	r3, [sp, #8]
 800bea4:	7d3b      	ldrb	r3, [r7, #20]
 800bea6:	9301      	str	r3, [sp, #4]
 800bea8:	7c3b      	ldrb	r3, [r7, #16]
 800beaa:	9300      	str	r3, [sp, #0]
 800beac:	4603      	mov	r3, r0
 800beae:	6878      	ldr	r0, [r7, #4]
 800beb0:	f003 fd43 	bl	800f93a <USBH_LL_OpenPipe>

  return USBH_OK;
 800beb4:	2300      	movs	r3, #0
}
 800beb6:	4618      	mov	r0, r3
 800beb8:	3708      	adds	r7, #8
 800beba:	46bd      	mov	sp, r7
 800bebc:	bd80      	pop	{r7, pc}

0800bebe <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800bebe:	b580      	push	{r7, lr}
 800bec0:	b082      	sub	sp, #8
 800bec2:	af00      	add	r7, sp, #0
 800bec4:	6078      	str	r0, [r7, #4]
 800bec6:	460b      	mov	r3, r1
 800bec8:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800beca:	78fb      	ldrb	r3, [r7, #3]
 800becc:	4619      	mov	r1, r3
 800bece:	6878      	ldr	r0, [r7, #4]
 800bed0:	f003 fd62 	bl	800f998 <USBH_LL_ClosePipe>

  return USBH_OK;
 800bed4:	2300      	movs	r3, #0
}
 800bed6:	4618      	mov	r0, r3
 800bed8:	3708      	adds	r7, #8
 800beda:	46bd      	mov	sp, r7
 800bedc:	bd80      	pop	{r7, pc}

0800bede <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800bede:	b580      	push	{r7, lr}
 800bee0:	b084      	sub	sp, #16
 800bee2:	af00      	add	r7, sp, #0
 800bee4:	6078      	str	r0, [r7, #4]
 800bee6:	460b      	mov	r3, r1
 800bee8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800beea:	6878      	ldr	r0, [r7, #4]
 800beec:	f000 f836 	bl	800bf5c <USBH_GetFreePipe>
 800bef0:	4603      	mov	r3, r0
 800bef2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800bef4:	89fb      	ldrh	r3, [r7, #14]
 800bef6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800befa:	4293      	cmp	r3, r2
 800befc:	d00a      	beq.n	800bf14 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800befe:	78fa      	ldrb	r2, [r7, #3]
 800bf00:	89fb      	ldrh	r3, [r7, #14]
 800bf02:	f003 030f 	and.w	r3, r3, #15
 800bf06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bf0a:	6879      	ldr	r1, [r7, #4]
 800bf0c:	33e0      	adds	r3, #224	; 0xe0
 800bf0e:	009b      	lsls	r3, r3, #2
 800bf10:	440b      	add	r3, r1
 800bf12:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800bf14:	89fb      	ldrh	r3, [r7, #14]
 800bf16:	b2db      	uxtb	r3, r3
}
 800bf18:	4618      	mov	r0, r3
 800bf1a:	3710      	adds	r7, #16
 800bf1c:	46bd      	mov	sp, r7
 800bf1e:	bd80      	pop	{r7, pc}

0800bf20 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800bf20:	b480      	push	{r7}
 800bf22:	b083      	sub	sp, #12
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	6078      	str	r0, [r7, #4]
 800bf28:	460b      	mov	r3, r1
 800bf2a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800bf2c:	78fb      	ldrb	r3, [r7, #3]
 800bf2e:	2b0f      	cmp	r3, #15
 800bf30:	d80d      	bhi.n	800bf4e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800bf32:	78fb      	ldrb	r3, [r7, #3]
 800bf34:	687a      	ldr	r2, [r7, #4]
 800bf36:	33e0      	adds	r3, #224	; 0xe0
 800bf38:	009b      	lsls	r3, r3, #2
 800bf3a:	4413      	add	r3, r2
 800bf3c:	685a      	ldr	r2, [r3, #4]
 800bf3e:	78fb      	ldrb	r3, [r7, #3]
 800bf40:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800bf44:	6879      	ldr	r1, [r7, #4]
 800bf46:	33e0      	adds	r3, #224	; 0xe0
 800bf48:	009b      	lsls	r3, r3, #2
 800bf4a:	440b      	add	r3, r1
 800bf4c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800bf4e:	2300      	movs	r3, #0
}
 800bf50:	4618      	mov	r0, r3
 800bf52:	370c      	adds	r7, #12
 800bf54:	46bd      	mov	sp, r7
 800bf56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf5a:	4770      	bx	lr

0800bf5c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800bf5c:	b480      	push	{r7}
 800bf5e:	b085      	sub	sp, #20
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800bf64:	2300      	movs	r3, #0
 800bf66:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800bf68:	2300      	movs	r3, #0
 800bf6a:	73fb      	strb	r3, [r7, #15]
 800bf6c:	e00f      	b.n	800bf8e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800bf6e:	7bfb      	ldrb	r3, [r7, #15]
 800bf70:	687a      	ldr	r2, [r7, #4]
 800bf72:	33e0      	adds	r3, #224	; 0xe0
 800bf74:	009b      	lsls	r3, r3, #2
 800bf76:	4413      	add	r3, r2
 800bf78:	685b      	ldr	r3, [r3, #4]
 800bf7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d102      	bne.n	800bf88 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800bf82:	7bfb      	ldrb	r3, [r7, #15]
 800bf84:	b29b      	uxth	r3, r3
 800bf86:	e007      	b.n	800bf98 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800bf88:	7bfb      	ldrb	r3, [r7, #15]
 800bf8a:	3301      	adds	r3, #1
 800bf8c:	73fb      	strb	r3, [r7, #15]
 800bf8e:	7bfb      	ldrb	r3, [r7, #15]
 800bf90:	2b0f      	cmp	r3, #15
 800bf92:	d9ec      	bls.n	800bf6e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800bf94:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800bf98:	4618      	mov	r0, r3
 800bf9a:	3714      	adds	r7, #20
 800bf9c:	46bd      	mov	sp, r7
 800bf9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa2:	4770      	bx	lr

0800bfa4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800bfa4:	b580      	push	{r7, lr}
 800bfa6:	b084      	sub	sp, #16
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	4603      	mov	r3, r0
 800bfac:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800bfae:	79fb      	ldrb	r3, [r7, #7]
 800bfb0:	4a08      	ldr	r2, [pc, #32]	; (800bfd4 <disk_status+0x30>)
 800bfb2:	009b      	lsls	r3, r3, #2
 800bfb4:	4413      	add	r3, r2
 800bfb6:	685b      	ldr	r3, [r3, #4]
 800bfb8:	685b      	ldr	r3, [r3, #4]
 800bfba:	79fa      	ldrb	r2, [r7, #7]
 800bfbc:	4905      	ldr	r1, [pc, #20]	; (800bfd4 <disk_status+0x30>)
 800bfbe:	440a      	add	r2, r1
 800bfc0:	7a12      	ldrb	r2, [r2, #8]
 800bfc2:	4610      	mov	r0, r2
 800bfc4:	4798      	blx	r3
 800bfc6:	4603      	mov	r3, r0
 800bfc8:	73fb      	strb	r3, [r7, #15]
  return stat;
 800bfca:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfcc:	4618      	mov	r0, r3
 800bfce:	3710      	adds	r7, #16
 800bfd0:	46bd      	mov	sp, r7
 800bfd2:	bd80      	pop	{r7, pc}
 800bfd4:	20001dd4 	.word	0x20001dd4

0800bfd8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	b084      	sub	sp, #16
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	4603      	mov	r3, r0
 800bfe0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800bfe6:	79fb      	ldrb	r3, [r7, #7]
 800bfe8:	4a0d      	ldr	r2, [pc, #52]	; (800c020 <disk_initialize+0x48>)
 800bfea:	5cd3      	ldrb	r3, [r2, r3]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d111      	bne.n	800c014 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800bff0:	79fb      	ldrb	r3, [r7, #7]
 800bff2:	4a0b      	ldr	r2, [pc, #44]	; (800c020 <disk_initialize+0x48>)
 800bff4:	2101      	movs	r1, #1
 800bff6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800bff8:	79fb      	ldrb	r3, [r7, #7]
 800bffa:	4a09      	ldr	r2, [pc, #36]	; (800c020 <disk_initialize+0x48>)
 800bffc:	009b      	lsls	r3, r3, #2
 800bffe:	4413      	add	r3, r2
 800c000:	685b      	ldr	r3, [r3, #4]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	79fa      	ldrb	r2, [r7, #7]
 800c006:	4906      	ldr	r1, [pc, #24]	; (800c020 <disk_initialize+0x48>)
 800c008:	440a      	add	r2, r1
 800c00a:	7a12      	ldrb	r2, [r2, #8]
 800c00c:	4610      	mov	r0, r2
 800c00e:	4798      	blx	r3
 800c010:	4603      	mov	r3, r0
 800c012:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800c014:	7bfb      	ldrb	r3, [r7, #15]
}
 800c016:	4618      	mov	r0, r3
 800c018:	3710      	adds	r7, #16
 800c01a:	46bd      	mov	sp, r7
 800c01c:	bd80      	pop	{r7, pc}
 800c01e:	bf00      	nop
 800c020:	20001dd4 	.word	0x20001dd4

0800c024 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800c024:	b590      	push	{r4, r7, lr}
 800c026:	b087      	sub	sp, #28
 800c028:	af00      	add	r7, sp, #0
 800c02a:	60b9      	str	r1, [r7, #8]
 800c02c:	607a      	str	r2, [r7, #4]
 800c02e:	603b      	str	r3, [r7, #0]
 800c030:	4603      	mov	r3, r0
 800c032:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800c034:	7bfb      	ldrb	r3, [r7, #15]
 800c036:	4a0a      	ldr	r2, [pc, #40]	; (800c060 <disk_read+0x3c>)
 800c038:	009b      	lsls	r3, r3, #2
 800c03a:	4413      	add	r3, r2
 800c03c:	685b      	ldr	r3, [r3, #4]
 800c03e:	689c      	ldr	r4, [r3, #8]
 800c040:	7bfb      	ldrb	r3, [r7, #15]
 800c042:	4a07      	ldr	r2, [pc, #28]	; (800c060 <disk_read+0x3c>)
 800c044:	4413      	add	r3, r2
 800c046:	7a18      	ldrb	r0, [r3, #8]
 800c048:	683b      	ldr	r3, [r7, #0]
 800c04a:	687a      	ldr	r2, [r7, #4]
 800c04c:	68b9      	ldr	r1, [r7, #8]
 800c04e:	47a0      	blx	r4
 800c050:	4603      	mov	r3, r0
 800c052:	75fb      	strb	r3, [r7, #23]
  return res;
 800c054:	7dfb      	ldrb	r3, [r7, #23]
}
 800c056:	4618      	mov	r0, r3
 800c058:	371c      	adds	r7, #28
 800c05a:	46bd      	mov	sp, r7
 800c05c:	bd90      	pop	{r4, r7, pc}
 800c05e:	bf00      	nop
 800c060:	20001dd4 	.word	0x20001dd4

0800c064 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800c064:	b590      	push	{r4, r7, lr}
 800c066:	b087      	sub	sp, #28
 800c068:	af00      	add	r7, sp, #0
 800c06a:	60b9      	str	r1, [r7, #8]
 800c06c:	607a      	str	r2, [r7, #4]
 800c06e:	603b      	str	r3, [r7, #0]
 800c070:	4603      	mov	r3, r0
 800c072:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800c074:	7bfb      	ldrb	r3, [r7, #15]
 800c076:	4a0a      	ldr	r2, [pc, #40]	; (800c0a0 <disk_write+0x3c>)
 800c078:	009b      	lsls	r3, r3, #2
 800c07a:	4413      	add	r3, r2
 800c07c:	685b      	ldr	r3, [r3, #4]
 800c07e:	68dc      	ldr	r4, [r3, #12]
 800c080:	7bfb      	ldrb	r3, [r7, #15]
 800c082:	4a07      	ldr	r2, [pc, #28]	; (800c0a0 <disk_write+0x3c>)
 800c084:	4413      	add	r3, r2
 800c086:	7a18      	ldrb	r0, [r3, #8]
 800c088:	683b      	ldr	r3, [r7, #0]
 800c08a:	687a      	ldr	r2, [r7, #4]
 800c08c:	68b9      	ldr	r1, [r7, #8]
 800c08e:	47a0      	blx	r4
 800c090:	4603      	mov	r3, r0
 800c092:	75fb      	strb	r3, [r7, #23]
  return res;
 800c094:	7dfb      	ldrb	r3, [r7, #23]
}
 800c096:	4618      	mov	r0, r3
 800c098:	371c      	adds	r7, #28
 800c09a:	46bd      	mov	sp, r7
 800c09c:	bd90      	pop	{r4, r7, pc}
 800c09e:	bf00      	nop
 800c0a0:	20001dd4 	.word	0x20001dd4

0800c0a4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800c0a4:	b580      	push	{r7, lr}
 800c0a6:	b084      	sub	sp, #16
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	4603      	mov	r3, r0
 800c0ac:	603a      	str	r2, [r7, #0]
 800c0ae:	71fb      	strb	r3, [r7, #7]
 800c0b0:	460b      	mov	r3, r1
 800c0b2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800c0b4:	79fb      	ldrb	r3, [r7, #7]
 800c0b6:	4a09      	ldr	r2, [pc, #36]	; (800c0dc <disk_ioctl+0x38>)
 800c0b8:	009b      	lsls	r3, r3, #2
 800c0ba:	4413      	add	r3, r2
 800c0bc:	685b      	ldr	r3, [r3, #4]
 800c0be:	691b      	ldr	r3, [r3, #16]
 800c0c0:	79fa      	ldrb	r2, [r7, #7]
 800c0c2:	4906      	ldr	r1, [pc, #24]	; (800c0dc <disk_ioctl+0x38>)
 800c0c4:	440a      	add	r2, r1
 800c0c6:	7a10      	ldrb	r0, [r2, #8]
 800c0c8:	79b9      	ldrb	r1, [r7, #6]
 800c0ca:	683a      	ldr	r2, [r7, #0]
 800c0cc:	4798      	blx	r3
 800c0ce:	4603      	mov	r3, r0
 800c0d0:	73fb      	strb	r3, [r7, #15]
  return res;
 800c0d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0d4:	4618      	mov	r0, r3
 800c0d6:	3710      	adds	r7, #16
 800c0d8:	46bd      	mov	sp, r7
 800c0da:	bd80      	pop	{r7, pc}
 800c0dc:	20001dd4 	.word	0x20001dd4

0800c0e0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800c0e0:	b480      	push	{r7}
 800c0e2:	b085      	sub	sp, #20
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	3301      	adds	r3, #1
 800c0ec:	781b      	ldrb	r3, [r3, #0]
 800c0ee:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800c0f0:	89fb      	ldrh	r3, [r7, #14]
 800c0f2:	021b      	lsls	r3, r3, #8
 800c0f4:	b21a      	sxth	r2, r3
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	781b      	ldrb	r3, [r3, #0]
 800c0fa:	b21b      	sxth	r3, r3
 800c0fc:	4313      	orrs	r3, r2
 800c0fe:	b21b      	sxth	r3, r3
 800c100:	81fb      	strh	r3, [r7, #14]
	return rv;
 800c102:	89fb      	ldrh	r3, [r7, #14]
}
 800c104:	4618      	mov	r0, r3
 800c106:	3714      	adds	r7, #20
 800c108:	46bd      	mov	sp, r7
 800c10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c10e:	4770      	bx	lr

0800c110 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800c110:	b480      	push	{r7}
 800c112:	b085      	sub	sp, #20
 800c114:	af00      	add	r7, sp, #0
 800c116:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	3303      	adds	r3, #3
 800c11c:	781b      	ldrb	r3, [r3, #0]
 800c11e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	021b      	lsls	r3, r3, #8
 800c124:	687a      	ldr	r2, [r7, #4]
 800c126:	3202      	adds	r2, #2
 800c128:	7812      	ldrb	r2, [r2, #0]
 800c12a:	4313      	orrs	r3, r2
 800c12c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	021b      	lsls	r3, r3, #8
 800c132:	687a      	ldr	r2, [r7, #4]
 800c134:	3201      	adds	r2, #1
 800c136:	7812      	ldrb	r2, [r2, #0]
 800c138:	4313      	orrs	r3, r2
 800c13a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	021b      	lsls	r3, r3, #8
 800c140:	687a      	ldr	r2, [r7, #4]
 800c142:	7812      	ldrb	r2, [r2, #0]
 800c144:	4313      	orrs	r3, r2
 800c146:	60fb      	str	r3, [r7, #12]
	return rv;
 800c148:	68fb      	ldr	r3, [r7, #12]
}
 800c14a:	4618      	mov	r0, r3
 800c14c:	3714      	adds	r7, #20
 800c14e:	46bd      	mov	sp, r7
 800c150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c154:	4770      	bx	lr

0800c156 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800c156:	b480      	push	{r7}
 800c158:	b083      	sub	sp, #12
 800c15a:	af00      	add	r7, sp, #0
 800c15c:	6078      	str	r0, [r7, #4]
 800c15e:	460b      	mov	r3, r1
 800c160:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	1c5a      	adds	r2, r3, #1
 800c166:	607a      	str	r2, [r7, #4]
 800c168:	887a      	ldrh	r2, [r7, #2]
 800c16a:	b2d2      	uxtb	r2, r2
 800c16c:	701a      	strb	r2, [r3, #0]
 800c16e:	887b      	ldrh	r3, [r7, #2]
 800c170:	0a1b      	lsrs	r3, r3, #8
 800c172:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	1c5a      	adds	r2, r3, #1
 800c178:	607a      	str	r2, [r7, #4]
 800c17a:	887a      	ldrh	r2, [r7, #2]
 800c17c:	b2d2      	uxtb	r2, r2
 800c17e:	701a      	strb	r2, [r3, #0]
}
 800c180:	bf00      	nop
 800c182:	370c      	adds	r7, #12
 800c184:	46bd      	mov	sp, r7
 800c186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c18a:	4770      	bx	lr

0800c18c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800c18c:	b480      	push	{r7}
 800c18e:	b083      	sub	sp, #12
 800c190:	af00      	add	r7, sp, #0
 800c192:	6078      	str	r0, [r7, #4]
 800c194:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	1c5a      	adds	r2, r3, #1
 800c19a:	607a      	str	r2, [r7, #4]
 800c19c:	683a      	ldr	r2, [r7, #0]
 800c19e:	b2d2      	uxtb	r2, r2
 800c1a0:	701a      	strb	r2, [r3, #0]
 800c1a2:	683b      	ldr	r3, [r7, #0]
 800c1a4:	0a1b      	lsrs	r3, r3, #8
 800c1a6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	1c5a      	adds	r2, r3, #1
 800c1ac:	607a      	str	r2, [r7, #4]
 800c1ae:	683a      	ldr	r2, [r7, #0]
 800c1b0:	b2d2      	uxtb	r2, r2
 800c1b2:	701a      	strb	r2, [r3, #0]
 800c1b4:	683b      	ldr	r3, [r7, #0]
 800c1b6:	0a1b      	lsrs	r3, r3, #8
 800c1b8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	1c5a      	adds	r2, r3, #1
 800c1be:	607a      	str	r2, [r7, #4]
 800c1c0:	683a      	ldr	r2, [r7, #0]
 800c1c2:	b2d2      	uxtb	r2, r2
 800c1c4:	701a      	strb	r2, [r3, #0]
 800c1c6:	683b      	ldr	r3, [r7, #0]
 800c1c8:	0a1b      	lsrs	r3, r3, #8
 800c1ca:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	1c5a      	adds	r2, r3, #1
 800c1d0:	607a      	str	r2, [r7, #4]
 800c1d2:	683a      	ldr	r2, [r7, #0]
 800c1d4:	b2d2      	uxtb	r2, r2
 800c1d6:	701a      	strb	r2, [r3, #0]
}
 800c1d8:	bf00      	nop
 800c1da:	370c      	adds	r7, #12
 800c1dc:	46bd      	mov	sp, r7
 800c1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e2:	4770      	bx	lr

0800c1e4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800c1e4:	b480      	push	{r7}
 800c1e6:	b087      	sub	sp, #28
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	60f8      	str	r0, [r7, #12]
 800c1ec:	60b9      	str	r1, [r7, #8]
 800c1ee:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800c1f4:	68bb      	ldr	r3, [r7, #8]
 800c1f6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d00d      	beq.n	800c21a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800c1fe:	693a      	ldr	r2, [r7, #16]
 800c200:	1c53      	adds	r3, r2, #1
 800c202:	613b      	str	r3, [r7, #16]
 800c204:	697b      	ldr	r3, [r7, #20]
 800c206:	1c59      	adds	r1, r3, #1
 800c208:	6179      	str	r1, [r7, #20]
 800c20a:	7812      	ldrb	r2, [r2, #0]
 800c20c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	3b01      	subs	r3, #1
 800c212:	607b      	str	r3, [r7, #4]
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	2b00      	cmp	r3, #0
 800c218:	d1f1      	bne.n	800c1fe <mem_cpy+0x1a>
	}
}
 800c21a:	bf00      	nop
 800c21c:	371c      	adds	r7, #28
 800c21e:	46bd      	mov	sp, r7
 800c220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c224:	4770      	bx	lr

0800c226 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800c226:	b480      	push	{r7}
 800c228:	b087      	sub	sp, #28
 800c22a:	af00      	add	r7, sp, #0
 800c22c:	60f8      	str	r0, [r7, #12]
 800c22e:	60b9      	str	r1, [r7, #8]
 800c230:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800c236:	697b      	ldr	r3, [r7, #20]
 800c238:	1c5a      	adds	r2, r3, #1
 800c23a:	617a      	str	r2, [r7, #20]
 800c23c:	68ba      	ldr	r2, [r7, #8]
 800c23e:	b2d2      	uxtb	r2, r2
 800c240:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	3b01      	subs	r3, #1
 800c246:	607b      	str	r3, [r7, #4]
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d1f3      	bne.n	800c236 <mem_set+0x10>
}
 800c24e:	bf00      	nop
 800c250:	bf00      	nop
 800c252:	371c      	adds	r7, #28
 800c254:	46bd      	mov	sp, r7
 800c256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c25a:	4770      	bx	lr

0800c25c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800c25c:	b480      	push	{r7}
 800c25e:	b089      	sub	sp, #36	; 0x24
 800c260:	af00      	add	r7, sp, #0
 800c262:	60f8      	str	r0, [r7, #12]
 800c264:	60b9      	str	r1, [r7, #8]
 800c266:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	61fb      	str	r3, [r7, #28]
 800c26c:	68bb      	ldr	r3, [r7, #8]
 800c26e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800c270:	2300      	movs	r3, #0
 800c272:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800c274:	69fb      	ldr	r3, [r7, #28]
 800c276:	1c5a      	adds	r2, r3, #1
 800c278:	61fa      	str	r2, [r7, #28]
 800c27a:	781b      	ldrb	r3, [r3, #0]
 800c27c:	4619      	mov	r1, r3
 800c27e:	69bb      	ldr	r3, [r7, #24]
 800c280:	1c5a      	adds	r2, r3, #1
 800c282:	61ba      	str	r2, [r7, #24]
 800c284:	781b      	ldrb	r3, [r3, #0]
 800c286:	1acb      	subs	r3, r1, r3
 800c288:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	3b01      	subs	r3, #1
 800c28e:	607b      	str	r3, [r7, #4]
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	2b00      	cmp	r3, #0
 800c294:	d002      	beq.n	800c29c <mem_cmp+0x40>
 800c296:	697b      	ldr	r3, [r7, #20]
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d0eb      	beq.n	800c274 <mem_cmp+0x18>

	return r;
 800c29c:	697b      	ldr	r3, [r7, #20]
}
 800c29e:	4618      	mov	r0, r3
 800c2a0:	3724      	adds	r7, #36	; 0x24
 800c2a2:	46bd      	mov	sp, r7
 800c2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a8:	4770      	bx	lr

0800c2aa <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800c2aa:	b480      	push	{r7}
 800c2ac:	b083      	sub	sp, #12
 800c2ae:	af00      	add	r7, sp, #0
 800c2b0:	6078      	str	r0, [r7, #4]
 800c2b2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800c2b4:	e002      	b.n	800c2bc <chk_chr+0x12>
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	3301      	adds	r3, #1
 800c2ba:	607b      	str	r3, [r7, #4]
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	781b      	ldrb	r3, [r3, #0]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d005      	beq.n	800c2d0 <chk_chr+0x26>
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	781b      	ldrb	r3, [r3, #0]
 800c2c8:	461a      	mov	r2, r3
 800c2ca:	683b      	ldr	r3, [r7, #0]
 800c2cc:	4293      	cmp	r3, r2
 800c2ce:	d1f2      	bne.n	800c2b6 <chk_chr+0xc>
	return *str;
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	781b      	ldrb	r3, [r3, #0]
}
 800c2d4:	4618      	mov	r0, r3
 800c2d6:	370c      	adds	r7, #12
 800c2d8:	46bd      	mov	sp, r7
 800c2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2de:	4770      	bx	lr

0800c2e0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c2e0:	b480      	push	{r7}
 800c2e2:	b085      	sub	sp, #20
 800c2e4:	af00      	add	r7, sp, #0
 800c2e6:	6078      	str	r0, [r7, #4]
 800c2e8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	60bb      	str	r3, [r7, #8]
 800c2ee:	68bb      	ldr	r3, [r7, #8]
 800c2f0:	60fb      	str	r3, [r7, #12]
 800c2f2:	e029      	b.n	800c348 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800c2f4:	4a27      	ldr	r2, [pc, #156]	; (800c394 <chk_lock+0xb4>)
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	011b      	lsls	r3, r3, #4
 800c2fa:	4413      	add	r3, r2
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d01d      	beq.n	800c33e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c302:	4a24      	ldr	r2, [pc, #144]	; (800c394 <chk_lock+0xb4>)
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	011b      	lsls	r3, r3, #4
 800c308:	4413      	add	r3, r2
 800c30a:	681a      	ldr	r2, [r3, #0]
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	429a      	cmp	r2, r3
 800c312:	d116      	bne.n	800c342 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800c314:	4a1f      	ldr	r2, [pc, #124]	; (800c394 <chk_lock+0xb4>)
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	011b      	lsls	r3, r3, #4
 800c31a:	4413      	add	r3, r2
 800c31c:	3304      	adds	r3, #4
 800c31e:	681a      	ldr	r2, [r3, #0]
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c324:	429a      	cmp	r2, r3
 800c326:	d10c      	bne.n	800c342 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c328:	4a1a      	ldr	r2, [pc, #104]	; (800c394 <chk_lock+0xb4>)
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	011b      	lsls	r3, r3, #4
 800c32e:	4413      	add	r3, r2
 800c330:	3308      	adds	r3, #8
 800c332:	681a      	ldr	r2, [r3, #0]
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800c338:	429a      	cmp	r2, r3
 800c33a:	d102      	bne.n	800c342 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c33c:	e007      	b.n	800c34e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800c33e:	2301      	movs	r3, #1
 800c340:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	3301      	adds	r3, #1
 800c346:	60fb      	str	r3, [r7, #12]
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	2b01      	cmp	r3, #1
 800c34c:	d9d2      	bls.n	800c2f4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	2b02      	cmp	r3, #2
 800c352:	d109      	bne.n	800c368 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800c354:	68bb      	ldr	r3, [r7, #8]
 800c356:	2b00      	cmp	r3, #0
 800c358:	d102      	bne.n	800c360 <chk_lock+0x80>
 800c35a:	683b      	ldr	r3, [r7, #0]
 800c35c:	2b02      	cmp	r3, #2
 800c35e:	d101      	bne.n	800c364 <chk_lock+0x84>
 800c360:	2300      	movs	r3, #0
 800c362:	e010      	b.n	800c386 <chk_lock+0xa6>
 800c364:	2312      	movs	r3, #18
 800c366:	e00e      	b.n	800c386 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800c368:	683b      	ldr	r3, [r7, #0]
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d108      	bne.n	800c380 <chk_lock+0xa0>
 800c36e:	4a09      	ldr	r2, [pc, #36]	; (800c394 <chk_lock+0xb4>)
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	011b      	lsls	r3, r3, #4
 800c374:	4413      	add	r3, r2
 800c376:	330c      	adds	r3, #12
 800c378:	881b      	ldrh	r3, [r3, #0]
 800c37a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c37e:	d101      	bne.n	800c384 <chk_lock+0xa4>
 800c380:	2310      	movs	r3, #16
 800c382:	e000      	b.n	800c386 <chk_lock+0xa6>
 800c384:	2300      	movs	r3, #0
}
 800c386:	4618      	mov	r0, r3
 800c388:	3714      	adds	r7, #20
 800c38a:	46bd      	mov	sp, r7
 800c38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c390:	4770      	bx	lr
 800c392:	bf00      	nop
 800c394:	20001bb4 	.word	0x20001bb4

0800c398 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800c398:	b480      	push	{r7}
 800c39a:	b083      	sub	sp, #12
 800c39c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c39e:	2300      	movs	r3, #0
 800c3a0:	607b      	str	r3, [r7, #4]
 800c3a2:	e002      	b.n	800c3aa <enq_lock+0x12>
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	3301      	adds	r3, #1
 800c3a8:	607b      	str	r3, [r7, #4]
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	2b01      	cmp	r3, #1
 800c3ae:	d806      	bhi.n	800c3be <enq_lock+0x26>
 800c3b0:	4a09      	ldr	r2, [pc, #36]	; (800c3d8 <enq_lock+0x40>)
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	011b      	lsls	r3, r3, #4
 800c3b6:	4413      	add	r3, r2
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d1f2      	bne.n	800c3a4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	2b02      	cmp	r3, #2
 800c3c2:	bf14      	ite	ne
 800c3c4:	2301      	movne	r3, #1
 800c3c6:	2300      	moveq	r3, #0
 800c3c8:	b2db      	uxtb	r3, r3
}
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	370c      	adds	r7, #12
 800c3ce:	46bd      	mov	sp, r7
 800c3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d4:	4770      	bx	lr
 800c3d6:	bf00      	nop
 800c3d8:	20001bb4 	.word	0x20001bb4

0800c3dc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c3dc:	b480      	push	{r7}
 800c3de:	b085      	sub	sp, #20
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	6078      	str	r0, [r7, #4]
 800c3e4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c3e6:	2300      	movs	r3, #0
 800c3e8:	60fb      	str	r3, [r7, #12]
 800c3ea:	e01f      	b.n	800c42c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800c3ec:	4a41      	ldr	r2, [pc, #260]	; (800c4f4 <inc_lock+0x118>)
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	011b      	lsls	r3, r3, #4
 800c3f2:	4413      	add	r3, r2
 800c3f4:	681a      	ldr	r2, [r3, #0]
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	429a      	cmp	r2, r3
 800c3fc:	d113      	bne.n	800c426 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800c3fe:	4a3d      	ldr	r2, [pc, #244]	; (800c4f4 <inc_lock+0x118>)
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	011b      	lsls	r3, r3, #4
 800c404:	4413      	add	r3, r2
 800c406:	3304      	adds	r3, #4
 800c408:	681a      	ldr	r2, [r3, #0]
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800c40e:	429a      	cmp	r2, r3
 800c410:	d109      	bne.n	800c426 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800c412:	4a38      	ldr	r2, [pc, #224]	; (800c4f4 <inc_lock+0x118>)
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	011b      	lsls	r3, r3, #4
 800c418:	4413      	add	r3, r2
 800c41a:	3308      	adds	r3, #8
 800c41c:	681a      	ldr	r2, [r3, #0]
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800c422:	429a      	cmp	r2, r3
 800c424:	d006      	beq.n	800c434 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	3301      	adds	r3, #1
 800c42a:	60fb      	str	r3, [r7, #12]
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	2b01      	cmp	r3, #1
 800c430:	d9dc      	bls.n	800c3ec <inc_lock+0x10>
 800c432:	e000      	b.n	800c436 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800c434:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	2b02      	cmp	r3, #2
 800c43a:	d132      	bne.n	800c4a2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c43c:	2300      	movs	r3, #0
 800c43e:	60fb      	str	r3, [r7, #12]
 800c440:	e002      	b.n	800c448 <inc_lock+0x6c>
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	3301      	adds	r3, #1
 800c446:	60fb      	str	r3, [r7, #12]
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	2b01      	cmp	r3, #1
 800c44c:	d806      	bhi.n	800c45c <inc_lock+0x80>
 800c44e:	4a29      	ldr	r2, [pc, #164]	; (800c4f4 <inc_lock+0x118>)
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	011b      	lsls	r3, r3, #4
 800c454:	4413      	add	r3, r2
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d1f2      	bne.n	800c442 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	2b02      	cmp	r3, #2
 800c460:	d101      	bne.n	800c466 <inc_lock+0x8a>
 800c462:	2300      	movs	r3, #0
 800c464:	e040      	b.n	800c4e8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	681a      	ldr	r2, [r3, #0]
 800c46a:	4922      	ldr	r1, [pc, #136]	; (800c4f4 <inc_lock+0x118>)
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	011b      	lsls	r3, r3, #4
 800c470:	440b      	add	r3, r1
 800c472:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	689a      	ldr	r2, [r3, #8]
 800c478:	491e      	ldr	r1, [pc, #120]	; (800c4f4 <inc_lock+0x118>)
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	011b      	lsls	r3, r3, #4
 800c47e:	440b      	add	r3, r1
 800c480:	3304      	adds	r3, #4
 800c482:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	695a      	ldr	r2, [r3, #20]
 800c488:	491a      	ldr	r1, [pc, #104]	; (800c4f4 <inc_lock+0x118>)
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	011b      	lsls	r3, r3, #4
 800c48e:	440b      	add	r3, r1
 800c490:	3308      	adds	r3, #8
 800c492:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800c494:	4a17      	ldr	r2, [pc, #92]	; (800c4f4 <inc_lock+0x118>)
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	011b      	lsls	r3, r3, #4
 800c49a:	4413      	add	r3, r2
 800c49c:	330c      	adds	r3, #12
 800c49e:	2200      	movs	r2, #0
 800c4a0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800c4a2:	683b      	ldr	r3, [r7, #0]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d009      	beq.n	800c4bc <inc_lock+0xe0>
 800c4a8:	4a12      	ldr	r2, [pc, #72]	; (800c4f4 <inc_lock+0x118>)
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	011b      	lsls	r3, r3, #4
 800c4ae:	4413      	add	r3, r2
 800c4b0:	330c      	adds	r3, #12
 800c4b2:	881b      	ldrh	r3, [r3, #0]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d001      	beq.n	800c4bc <inc_lock+0xe0>
 800c4b8:	2300      	movs	r3, #0
 800c4ba:	e015      	b.n	800c4e8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800c4bc:	683b      	ldr	r3, [r7, #0]
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d108      	bne.n	800c4d4 <inc_lock+0xf8>
 800c4c2:	4a0c      	ldr	r2, [pc, #48]	; (800c4f4 <inc_lock+0x118>)
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	011b      	lsls	r3, r3, #4
 800c4c8:	4413      	add	r3, r2
 800c4ca:	330c      	adds	r3, #12
 800c4cc:	881b      	ldrh	r3, [r3, #0]
 800c4ce:	3301      	adds	r3, #1
 800c4d0:	b29a      	uxth	r2, r3
 800c4d2:	e001      	b.n	800c4d8 <inc_lock+0xfc>
 800c4d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c4d8:	4906      	ldr	r1, [pc, #24]	; (800c4f4 <inc_lock+0x118>)
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	011b      	lsls	r3, r3, #4
 800c4de:	440b      	add	r3, r1
 800c4e0:	330c      	adds	r3, #12
 800c4e2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	3301      	adds	r3, #1
}
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	3714      	adds	r7, #20
 800c4ec:	46bd      	mov	sp, r7
 800c4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f2:	4770      	bx	lr
 800c4f4:	20001bb4 	.word	0x20001bb4

0800c4f8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800c4f8:	b480      	push	{r7}
 800c4fa:	b085      	sub	sp, #20
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	3b01      	subs	r3, #1
 800c504:	607b      	str	r3, [r7, #4]
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	2b01      	cmp	r3, #1
 800c50a:	d825      	bhi.n	800c558 <dec_lock+0x60>
		n = Files[i].ctr;
 800c50c:	4a17      	ldr	r2, [pc, #92]	; (800c56c <dec_lock+0x74>)
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	011b      	lsls	r3, r3, #4
 800c512:	4413      	add	r3, r2
 800c514:	330c      	adds	r3, #12
 800c516:	881b      	ldrh	r3, [r3, #0]
 800c518:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800c51a:	89fb      	ldrh	r3, [r7, #14]
 800c51c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c520:	d101      	bne.n	800c526 <dec_lock+0x2e>
 800c522:	2300      	movs	r3, #0
 800c524:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800c526:	89fb      	ldrh	r3, [r7, #14]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d002      	beq.n	800c532 <dec_lock+0x3a>
 800c52c:	89fb      	ldrh	r3, [r7, #14]
 800c52e:	3b01      	subs	r3, #1
 800c530:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800c532:	4a0e      	ldr	r2, [pc, #56]	; (800c56c <dec_lock+0x74>)
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	011b      	lsls	r3, r3, #4
 800c538:	4413      	add	r3, r2
 800c53a:	330c      	adds	r3, #12
 800c53c:	89fa      	ldrh	r2, [r7, #14]
 800c53e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800c540:	89fb      	ldrh	r3, [r7, #14]
 800c542:	2b00      	cmp	r3, #0
 800c544:	d105      	bne.n	800c552 <dec_lock+0x5a>
 800c546:	4a09      	ldr	r2, [pc, #36]	; (800c56c <dec_lock+0x74>)
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	011b      	lsls	r3, r3, #4
 800c54c:	4413      	add	r3, r2
 800c54e:	2200      	movs	r2, #0
 800c550:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800c552:	2300      	movs	r3, #0
 800c554:	737b      	strb	r3, [r7, #13]
 800c556:	e001      	b.n	800c55c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800c558:	2302      	movs	r3, #2
 800c55a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800c55c:	7b7b      	ldrb	r3, [r7, #13]
}
 800c55e:	4618      	mov	r0, r3
 800c560:	3714      	adds	r7, #20
 800c562:	46bd      	mov	sp, r7
 800c564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c568:	4770      	bx	lr
 800c56a:	bf00      	nop
 800c56c:	20001bb4 	.word	0x20001bb4

0800c570 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800c570:	b480      	push	{r7}
 800c572:	b085      	sub	sp, #20
 800c574:	af00      	add	r7, sp, #0
 800c576:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800c578:	2300      	movs	r3, #0
 800c57a:	60fb      	str	r3, [r7, #12]
 800c57c:	e010      	b.n	800c5a0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800c57e:	4a0d      	ldr	r2, [pc, #52]	; (800c5b4 <clear_lock+0x44>)
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	011b      	lsls	r3, r3, #4
 800c584:	4413      	add	r3, r2
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	687a      	ldr	r2, [r7, #4]
 800c58a:	429a      	cmp	r2, r3
 800c58c:	d105      	bne.n	800c59a <clear_lock+0x2a>
 800c58e:	4a09      	ldr	r2, [pc, #36]	; (800c5b4 <clear_lock+0x44>)
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	011b      	lsls	r3, r3, #4
 800c594:	4413      	add	r3, r2
 800c596:	2200      	movs	r2, #0
 800c598:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	3301      	adds	r3, #1
 800c59e:	60fb      	str	r3, [r7, #12]
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	2b01      	cmp	r3, #1
 800c5a4:	d9eb      	bls.n	800c57e <clear_lock+0xe>
	}
}
 800c5a6:	bf00      	nop
 800c5a8:	bf00      	nop
 800c5aa:	3714      	adds	r7, #20
 800c5ac:	46bd      	mov	sp, r7
 800c5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b2:	4770      	bx	lr
 800c5b4:	20001bb4 	.word	0x20001bb4

0800c5b8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800c5b8:	b580      	push	{r7, lr}
 800c5ba:	b086      	sub	sp, #24
 800c5bc:	af00      	add	r7, sp, #0
 800c5be:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800c5c0:	2300      	movs	r3, #0
 800c5c2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	78db      	ldrb	r3, [r3, #3]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d034      	beq.n	800c636 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5d0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	7858      	ldrb	r0, [r3, #1]
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c5dc:	2301      	movs	r3, #1
 800c5de:	697a      	ldr	r2, [r7, #20]
 800c5e0:	f7ff fd40 	bl	800c064 <disk_write>
 800c5e4:	4603      	mov	r3, r0
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d002      	beq.n	800c5f0 <sync_window+0x38>
			res = FR_DISK_ERR;
 800c5ea:	2301      	movs	r3, #1
 800c5ec:	73fb      	strb	r3, [r7, #15]
 800c5ee:	e022      	b.n	800c636 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	2200      	movs	r2, #0
 800c5f4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5fa:	697a      	ldr	r2, [r7, #20]
 800c5fc:	1ad2      	subs	r2, r2, r3
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	69db      	ldr	r3, [r3, #28]
 800c602:	429a      	cmp	r2, r3
 800c604:	d217      	bcs.n	800c636 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	789b      	ldrb	r3, [r3, #2]
 800c60a:	613b      	str	r3, [r7, #16]
 800c60c:	e010      	b.n	800c630 <sync_window+0x78>
					wsect += fs->fsize;
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	69db      	ldr	r3, [r3, #28]
 800c612:	697a      	ldr	r2, [r7, #20]
 800c614:	4413      	add	r3, r2
 800c616:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	7858      	ldrb	r0, [r3, #1]
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c622:	2301      	movs	r3, #1
 800c624:	697a      	ldr	r2, [r7, #20]
 800c626:	f7ff fd1d 	bl	800c064 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c62a:	693b      	ldr	r3, [r7, #16]
 800c62c:	3b01      	subs	r3, #1
 800c62e:	613b      	str	r3, [r7, #16]
 800c630:	693b      	ldr	r3, [r7, #16]
 800c632:	2b01      	cmp	r3, #1
 800c634:	d8eb      	bhi.n	800c60e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800c636:	7bfb      	ldrb	r3, [r7, #15]
}
 800c638:	4618      	mov	r0, r3
 800c63a:	3718      	adds	r7, #24
 800c63c:	46bd      	mov	sp, r7
 800c63e:	bd80      	pop	{r7, pc}

0800c640 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800c640:	b580      	push	{r7, lr}
 800c642:	b084      	sub	sp, #16
 800c644:	af00      	add	r7, sp, #0
 800c646:	6078      	str	r0, [r7, #4]
 800c648:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800c64a:	2300      	movs	r3, #0
 800c64c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c652:	683a      	ldr	r2, [r7, #0]
 800c654:	429a      	cmp	r2, r3
 800c656:	d01b      	beq.n	800c690 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800c658:	6878      	ldr	r0, [r7, #4]
 800c65a:	f7ff ffad 	bl	800c5b8 <sync_window>
 800c65e:	4603      	mov	r3, r0
 800c660:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800c662:	7bfb      	ldrb	r3, [r7, #15]
 800c664:	2b00      	cmp	r3, #0
 800c666:	d113      	bne.n	800c690 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	7858      	ldrb	r0, [r3, #1]
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c672:	2301      	movs	r3, #1
 800c674:	683a      	ldr	r2, [r7, #0]
 800c676:	f7ff fcd5 	bl	800c024 <disk_read>
 800c67a:	4603      	mov	r3, r0
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d004      	beq.n	800c68a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800c680:	f04f 33ff 	mov.w	r3, #4294967295
 800c684:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800c686:	2301      	movs	r3, #1
 800c688:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	683a      	ldr	r2, [r7, #0]
 800c68e:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800c690:	7bfb      	ldrb	r3, [r7, #15]
}
 800c692:	4618      	mov	r0, r3
 800c694:	3710      	adds	r7, #16
 800c696:	46bd      	mov	sp, r7
 800c698:	bd80      	pop	{r7, pc}
	...

0800c69c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800c69c:	b580      	push	{r7, lr}
 800c69e:	b084      	sub	sp, #16
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800c6a4:	6878      	ldr	r0, [r7, #4]
 800c6a6:	f7ff ff87 	bl	800c5b8 <sync_window>
 800c6aa:	4603      	mov	r3, r0
 800c6ac:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c6ae:	7bfb      	ldrb	r3, [r7, #15]
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d158      	bne.n	800c766 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	781b      	ldrb	r3, [r3, #0]
 800c6b8:	2b03      	cmp	r3, #3
 800c6ba:	d148      	bne.n	800c74e <sync_fs+0xb2>
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	791b      	ldrb	r3, [r3, #4]
 800c6c0:	2b01      	cmp	r3, #1
 800c6c2:	d144      	bne.n	800c74e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	3334      	adds	r3, #52	; 0x34
 800c6c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c6cc:	2100      	movs	r1, #0
 800c6ce:	4618      	mov	r0, r3
 800c6d0:	f7ff fda9 	bl	800c226 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	3334      	adds	r3, #52	; 0x34
 800c6d8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c6dc:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800c6e0:	4618      	mov	r0, r3
 800c6e2:	f7ff fd38 	bl	800c156 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	3334      	adds	r3, #52	; 0x34
 800c6ea:	4921      	ldr	r1, [pc, #132]	; (800c770 <sync_fs+0xd4>)
 800c6ec:	4618      	mov	r0, r3
 800c6ee:	f7ff fd4d 	bl	800c18c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	3334      	adds	r3, #52	; 0x34
 800c6f6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c6fa:	491e      	ldr	r1, [pc, #120]	; (800c774 <sync_fs+0xd8>)
 800c6fc:	4618      	mov	r0, r3
 800c6fe:	f7ff fd45 	bl	800c18c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	3334      	adds	r3, #52	; 0x34
 800c706:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	695b      	ldr	r3, [r3, #20]
 800c70e:	4619      	mov	r1, r3
 800c710:	4610      	mov	r0, r2
 800c712:	f7ff fd3b 	bl	800c18c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	3334      	adds	r3, #52	; 0x34
 800c71a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	691b      	ldr	r3, [r3, #16]
 800c722:	4619      	mov	r1, r3
 800c724:	4610      	mov	r0, r2
 800c726:	f7ff fd31 	bl	800c18c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	6a1b      	ldr	r3, [r3, #32]
 800c72e:	1c5a      	adds	r2, r3, #1
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	7858      	ldrb	r0, [r3, #1]
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c742:	2301      	movs	r3, #1
 800c744:	f7ff fc8e 	bl	800c064 <disk_write>
			fs->fsi_flag = 0;
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	2200      	movs	r2, #0
 800c74c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	785b      	ldrb	r3, [r3, #1]
 800c752:	2200      	movs	r2, #0
 800c754:	2100      	movs	r1, #0
 800c756:	4618      	mov	r0, r3
 800c758:	f7ff fca4 	bl	800c0a4 <disk_ioctl>
 800c75c:	4603      	mov	r3, r0
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d001      	beq.n	800c766 <sync_fs+0xca>
 800c762:	2301      	movs	r3, #1
 800c764:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800c766:	7bfb      	ldrb	r3, [r7, #15]
}
 800c768:	4618      	mov	r0, r3
 800c76a:	3710      	adds	r7, #16
 800c76c:	46bd      	mov	sp, r7
 800c76e:	bd80      	pop	{r7, pc}
 800c770:	41615252 	.word	0x41615252
 800c774:	61417272 	.word	0x61417272

0800c778 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800c778:	b480      	push	{r7}
 800c77a:	b083      	sub	sp, #12
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	6078      	str	r0, [r7, #4]
 800c780:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800c782:	683b      	ldr	r3, [r7, #0]
 800c784:	3b02      	subs	r3, #2
 800c786:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	699b      	ldr	r3, [r3, #24]
 800c78c:	3b02      	subs	r3, #2
 800c78e:	683a      	ldr	r2, [r7, #0]
 800c790:	429a      	cmp	r2, r3
 800c792:	d301      	bcc.n	800c798 <clust2sect+0x20>
 800c794:	2300      	movs	r3, #0
 800c796:	e008      	b.n	800c7aa <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	895b      	ldrh	r3, [r3, #10]
 800c79c:	461a      	mov	r2, r3
 800c79e:	683b      	ldr	r3, [r7, #0]
 800c7a0:	fb03 f202 	mul.w	r2, r3, r2
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7a8:	4413      	add	r3, r2
}
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	370c      	adds	r7, #12
 800c7ae:	46bd      	mov	sp, r7
 800c7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b4:	4770      	bx	lr

0800c7b6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800c7b6:	b580      	push	{r7, lr}
 800c7b8:	b086      	sub	sp, #24
 800c7ba:	af00      	add	r7, sp, #0
 800c7bc:	6078      	str	r0, [r7, #4]
 800c7be:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800c7c6:	683b      	ldr	r3, [r7, #0]
 800c7c8:	2b01      	cmp	r3, #1
 800c7ca:	d904      	bls.n	800c7d6 <get_fat+0x20>
 800c7cc:	693b      	ldr	r3, [r7, #16]
 800c7ce:	699b      	ldr	r3, [r3, #24]
 800c7d0:	683a      	ldr	r2, [r7, #0]
 800c7d2:	429a      	cmp	r2, r3
 800c7d4:	d302      	bcc.n	800c7dc <get_fat+0x26>
		val = 1;	/* Internal error */
 800c7d6:	2301      	movs	r3, #1
 800c7d8:	617b      	str	r3, [r7, #20]
 800c7da:	e08f      	b.n	800c8fc <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800c7dc:	f04f 33ff 	mov.w	r3, #4294967295
 800c7e0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800c7e2:	693b      	ldr	r3, [r7, #16]
 800c7e4:	781b      	ldrb	r3, [r3, #0]
 800c7e6:	2b03      	cmp	r3, #3
 800c7e8:	d062      	beq.n	800c8b0 <get_fat+0xfa>
 800c7ea:	2b03      	cmp	r3, #3
 800c7ec:	dc7c      	bgt.n	800c8e8 <get_fat+0x132>
 800c7ee:	2b01      	cmp	r3, #1
 800c7f0:	d002      	beq.n	800c7f8 <get_fat+0x42>
 800c7f2:	2b02      	cmp	r3, #2
 800c7f4:	d042      	beq.n	800c87c <get_fat+0xc6>
 800c7f6:	e077      	b.n	800c8e8 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800c7f8:	683b      	ldr	r3, [r7, #0]
 800c7fa:	60fb      	str	r3, [r7, #12]
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	085b      	lsrs	r3, r3, #1
 800c800:	68fa      	ldr	r2, [r7, #12]
 800c802:	4413      	add	r3, r2
 800c804:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c806:	693b      	ldr	r3, [r7, #16]
 800c808:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	0a5b      	lsrs	r3, r3, #9
 800c80e:	4413      	add	r3, r2
 800c810:	4619      	mov	r1, r3
 800c812:	6938      	ldr	r0, [r7, #16]
 800c814:	f7ff ff14 	bl	800c640 <move_window>
 800c818:	4603      	mov	r3, r0
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d167      	bne.n	800c8ee <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	1c5a      	adds	r2, r3, #1
 800c822:	60fa      	str	r2, [r7, #12]
 800c824:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c828:	693a      	ldr	r2, [r7, #16]
 800c82a:	4413      	add	r3, r2
 800c82c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c830:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c832:	693b      	ldr	r3, [r7, #16]
 800c834:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	0a5b      	lsrs	r3, r3, #9
 800c83a:	4413      	add	r3, r2
 800c83c:	4619      	mov	r1, r3
 800c83e:	6938      	ldr	r0, [r7, #16]
 800c840:	f7ff fefe 	bl	800c640 <move_window>
 800c844:	4603      	mov	r3, r0
 800c846:	2b00      	cmp	r3, #0
 800c848:	d153      	bne.n	800c8f2 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c850:	693a      	ldr	r2, [r7, #16]
 800c852:	4413      	add	r3, r2
 800c854:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c858:	021b      	lsls	r3, r3, #8
 800c85a:	461a      	mov	r2, r3
 800c85c:	68bb      	ldr	r3, [r7, #8]
 800c85e:	4313      	orrs	r3, r2
 800c860:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800c862:	683b      	ldr	r3, [r7, #0]
 800c864:	f003 0301 	and.w	r3, r3, #1
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d002      	beq.n	800c872 <get_fat+0xbc>
 800c86c:	68bb      	ldr	r3, [r7, #8]
 800c86e:	091b      	lsrs	r3, r3, #4
 800c870:	e002      	b.n	800c878 <get_fat+0xc2>
 800c872:	68bb      	ldr	r3, [r7, #8]
 800c874:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c878:	617b      	str	r3, [r7, #20]
			break;
 800c87a:	e03f      	b.n	800c8fc <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c87c:	693b      	ldr	r3, [r7, #16]
 800c87e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c880:	683b      	ldr	r3, [r7, #0]
 800c882:	0a1b      	lsrs	r3, r3, #8
 800c884:	4413      	add	r3, r2
 800c886:	4619      	mov	r1, r3
 800c888:	6938      	ldr	r0, [r7, #16]
 800c88a:	f7ff fed9 	bl	800c640 <move_window>
 800c88e:	4603      	mov	r3, r0
 800c890:	2b00      	cmp	r3, #0
 800c892:	d130      	bne.n	800c8f6 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800c894:	693b      	ldr	r3, [r7, #16]
 800c896:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c89a:	683b      	ldr	r3, [r7, #0]
 800c89c:	005b      	lsls	r3, r3, #1
 800c89e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800c8a2:	4413      	add	r3, r2
 800c8a4:	4618      	mov	r0, r3
 800c8a6:	f7ff fc1b 	bl	800c0e0 <ld_word>
 800c8aa:	4603      	mov	r3, r0
 800c8ac:	617b      	str	r3, [r7, #20]
			break;
 800c8ae:	e025      	b.n	800c8fc <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c8b0:	693b      	ldr	r3, [r7, #16]
 800c8b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c8b4:	683b      	ldr	r3, [r7, #0]
 800c8b6:	09db      	lsrs	r3, r3, #7
 800c8b8:	4413      	add	r3, r2
 800c8ba:	4619      	mov	r1, r3
 800c8bc:	6938      	ldr	r0, [r7, #16]
 800c8be:	f7ff febf 	bl	800c640 <move_window>
 800c8c2:	4603      	mov	r3, r0
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d118      	bne.n	800c8fa <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800c8c8:	693b      	ldr	r3, [r7, #16]
 800c8ca:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c8ce:	683b      	ldr	r3, [r7, #0]
 800c8d0:	009b      	lsls	r3, r3, #2
 800c8d2:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c8d6:	4413      	add	r3, r2
 800c8d8:	4618      	mov	r0, r3
 800c8da:	f7ff fc19 	bl	800c110 <ld_dword>
 800c8de:	4603      	mov	r3, r0
 800c8e0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c8e4:	617b      	str	r3, [r7, #20]
			break;
 800c8e6:	e009      	b.n	800c8fc <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800c8e8:	2301      	movs	r3, #1
 800c8ea:	617b      	str	r3, [r7, #20]
 800c8ec:	e006      	b.n	800c8fc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c8ee:	bf00      	nop
 800c8f0:	e004      	b.n	800c8fc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c8f2:	bf00      	nop
 800c8f4:	e002      	b.n	800c8fc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c8f6:	bf00      	nop
 800c8f8:	e000      	b.n	800c8fc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c8fa:	bf00      	nop
		}
	}

	return val;
 800c8fc:	697b      	ldr	r3, [r7, #20]
}
 800c8fe:	4618      	mov	r0, r3
 800c900:	3718      	adds	r7, #24
 800c902:	46bd      	mov	sp, r7
 800c904:	bd80      	pop	{r7, pc}

0800c906 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800c906:	b590      	push	{r4, r7, lr}
 800c908:	b089      	sub	sp, #36	; 0x24
 800c90a:	af00      	add	r7, sp, #0
 800c90c:	60f8      	str	r0, [r7, #12]
 800c90e:	60b9      	str	r1, [r7, #8]
 800c910:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800c912:	2302      	movs	r3, #2
 800c914:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800c916:	68bb      	ldr	r3, [r7, #8]
 800c918:	2b01      	cmp	r3, #1
 800c91a:	f240 80d9 	bls.w	800cad0 <put_fat+0x1ca>
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	699b      	ldr	r3, [r3, #24]
 800c922:	68ba      	ldr	r2, [r7, #8]
 800c924:	429a      	cmp	r2, r3
 800c926:	f080 80d3 	bcs.w	800cad0 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	781b      	ldrb	r3, [r3, #0]
 800c92e:	2b03      	cmp	r3, #3
 800c930:	f000 8096 	beq.w	800ca60 <put_fat+0x15a>
 800c934:	2b03      	cmp	r3, #3
 800c936:	f300 80cb 	bgt.w	800cad0 <put_fat+0x1ca>
 800c93a:	2b01      	cmp	r3, #1
 800c93c:	d002      	beq.n	800c944 <put_fat+0x3e>
 800c93e:	2b02      	cmp	r3, #2
 800c940:	d06e      	beq.n	800ca20 <put_fat+0x11a>
 800c942:	e0c5      	b.n	800cad0 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800c944:	68bb      	ldr	r3, [r7, #8]
 800c946:	61bb      	str	r3, [r7, #24]
 800c948:	69bb      	ldr	r3, [r7, #24]
 800c94a:	085b      	lsrs	r3, r3, #1
 800c94c:	69ba      	ldr	r2, [r7, #24]
 800c94e:	4413      	add	r3, r2
 800c950:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c956:	69bb      	ldr	r3, [r7, #24]
 800c958:	0a5b      	lsrs	r3, r3, #9
 800c95a:	4413      	add	r3, r2
 800c95c:	4619      	mov	r1, r3
 800c95e:	68f8      	ldr	r0, [r7, #12]
 800c960:	f7ff fe6e 	bl	800c640 <move_window>
 800c964:	4603      	mov	r3, r0
 800c966:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c968:	7ffb      	ldrb	r3, [r7, #31]
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	f040 80a9 	bne.w	800cac2 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c976:	69bb      	ldr	r3, [r7, #24]
 800c978:	1c59      	adds	r1, r3, #1
 800c97a:	61b9      	str	r1, [r7, #24]
 800c97c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c980:	4413      	add	r3, r2
 800c982:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800c984:	68bb      	ldr	r3, [r7, #8]
 800c986:	f003 0301 	and.w	r3, r3, #1
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d00d      	beq.n	800c9aa <put_fat+0xa4>
 800c98e:	697b      	ldr	r3, [r7, #20]
 800c990:	781b      	ldrb	r3, [r3, #0]
 800c992:	b25b      	sxtb	r3, r3
 800c994:	f003 030f 	and.w	r3, r3, #15
 800c998:	b25a      	sxtb	r2, r3
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	b2db      	uxtb	r3, r3
 800c99e:	011b      	lsls	r3, r3, #4
 800c9a0:	b25b      	sxtb	r3, r3
 800c9a2:	4313      	orrs	r3, r2
 800c9a4:	b25b      	sxtb	r3, r3
 800c9a6:	b2db      	uxtb	r3, r3
 800c9a8:	e001      	b.n	800c9ae <put_fat+0xa8>
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	b2db      	uxtb	r3, r3
 800c9ae:	697a      	ldr	r2, [r7, #20]
 800c9b0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	2201      	movs	r2, #1
 800c9b6:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c9bc:	69bb      	ldr	r3, [r7, #24]
 800c9be:	0a5b      	lsrs	r3, r3, #9
 800c9c0:	4413      	add	r3, r2
 800c9c2:	4619      	mov	r1, r3
 800c9c4:	68f8      	ldr	r0, [r7, #12]
 800c9c6:	f7ff fe3b 	bl	800c640 <move_window>
 800c9ca:	4603      	mov	r3, r0
 800c9cc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c9ce:	7ffb      	ldrb	r3, [r7, #31]
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d178      	bne.n	800cac6 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c9da:	69bb      	ldr	r3, [r7, #24]
 800c9dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c9e0:	4413      	add	r3, r2
 800c9e2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800c9e4:	68bb      	ldr	r3, [r7, #8]
 800c9e6:	f003 0301 	and.w	r3, r3, #1
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d003      	beq.n	800c9f6 <put_fat+0xf0>
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	091b      	lsrs	r3, r3, #4
 800c9f2:	b2db      	uxtb	r3, r3
 800c9f4:	e00e      	b.n	800ca14 <put_fat+0x10e>
 800c9f6:	697b      	ldr	r3, [r7, #20]
 800c9f8:	781b      	ldrb	r3, [r3, #0]
 800c9fa:	b25b      	sxtb	r3, r3
 800c9fc:	f023 030f 	bic.w	r3, r3, #15
 800ca00:	b25a      	sxtb	r2, r3
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	0a1b      	lsrs	r3, r3, #8
 800ca06:	b25b      	sxtb	r3, r3
 800ca08:	f003 030f 	and.w	r3, r3, #15
 800ca0c:	b25b      	sxtb	r3, r3
 800ca0e:	4313      	orrs	r3, r2
 800ca10:	b25b      	sxtb	r3, r3
 800ca12:	b2db      	uxtb	r3, r3
 800ca14:	697a      	ldr	r2, [r7, #20]
 800ca16:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	2201      	movs	r2, #1
 800ca1c:	70da      	strb	r2, [r3, #3]
			break;
 800ca1e:	e057      	b.n	800cad0 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ca24:	68bb      	ldr	r3, [r7, #8]
 800ca26:	0a1b      	lsrs	r3, r3, #8
 800ca28:	4413      	add	r3, r2
 800ca2a:	4619      	mov	r1, r3
 800ca2c:	68f8      	ldr	r0, [r7, #12]
 800ca2e:	f7ff fe07 	bl	800c640 <move_window>
 800ca32:	4603      	mov	r3, r0
 800ca34:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ca36:	7ffb      	ldrb	r3, [r7, #31]
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d146      	bne.n	800caca <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ca42:	68bb      	ldr	r3, [r7, #8]
 800ca44:	005b      	lsls	r3, r3, #1
 800ca46:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800ca4a:	4413      	add	r3, r2
 800ca4c:	687a      	ldr	r2, [r7, #4]
 800ca4e:	b292      	uxth	r2, r2
 800ca50:	4611      	mov	r1, r2
 800ca52:	4618      	mov	r0, r3
 800ca54:	f7ff fb7f 	bl	800c156 <st_word>
			fs->wflag = 1;
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	2201      	movs	r2, #1
 800ca5c:	70da      	strb	r2, [r3, #3]
			break;
 800ca5e:	e037      	b.n	800cad0 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ca64:	68bb      	ldr	r3, [r7, #8]
 800ca66:	09db      	lsrs	r3, r3, #7
 800ca68:	4413      	add	r3, r2
 800ca6a:	4619      	mov	r1, r3
 800ca6c:	68f8      	ldr	r0, [r7, #12]
 800ca6e:	f7ff fde7 	bl	800c640 <move_window>
 800ca72:	4603      	mov	r3, r0
 800ca74:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ca76:	7ffb      	ldrb	r3, [r7, #31]
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d128      	bne.n	800cace <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ca88:	68bb      	ldr	r3, [r7, #8]
 800ca8a:	009b      	lsls	r3, r3, #2
 800ca8c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800ca90:	4413      	add	r3, r2
 800ca92:	4618      	mov	r0, r3
 800ca94:	f7ff fb3c 	bl	800c110 <ld_dword>
 800ca98:	4603      	mov	r3, r0
 800ca9a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800ca9e:	4323      	orrs	r3, r4
 800caa0:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800caa8:	68bb      	ldr	r3, [r7, #8]
 800caaa:	009b      	lsls	r3, r3, #2
 800caac:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800cab0:	4413      	add	r3, r2
 800cab2:	6879      	ldr	r1, [r7, #4]
 800cab4:	4618      	mov	r0, r3
 800cab6:	f7ff fb69 	bl	800c18c <st_dword>
			fs->wflag = 1;
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	2201      	movs	r2, #1
 800cabe:	70da      	strb	r2, [r3, #3]
			break;
 800cac0:	e006      	b.n	800cad0 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800cac2:	bf00      	nop
 800cac4:	e004      	b.n	800cad0 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800cac6:	bf00      	nop
 800cac8:	e002      	b.n	800cad0 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800caca:	bf00      	nop
 800cacc:	e000      	b.n	800cad0 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800cace:	bf00      	nop
		}
	}
	return res;
 800cad0:	7ffb      	ldrb	r3, [r7, #31]
}
 800cad2:	4618      	mov	r0, r3
 800cad4:	3724      	adds	r7, #36	; 0x24
 800cad6:	46bd      	mov	sp, r7
 800cad8:	bd90      	pop	{r4, r7, pc}

0800cada <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800cada:	b580      	push	{r7, lr}
 800cadc:	b088      	sub	sp, #32
 800cade:	af00      	add	r7, sp, #0
 800cae0:	60f8      	str	r0, [r7, #12]
 800cae2:	60b9      	str	r1, [r7, #8]
 800cae4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800cae6:	2300      	movs	r3, #0
 800cae8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800caf0:	68bb      	ldr	r3, [r7, #8]
 800caf2:	2b01      	cmp	r3, #1
 800caf4:	d904      	bls.n	800cb00 <remove_chain+0x26>
 800caf6:	69bb      	ldr	r3, [r7, #24]
 800caf8:	699b      	ldr	r3, [r3, #24]
 800cafa:	68ba      	ldr	r2, [r7, #8]
 800cafc:	429a      	cmp	r2, r3
 800cafe:	d301      	bcc.n	800cb04 <remove_chain+0x2a>
 800cb00:	2302      	movs	r3, #2
 800cb02:	e04b      	b.n	800cb9c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d00c      	beq.n	800cb24 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800cb0a:	f04f 32ff 	mov.w	r2, #4294967295
 800cb0e:	6879      	ldr	r1, [r7, #4]
 800cb10:	69b8      	ldr	r0, [r7, #24]
 800cb12:	f7ff fef8 	bl	800c906 <put_fat>
 800cb16:	4603      	mov	r3, r0
 800cb18:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800cb1a:	7ffb      	ldrb	r3, [r7, #31]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d001      	beq.n	800cb24 <remove_chain+0x4a>
 800cb20:	7ffb      	ldrb	r3, [r7, #31]
 800cb22:	e03b      	b.n	800cb9c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800cb24:	68b9      	ldr	r1, [r7, #8]
 800cb26:	68f8      	ldr	r0, [r7, #12]
 800cb28:	f7ff fe45 	bl	800c7b6 <get_fat>
 800cb2c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800cb2e:	697b      	ldr	r3, [r7, #20]
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d031      	beq.n	800cb98 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800cb34:	697b      	ldr	r3, [r7, #20]
 800cb36:	2b01      	cmp	r3, #1
 800cb38:	d101      	bne.n	800cb3e <remove_chain+0x64>
 800cb3a:	2302      	movs	r3, #2
 800cb3c:	e02e      	b.n	800cb9c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800cb3e:	697b      	ldr	r3, [r7, #20]
 800cb40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb44:	d101      	bne.n	800cb4a <remove_chain+0x70>
 800cb46:	2301      	movs	r3, #1
 800cb48:	e028      	b.n	800cb9c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800cb4a:	2200      	movs	r2, #0
 800cb4c:	68b9      	ldr	r1, [r7, #8]
 800cb4e:	69b8      	ldr	r0, [r7, #24]
 800cb50:	f7ff fed9 	bl	800c906 <put_fat>
 800cb54:	4603      	mov	r3, r0
 800cb56:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800cb58:	7ffb      	ldrb	r3, [r7, #31]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d001      	beq.n	800cb62 <remove_chain+0x88>
 800cb5e:	7ffb      	ldrb	r3, [r7, #31]
 800cb60:	e01c      	b.n	800cb9c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800cb62:	69bb      	ldr	r3, [r7, #24]
 800cb64:	695a      	ldr	r2, [r3, #20]
 800cb66:	69bb      	ldr	r3, [r7, #24]
 800cb68:	699b      	ldr	r3, [r3, #24]
 800cb6a:	3b02      	subs	r3, #2
 800cb6c:	429a      	cmp	r2, r3
 800cb6e:	d20b      	bcs.n	800cb88 <remove_chain+0xae>
			fs->free_clst++;
 800cb70:	69bb      	ldr	r3, [r7, #24]
 800cb72:	695b      	ldr	r3, [r3, #20]
 800cb74:	1c5a      	adds	r2, r3, #1
 800cb76:	69bb      	ldr	r3, [r7, #24]
 800cb78:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800cb7a:	69bb      	ldr	r3, [r7, #24]
 800cb7c:	791b      	ldrb	r3, [r3, #4]
 800cb7e:	f043 0301 	orr.w	r3, r3, #1
 800cb82:	b2da      	uxtb	r2, r3
 800cb84:	69bb      	ldr	r3, [r7, #24]
 800cb86:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800cb88:	697b      	ldr	r3, [r7, #20]
 800cb8a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800cb8c:	69bb      	ldr	r3, [r7, #24]
 800cb8e:	699b      	ldr	r3, [r3, #24]
 800cb90:	68ba      	ldr	r2, [r7, #8]
 800cb92:	429a      	cmp	r2, r3
 800cb94:	d3c6      	bcc.n	800cb24 <remove_chain+0x4a>
 800cb96:	e000      	b.n	800cb9a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800cb98:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800cb9a:	2300      	movs	r3, #0
}
 800cb9c:	4618      	mov	r0, r3
 800cb9e:	3720      	adds	r7, #32
 800cba0:	46bd      	mov	sp, r7
 800cba2:	bd80      	pop	{r7, pc}

0800cba4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800cba4:	b580      	push	{r7, lr}
 800cba6:	b088      	sub	sp, #32
 800cba8:	af00      	add	r7, sp, #0
 800cbaa:	6078      	str	r0, [r7, #4]
 800cbac:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800cbb4:	683b      	ldr	r3, [r7, #0]
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d10d      	bne.n	800cbd6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800cbba:	693b      	ldr	r3, [r7, #16]
 800cbbc:	691b      	ldr	r3, [r3, #16]
 800cbbe:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800cbc0:	69bb      	ldr	r3, [r7, #24]
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d004      	beq.n	800cbd0 <create_chain+0x2c>
 800cbc6:	693b      	ldr	r3, [r7, #16]
 800cbc8:	699b      	ldr	r3, [r3, #24]
 800cbca:	69ba      	ldr	r2, [r7, #24]
 800cbcc:	429a      	cmp	r2, r3
 800cbce:	d31b      	bcc.n	800cc08 <create_chain+0x64>
 800cbd0:	2301      	movs	r3, #1
 800cbd2:	61bb      	str	r3, [r7, #24]
 800cbd4:	e018      	b.n	800cc08 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800cbd6:	6839      	ldr	r1, [r7, #0]
 800cbd8:	6878      	ldr	r0, [r7, #4]
 800cbda:	f7ff fdec 	bl	800c7b6 <get_fat>
 800cbde:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	2b01      	cmp	r3, #1
 800cbe4:	d801      	bhi.n	800cbea <create_chain+0x46>
 800cbe6:	2301      	movs	r3, #1
 800cbe8:	e070      	b.n	800cccc <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbf0:	d101      	bne.n	800cbf6 <create_chain+0x52>
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	e06a      	b.n	800cccc <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800cbf6:	693b      	ldr	r3, [r7, #16]
 800cbf8:	699b      	ldr	r3, [r3, #24]
 800cbfa:	68fa      	ldr	r2, [r7, #12]
 800cbfc:	429a      	cmp	r2, r3
 800cbfe:	d201      	bcs.n	800cc04 <create_chain+0x60>
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	e063      	b.n	800cccc <create_chain+0x128>
		scl = clst;
 800cc04:	683b      	ldr	r3, [r7, #0]
 800cc06:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800cc08:	69bb      	ldr	r3, [r7, #24]
 800cc0a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800cc0c:	69fb      	ldr	r3, [r7, #28]
 800cc0e:	3301      	adds	r3, #1
 800cc10:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800cc12:	693b      	ldr	r3, [r7, #16]
 800cc14:	699b      	ldr	r3, [r3, #24]
 800cc16:	69fa      	ldr	r2, [r7, #28]
 800cc18:	429a      	cmp	r2, r3
 800cc1a:	d307      	bcc.n	800cc2c <create_chain+0x88>
				ncl = 2;
 800cc1c:	2302      	movs	r3, #2
 800cc1e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800cc20:	69fa      	ldr	r2, [r7, #28]
 800cc22:	69bb      	ldr	r3, [r7, #24]
 800cc24:	429a      	cmp	r2, r3
 800cc26:	d901      	bls.n	800cc2c <create_chain+0x88>
 800cc28:	2300      	movs	r3, #0
 800cc2a:	e04f      	b.n	800cccc <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800cc2c:	69f9      	ldr	r1, [r7, #28]
 800cc2e:	6878      	ldr	r0, [r7, #4]
 800cc30:	f7ff fdc1 	bl	800c7b6 <get_fat>
 800cc34:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d00e      	beq.n	800cc5a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	2b01      	cmp	r3, #1
 800cc40:	d003      	beq.n	800cc4a <create_chain+0xa6>
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc48:	d101      	bne.n	800cc4e <create_chain+0xaa>
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	e03e      	b.n	800cccc <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800cc4e:	69fa      	ldr	r2, [r7, #28]
 800cc50:	69bb      	ldr	r3, [r7, #24]
 800cc52:	429a      	cmp	r2, r3
 800cc54:	d1da      	bne.n	800cc0c <create_chain+0x68>
 800cc56:	2300      	movs	r3, #0
 800cc58:	e038      	b.n	800cccc <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800cc5a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800cc5c:	f04f 32ff 	mov.w	r2, #4294967295
 800cc60:	69f9      	ldr	r1, [r7, #28]
 800cc62:	6938      	ldr	r0, [r7, #16]
 800cc64:	f7ff fe4f 	bl	800c906 <put_fat>
 800cc68:	4603      	mov	r3, r0
 800cc6a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800cc6c:	7dfb      	ldrb	r3, [r7, #23]
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d109      	bne.n	800cc86 <create_chain+0xe2>
 800cc72:	683b      	ldr	r3, [r7, #0]
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d006      	beq.n	800cc86 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800cc78:	69fa      	ldr	r2, [r7, #28]
 800cc7a:	6839      	ldr	r1, [r7, #0]
 800cc7c:	6938      	ldr	r0, [r7, #16]
 800cc7e:	f7ff fe42 	bl	800c906 <put_fat>
 800cc82:	4603      	mov	r3, r0
 800cc84:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800cc86:	7dfb      	ldrb	r3, [r7, #23]
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d116      	bne.n	800ccba <create_chain+0x116>
		fs->last_clst = ncl;
 800cc8c:	693b      	ldr	r3, [r7, #16]
 800cc8e:	69fa      	ldr	r2, [r7, #28]
 800cc90:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800cc92:	693b      	ldr	r3, [r7, #16]
 800cc94:	695a      	ldr	r2, [r3, #20]
 800cc96:	693b      	ldr	r3, [r7, #16]
 800cc98:	699b      	ldr	r3, [r3, #24]
 800cc9a:	3b02      	subs	r3, #2
 800cc9c:	429a      	cmp	r2, r3
 800cc9e:	d804      	bhi.n	800ccaa <create_chain+0x106>
 800cca0:	693b      	ldr	r3, [r7, #16]
 800cca2:	695b      	ldr	r3, [r3, #20]
 800cca4:	1e5a      	subs	r2, r3, #1
 800cca6:	693b      	ldr	r3, [r7, #16]
 800cca8:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800ccaa:	693b      	ldr	r3, [r7, #16]
 800ccac:	791b      	ldrb	r3, [r3, #4]
 800ccae:	f043 0301 	orr.w	r3, r3, #1
 800ccb2:	b2da      	uxtb	r2, r3
 800ccb4:	693b      	ldr	r3, [r7, #16]
 800ccb6:	711a      	strb	r2, [r3, #4]
 800ccb8:	e007      	b.n	800ccca <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800ccba:	7dfb      	ldrb	r3, [r7, #23]
 800ccbc:	2b01      	cmp	r3, #1
 800ccbe:	d102      	bne.n	800ccc6 <create_chain+0x122>
 800ccc0:	f04f 33ff 	mov.w	r3, #4294967295
 800ccc4:	e000      	b.n	800ccc8 <create_chain+0x124>
 800ccc6:	2301      	movs	r3, #1
 800ccc8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800ccca:	69fb      	ldr	r3, [r7, #28]
}
 800cccc:	4618      	mov	r0, r3
 800ccce:	3720      	adds	r7, #32
 800ccd0:	46bd      	mov	sp, r7
 800ccd2:	bd80      	pop	{r7, pc}

0800ccd4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800ccd4:	b480      	push	{r7}
 800ccd6:	b087      	sub	sp, #28
 800ccd8:	af00      	add	r7, sp, #0
 800ccda:	6078      	str	r0, [r7, #4]
 800ccdc:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cce8:	3304      	adds	r3, #4
 800ccea:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800ccec:	683b      	ldr	r3, [r7, #0]
 800ccee:	0a5b      	lsrs	r3, r3, #9
 800ccf0:	68fa      	ldr	r2, [r7, #12]
 800ccf2:	8952      	ldrh	r2, [r2, #10]
 800ccf4:	fbb3 f3f2 	udiv	r3, r3, r2
 800ccf8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ccfa:	693b      	ldr	r3, [r7, #16]
 800ccfc:	1d1a      	adds	r2, r3, #4
 800ccfe:	613a      	str	r2, [r7, #16]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800cd04:	68bb      	ldr	r3, [r7, #8]
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d101      	bne.n	800cd0e <clmt_clust+0x3a>
 800cd0a:	2300      	movs	r3, #0
 800cd0c:	e010      	b.n	800cd30 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800cd0e:	697a      	ldr	r2, [r7, #20]
 800cd10:	68bb      	ldr	r3, [r7, #8]
 800cd12:	429a      	cmp	r2, r3
 800cd14:	d307      	bcc.n	800cd26 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800cd16:	697a      	ldr	r2, [r7, #20]
 800cd18:	68bb      	ldr	r3, [r7, #8]
 800cd1a:	1ad3      	subs	r3, r2, r3
 800cd1c:	617b      	str	r3, [r7, #20]
 800cd1e:	693b      	ldr	r3, [r7, #16]
 800cd20:	3304      	adds	r3, #4
 800cd22:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800cd24:	e7e9      	b.n	800ccfa <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800cd26:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800cd28:	693b      	ldr	r3, [r7, #16]
 800cd2a:	681a      	ldr	r2, [r3, #0]
 800cd2c:	697b      	ldr	r3, [r7, #20]
 800cd2e:	4413      	add	r3, r2
}
 800cd30:	4618      	mov	r0, r3
 800cd32:	371c      	adds	r7, #28
 800cd34:	46bd      	mov	sp, r7
 800cd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd3a:	4770      	bx	lr

0800cd3c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800cd3c:	b580      	push	{r7, lr}
 800cd3e:	b086      	sub	sp, #24
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	6078      	str	r0, [r7, #4]
 800cd44:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800cd4c:	683b      	ldr	r3, [r7, #0]
 800cd4e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cd52:	d204      	bcs.n	800cd5e <dir_sdi+0x22>
 800cd54:	683b      	ldr	r3, [r7, #0]
 800cd56:	f003 031f 	and.w	r3, r3, #31
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d001      	beq.n	800cd62 <dir_sdi+0x26>
		return FR_INT_ERR;
 800cd5e:	2302      	movs	r3, #2
 800cd60:	e063      	b.n	800ce2a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	683a      	ldr	r2, [r7, #0]
 800cd66:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	689b      	ldr	r3, [r3, #8]
 800cd6c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800cd6e:	697b      	ldr	r3, [r7, #20]
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d106      	bne.n	800cd82 <dir_sdi+0x46>
 800cd74:	693b      	ldr	r3, [r7, #16]
 800cd76:	781b      	ldrb	r3, [r3, #0]
 800cd78:	2b02      	cmp	r3, #2
 800cd7a:	d902      	bls.n	800cd82 <dir_sdi+0x46>
		clst = fs->dirbase;
 800cd7c:	693b      	ldr	r3, [r7, #16]
 800cd7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd80:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800cd82:	697b      	ldr	r3, [r7, #20]
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d10c      	bne.n	800cda2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800cd88:	683b      	ldr	r3, [r7, #0]
 800cd8a:	095b      	lsrs	r3, r3, #5
 800cd8c:	693a      	ldr	r2, [r7, #16]
 800cd8e:	8912      	ldrh	r2, [r2, #8]
 800cd90:	4293      	cmp	r3, r2
 800cd92:	d301      	bcc.n	800cd98 <dir_sdi+0x5c>
 800cd94:	2302      	movs	r3, #2
 800cd96:	e048      	b.n	800ce2a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800cd98:	693b      	ldr	r3, [r7, #16]
 800cd9a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	61da      	str	r2, [r3, #28]
 800cda0:	e029      	b.n	800cdf6 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800cda2:	693b      	ldr	r3, [r7, #16]
 800cda4:	895b      	ldrh	r3, [r3, #10]
 800cda6:	025b      	lsls	r3, r3, #9
 800cda8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800cdaa:	e019      	b.n	800cde0 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	6979      	ldr	r1, [r7, #20]
 800cdb0:	4618      	mov	r0, r3
 800cdb2:	f7ff fd00 	bl	800c7b6 <get_fat>
 800cdb6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800cdb8:	697b      	ldr	r3, [r7, #20]
 800cdba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdbe:	d101      	bne.n	800cdc4 <dir_sdi+0x88>
 800cdc0:	2301      	movs	r3, #1
 800cdc2:	e032      	b.n	800ce2a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800cdc4:	697b      	ldr	r3, [r7, #20]
 800cdc6:	2b01      	cmp	r3, #1
 800cdc8:	d904      	bls.n	800cdd4 <dir_sdi+0x98>
 800cdca:	693b      	ldr	r3, [r7, #16]
 800cdcc:	699b      	ldr	r3, [r3, #24]
 800cdce:	697a      	ldr	r2, [r7, #20]
 800cdd0:	429a      	cmp	r2, r3
 800cdd2:	d301      	bcc.n	800cdd8 <dir_sdi+0x9c>
 800cdd4:	2302      	movs	r3, #2
 800cdd6:	e028      	b.n	800ce2a <dir_sdi+0xee>
			ofs -= csz;
 800cdd8:	683a      	ldr	r2, [r7, #0]
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	1ad3      	subs	r3, r2, r3
 800cdde:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800cde0:	683a      	ldr	r2, [r7, #0]
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	429a      	cmp	r2, r3
 800cde6:	d2e1      	bcs.n	800cdac <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800cde8:	6979      	ldr	r1, [r7, #20]
 800cdea:	6938      	ldr	r0, [r7, #16]
 800cdec:	f7ff fcc4 	bl	800c778 <clust2sect>
 800cdf0:	4602      	mov	r2, r0
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	697a      	ldr	r2, [r7, #20]
 800cdfa:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	69db      	ldr	r3, [r3, #28]
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d101      	bne.n	800ce08 <dir_sdi+0xcc>
 800ce04:	2302      	movs	r3, #2
 800ce06:	e010      	b.n	800ce2a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	69da      	ldr	r2, [r3, #28]
 800ce0c:	683b      	ldr	r3, [r7, #0]
 800ce0e:	0a5b      	lsrs	r3, r3, #9
 800ce10:	441a      	add	r2, r3
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800ce16:	693b      	ldr	r3, [r7, #16]
 800ce18:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ce1c:	683b      	ldr	r3, [r7, #0]
 800ce1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce22:	441a      	add	r2, r3
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ce28:	2300      	movs	r3, #0
}
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	3718      	adds	r7, #24
 800ce2e:	46bd      	mov	sp, r7
 800ce30:	bd80      	pop	{r7, pc}

0800ce32 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800ce32:	b580      	push	{r7, lr}
 800ce34:	b086      	sub	sp, #24
 800ce36:	af00      	add	r7, sp, #0
 800ce38:	6078      	str	r0, [r7, #4]
 800ce3a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	695b      	ldr	r3, [r3, #20]
 800ce46:	3320      	adds	r3, #32
 800ce48:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	69db      	ldr	r3, [r3, #28]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d003      	beq.n	800ce5a <dir_next+0x28>
 800ce52:	68bb      	ldr	r3, [r7, #8]
 800ce54:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ce58:	d301      	bcc.n	800ce5e <dir_next+0x2c>
 800ce5a:	2304      	movs	r3, #4
 800ce5c:	e0aa      	b.n	800cfb4 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800ce5e:	68bb      	ldr	r3, [r7, #8]
 800ce60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	f040 8098 	bne.w	800cf9a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	69db      	ldr	r3, [r3, #28]
 800ce6e:	1c5a      	adds	r2, r3, #1
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	699b      	ldr	r3, [r3, #24]
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d10b      	bne.n	800ce94 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800ce7c:	68bb      	ldr	r3, [r7, #8]
 800ce7e:	095b      	lsrs	r3, r3, #5
 800ce80:	68fa      	ldr	r2, [r7, #12]
 800ce82:	8912      	ldrh	r2, [r2, #8]
 800ce84:	4293      	cmp	r3, r2
 800ce86:	f0c0 8088 	bcc.w	800cf9a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	2200      	movs	r2, #0
 800ce8e:	61da      	str	r2, [r3, #28]
 800ce90:	2304      	movs	r3, #4
 800ce92:	e08f      	b.n	800cfb4 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800ce94:	68bb      	ldr	r3, [r7, #8]
 800ce96:	0a5b      	lsrs	r3, r3, #9
 800ce98:	68fa      	ldr	r2, [r7, #12]
 800ce9a:	8952      	ldrh	r2, [r2, #10]
 800ce9c:	3a01      	subs	r2, #1
 800ce9e:	4013      	ands	r3, r2
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d17a      	bne.n	800cf9a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800cea4:	687a      	ldr	r2, [r7, #4]
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	699b      	ldr	r3, [r3, #24]
 800ceaa:	4619      	mov	r1, r3
 800ceac:	4610      	mov	r0, r2
 800ceae:	f7ff fc82 	bl	800c7b6 <get_fat>
 800ceb2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800ceb4:	697b      	ldr	r3, [r7, #20]
 800ceb6:	2b01      	cmp	r3, #1
 800ceb8:	d801      	bhi.n	800cebe <dir_next+0x8c>
 800ceba:	2302      	movs	r3, #2
 800cebc:	e07a      	b.n	800cfb4 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800cebe:	697b      	ldr	r3, [r7, #20]
 800cec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cec4:	d101      	bne.n	800ceca <dir_next+0x98>
 800cec6:	2301      	movs	r3, #1
 800cec8:	e074      	b.n	800cfb4 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	699b      	ldr	r3, [r3, #24]
 800cece:	697a      	ldr	r2, [r7, #20]
 800ced0:	429a      	cmp	r2, r3
 800ced2:	d358      	bcc.n	800cf86 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800ced4:	683b      	ldr	r3, [r7, #0]
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d104      	bne.n	800cee4 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	2200      	movs	r2, #0
 800cede:	61da      	str	r2, [r3, #28]
 800cee0:	2304      	movs	r3, #4
 800cee2:	e067      	b.n	800cfb4 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800cee4:	687a      	ldr	r2, [r7, #4]
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	699b      	ldr	r3, [r3, #24]
 800ceea:	4619      	mov	r1, r3
 800ceec:	4610      	mov	r0, r2
 800ceee:	f7ff fe59 	bl	800cba4 <create_chain>
 800cef2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800cef4:	697b      	ldr	r3, [r7, #20]
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d101      	bne.n	800cefe <dir_next+0xcc>
 800cefa:	2307      	movs	r3, #7
 800cefc:	e05a      	b.n	800cfb4 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800cefe:	697b      	ldr	r3, [r7, #20]
 800cf00:	2b01      	cmp	r3, #1
 800cf02:	d101      	bne.n	800cf08 <dir_next+0xd6>
 800cf04:	2302      	movs	r3, #2
 800cf06:	e055      	b.n	800cfb4 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800cf08:	697b      	ldr	r3, [r7, #20]
 800cf0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf0e:	d101      	bne.n	800cf14 <dir_next+0xe2>
 800cf10:	2301      	movs	r3, #1
 800cf12:	e04f      	b.n	800cfb4 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800cf14:	68f8      	ldr	r0, [r7, #12]
 800cf16:	f7ff fb4f 	bl	800c5b8 <sync_window>
 800cf1a:	4603      	mov	r3, r0
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d001      	beq.n	800cf24 <dir_next+0xf2>
 800cf20:	2301      	movs	r3, #1
 800cf22:	e047      	b.n	800cfb4 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	3334      	adds	r3, #52	; 0x34
 800cf28:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cf2c:	2100      	movs	r1, #0
 800cf2e:	4618      	mov	r0, r3
 800cf30:	f7ff f979 	bl	800c226 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800cf34:	2300      	movs	r3, #0
 800cf36:	613b      	str	r3, [r7, #16]
 800cf38:	6979      	ldr	r1, [r7, #20]
 800cf3a:	68f8      	ldr	r0, [r7, #12]
 800cf3c:	f7ff fc1c 	bl	800c778 <clust2sect>
 800cf40:	4602      	mov	r2, r0
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	631a      	str	r2, [r3, #48]	; 0x30
 800cf46:	e012      	b.n	800cf6e <dir_next+0x13c>
						fs->wflag = 1;
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	2201      	movs	r2, #1
 800cf4c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800cf4e:	68f8      	ldr	r0, [r7, #12]
 800cf50:	f7ff fb32 	bl	800c5b8 <sync_window>
 800cf54:	4603      	mov	r3, r0
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d001      	beq.n	800cf5e <dir_next+0x12c>
 800cf5a:	2301      	movs	r3, #1
 800cf5c:	e02a      	b.n	800cfb4 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800cf5e:	693b      	ldr	r3, [r7, #16]
 800cf60:	3301      	adds	r3, #1
 800cf62:	613b      	str	r3, [r7, #16]
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf68:	1c5a      	adds	r2, r3, #1
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	631a      	str	r2, [r3, #48]	; 0x30
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	895b      	ldrh	r3, [r3, #10]
 800cf72:	461a      	mov	r2, r3
 800cf74:	693b      	ldr	r3, [r7, #16]
 800cf76:	4293      	cmp	r3, r2
 800cf78:	d3e6      	bcc.n	800cf48 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cf7e:	693b      	ldr	r3, [r7, #16]
 800cf80:	1ad2      	subs	r2, r2, r3
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	697a      	ldr	r2, [r7, #20]
 800cf8a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800cf8c:	6979      	ldr	r1, [r7, #20]
 800cf8e:	68f8      	ldr	r0, [r7, #12]
 800cf90:	f7ff fbf2 	bl	800c778 <clust2sect>
 800cf94:	4602      	mov	r2, r0
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	68ba      	ldr	r2, [r7, #8]
 800cf9e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800cfa6:	68bb      	ldr	r3, [r7, #8]
 800cfa8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cfac:	441a      	add	r2, r3
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800cfb2:	2300      	movs	r3, #0
}
 800cfb4:	4618      	mov	r0, r3
 800cfb6:	3718      	adds	r7, #24
 800cfb8:	46bd      	mov	sp, r7
 800cfba:	bd80      	pop	{r7, pc}

0800cfbc <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800cfbc:	b580      	push	{r7, lr}
 800cfbe:	b086      	sub	sp, #24
 800cfc0:	af00      	add	r7, sp, #0
 800cfc2:	6078      	str	r0, [r7, #4]
 800cfc4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800cfcc:	2100      	movs	r1, #0
 800cfce:	6878      	ldr	r0, [r7, #4]
 800cfd0:	f7ff feb4 	bl	800cd3c <dir_sdi>
 800cfd4:	4603      	mov	r3, r0
 800cfd6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800cfd8:	7dfb      	ldrb	r3, [r7, #23]
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d12b      	bne.n	800d036 <dir_alloc+0x7a>
		n = 0;
 800cfde:	2300      	movs	r3, #0
 800cfe0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	69db      	ldr	r3, [r3, #28]
 800cfe6:	4619      	mov	r1, r3
 800cfe8:	68f8      	ldr	r0, [r7, #12]
 800cfea:	f7ff fb29 	bl	800c640 <move_window>
 800cfee:	4603      	mov	r3, r0
 800cff0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800cff2:	7dfb      	ldrb	r3, [r7, #23]
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d11d      	bne.n	800d034 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	6a1b      	ldr	r3, [r3, #32]
 800cffc:	781b      	ldrb	r3, [r3, #0]
 800cffe:	2be5      	cmp	r3, #229	; 0xe5
 800d000:	d004      	beq.n	800d00c <dir_alloc+0x50>
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	6a1b      	ldr	r3, [r3, #32]
 800d006:	781b      	ldrb	r3, [r3, #0]
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d107      	bne.n	800d01c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800d00c:	693b      	ldr	r3, [r7, #16]
 800d00e:	3301      	adds	r3, #1
 800d010:	613b      	str	r3, [r7, #16]
 800d012:	693a      	ldr	r2, [r7, #16]
 800d014:	683b      	ldr	r3, [r7, #0]
 800d016:	429a      	cmp	r2, r3
 800d018:	d102      	bne.n	800d020 <dir_alloc+0x64>
 800d01a:	e00c      	b.n	800d036 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800d01c:	2300      	movs	r3, #0
 800d01e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800d020:	2101      	movs	r1, #1
 800d022:	6878      	ldr	r0, [r7, #4]
 800d024:	f7ff ff05 	bl	800ce32 <dir_next>
 800d028:	4603      	mov	r3, r0
 800d02a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800d02c:	7dfb      	ldrb	r3, [r7, #23]
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d0d7      	beq.n	800cfe2 <dir_alloc+0x26>
 800d032:	e000      	b.n	800d036 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800d034:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800d036:	7dfb      	ldrb	r3, [r7, #23]
 800d038:	2b04      	cmp	r3, #4
 800d03a:	d101      	bne.n	800d040 <dir_alloc+0x84>
 800d03c:	2307      	movs	r3, #7
 800d03e:	75fb      	strb	r3, [r7, #23]
	return res;
 800d040:	7dfb      	ldrb	r3, [r7, #23]
}
 800d042:	4618      	mov	r0, r3
 800d044:	3718      	adds	r7, #24
 800d046:	46bd      	mov	sp, r7
 800d048:	bd80      	pop	{r7, pc}

0800d04a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800d04a:	b580      	push	{r7, lr}
 800d04c:	b084      	sub	sp, #16
 800d04e:	af00      	add	r7, sp, #0
 800d050:	6078      	str	r0, [r7, #4]
 800d052:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800d054:	683b      	ldr	r3, [r7, #0]
 800d056:	331a      	adds	r3, #26
 800d058:	4618      	mov	r0, r3
 800d05a:	f7ff f841 	bl	800c0e0 <ld_word>
 800d05e:	4603      	mov	r3, r0
 800d060:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	781b      	ldrb	r3, [r3, #0]
 800d066:	2b03      	cmp	r3, #3
 800d068:	d109      	bne.n	800d07e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800d06a:	683b      	ldr	r3, [r7, #0]
 800d06c:	3314      	adds	r3, #20
 800d06e:	4618      	mov	r0, r3
 800d070:	f7ff f836 	bl	800c0e0 <ld_word>
 800d074:	4603      	mov	r3, r0
 800d076:	041b      	lsls	r3, r3, #16
 800d078:	68fa      	ldr	r2, [r7, #12]
 800d07a:	4313      	orrs	r3, r2
 800d07c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800d07e:	68fb      	ldr	r3, [r7, #12]
}
 800d080:	4618      	mov	r0, r3
 800d082:	3710      	adds	r7, #16
 800d084:	46bd      	mov	sp, r7
 800d086:	bd80      	pop	{r7, pc}

0800d088 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800d088:	b580      	push	{r7, lr}
 800d08a:	b084      	sub	sp, #16
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	60f8      	str	r0, [r7, #12]
 800d090:	60b9      	str	r1, [r7, #8]
 800d092:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800d094:	68bb      	ldr	r3, [r7, #8]
 800d096:	331a      	adds	r3, #26
 800d098:	687a      	ldr	r2, [r7, #4]
 800d09a:	b292      	uxth	r2, r2
 800d09c:	4611      	mov	r1, r2
 800d09e:	4618      	mov	r0, r3
 800d0a0:	f7ff f859 	bl	800c156 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	781b      	ldrb	r3, [r3, #0]
 800d0a8:	2b03      	cmp	r3, #3
 800d0aa:	d109      	bne.n	800d0c0 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800d0ac:	68bb      	ldr	r3, [r7, #8]
 800d0ae:	f103 0214 	add.w	r2, r3, #20
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	0c1b      	lsrs	r3, r3, #16
 800d0b6:	b29b      	uxth	r3, r3
 800d0b8:	4619      	mov	r1, r3
 800d0ba:	4610      	mov	r0, r2
 800d0bc:	f7ff f84b 	bl	800c156 <st_word>
	}
}
 800d0c0:	bf00      	nop
 800d0c2:	3710      	adds	r7, #16
 800d0c4:	46bd      	mov	sp, r7
 800d0c6:	bd80      	pop	{r7, pc}

0800d0c8 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800d0c8:	b590      	push	{r4, r7, lr}
 800d0ca:	b087      	sub	sp, #28
 800d0cc:	af00      	add	r7, sp, #0
 800d0ce:	6078      	str	r0, [r7, #4]
 800d0d0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800d0d2:	683b      	ldr	r3, [r7, #0]
 800d0d4:	331a      	adds	r3, #26
 800d0d6:	4618      	mov	r0, r3
 800d0d8:	f7ff f802 	bl	800c0e0 <ld_word>
 800d0dc:	4603      	mov	r3, r0
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d001      	beq.n	800d0e6 <cmp_lfn+0x1e>
 800d0e2:	2300      	movs	r3, #0
 800d0e4:	e059      	b.n	800d19a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800d0e6:	683b      	ldr	r3, [r7, #0]
 800d0e8:	781b      	ldrb	r3, [r3, #0]
 800d0ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d0ee:	1e5a      	subs	r2, r3, #1
 800d0f0:	4613      	mov	r3, r2
 800d0f2:	005b      	lsls	r3, r3, #1
 800d0f4:	4413      	add	r3, r2
 800d0f6:	009b      	lsls	r3, r3, #2
 800d0f8:	4413      	add	r3, r2
 800d0fa:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d0fc:	2301      	movs	r3, #1
 800d0fe:	81fb      	strh	r3, [r7, #14]
 800d100:	2300      	movs	r3, #0
 800d102:	613b      	str	r3, [r7, #16]
 800d104:	e033      	b.n	800d16e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800d106:	4a27      	ldr	r2, [pc, #156]	; (800d1a4 <cmp_lfn+0xdc>)
 800d108:	693b      	ldr	r3, [r7, #16]
 800d10a:	4413      	add	r3, r2
 800d10c:	781b      	ldrb	r3, [r3, #0]
 800d10e:	461a      	mov	r2, r3
 800d110:	683b      	ldr	r3, [r7, #0]
 800d112:	4413      	add	r3, r2
 800d114:	4618      	mov	r0, r3
 800d116:	f7fe ffe3 	bl	800c0e0 <ld_word>
 800d11a:	4603      	mov	r3, r0
 800d11c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800d11e:	89fb      	ldrh	r3, [r7, #14]
 800d120:	2b00      	cmp	r3, #0
 800d122:	d01a      	beq.n	800d15a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800d124:	697b      	ldr	r3, [r7, #20]
 800d126:	2bfe      	cmp	r3, #254	; 0xfe
 800d128:	d812      	bhi.n	800d150 <cmp_lfn+0x88>
 800d12a:	89bb      	ldrh	r3, [r7, #12]
 800d12c:	4618      	mov	r0, r3
 800d12e:	f002 f99f 	bl	800f470 <ff_wtoupper>
 800d132:	4603      	mov	r3, r0
 800d134:	461c      	mov	r4, r3
 800d136:	697b      	ldr	r3, [r7, #20]
 800d138:	1c5a      	adds	r2, r3, #1
 800d13a:	617a      	str	r2, [r7, #20]
 800d13c:	005b      	lsls	r3, r3, #1
 800d13e:	687a      	ldr	r2, [r7, #4]
 800d140:	4413      	add	r3, r2
 800d142:	881b      	ldrh	r3, [r3, #0]
 800d144:	4618      	mov	r0, r3
 800d146:	f002 f993 	bl	800f470 <ff_wtoupper>
 800d14a:	4603      	mov	r3, r0
 800d14c:	429c      	cmp	r4, r3
 800d14e:	d001      	beq.n	800d154 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800d150:	2300      	movs	r3, #0
 800d152:	e022      	b.n	800d19a <cmp_lfn+0xd2>
			}
			wc = uc;
 800d154:	89bb      	ldrh	r3, [r7, #12]
 800d156:	81fb      	strh	r3, [r7, #14]
 800d158:	e006      	b.n	800d168 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d15a:	89bb      	ldrh	r3, [r7, #12]
 800d15c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d160:	4293      	cmp	r3, r2
 800d162:	d001      	beq.n	800d168 <cmp_lfn+0xa0>
 800d164:	2300      	movs	r3, #0
 800d166:	e018      	b.n	800d19a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d168:	693b      	ldr	r3, [r7, #16]
 800d16a:	3301      	adds	r3, #1
 800d16c:	613b      	str	r3, [r7, #16]
 800d16e:	693b      	ldr	r3, [r7, #16]
 800d170:	2b0c      	cmp	r3, #12
 800d172:	d9c8      	bls.n	800d106 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800d174:	683b      	ldr	r3, [r7, #0]
 800d176:	781b      	ldrb	r3, [r3, #0]
 800d178:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d00b      	beq.n	800d198 <cmp_lfn+0xd0>
 800d180:	89fb      	ldrh	r3, [r7, #14]
 800d182:	2b00      	cmp	r3, #0
 800d184:	d008      	beq.n	800d198 <cmp_lfn+0xd0>
 800d186:	697b      	ldr	r3, [r7, #20]
 800d188:	005b      	lsls	r3, r3, #1
 800d18a:	687a      	ldr	r2, [r7, #4]
 800d18c:	4413      	add	r3, r2
 800d18e:	881b      	ldrh	r3, [r3, #0]
 800d190:	2b00      	cmp	r3, #0
 800d192:	d001      	beq.n	800d198 <cmp_lfn+0xd0>
 800d194:	2300      	movs	r3, #0
 800d196:	e000      	b.n	800d19a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800d198:	2301      	movs	r3, #1
}
 800d19a:	4618      	mov	r0, r3
 800d19c:	371c      	adds	r7, #28
 800d19e:	46bd      	mov	sp, r7
 800d1a0:	bd90      	pop	{r4, r7, pc}
 800d1a2:	bf00      	nop
 800d1a4:	0801007c 	.word	0x0801007c

0800d1a8 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800d1a8:	b580      	push	{r7, lr}
 800d1aa:	b086      	sub	sp, #24
 800d1ac:	af00      	add	r7, sp, #0
 800d1ae:	6078      	str	r0, [r7, #4]
 800d1b0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800d1b2:	683b      	ldr	r3, [r7, #0]
 800d1b4:	331a      	adds	r3, #26
 800d1b6:	4618      	mov	r0, r3
 800d1b8:	f7fe ff92 	bl	800c0e0 <ld_word>
 800d1bc:	4603      	mov	r3, r0
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d001      	beq.n	800d1c6 <pick_lfn+0x1e>
 800d1c2:	2300      	movs	r3, #0
 800d1c4:	e04d      	b.n	800d262 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800d1c6:	683b      	ldr	r3, [r7, #0]
 800d1c8:	781b      	ldrb	r3, [r3, #0]
 800d1ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d1ce:	1e5a      	subs	r2, r3, #1
 800d1d0:	4613      	mov	r3, r2
 800d1d2:	005b      	lsls	r3, r3, #1
 800d1d4:	4413      	add	r3, r2
 800d1d6:	009b      	lsls	r3, r3, #2
 800d1d8:	4413      	add	r3, r2
 800d1da:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d1dc:	2301      	movs	r3, #1
 800d1de:	81fb      	strh	r3, [r7, #14]
 800d1e0:	2300      	movs	r3, #0
 800d1e2:	613b      	str	r3, [r7, #16]
 800d1e4:	e028      	b.n	800d238 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800d1e6:	4a21      	ldr	r2, [pc, #132]	; (800d26c <pick_lfn+0xc4>)
 800d1e8:	693b      	ldr	r3, [r7, #16]
 800d1ea:	4413      	add	r3, r2
 800d1ec:	781b      	ldrb	r3, [r3, #0]
 800d1ee:	461a      	mov	r2, r3
 800d1f0:	683b      	ldr	r3, [r7, #0]
 800d1f2:	4413      	add	r3, r2
 800d1f4:	4618      	mov	r0, r3
 800d1f6:	f7fe ff73 	bl	800c0e0 <ld_word>
 800d1fa:	4603      	mov	r3, r0
 800d1fc:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800d1fe:	89fb      	ldrh	r3, [r7, #14]
 800d200:	2b00      	cmp	r3, #0
 800d202:	d00f      	beq.n	800d224 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800d204:	697b      	ldr	r3, [r7, #20]
 800d206:	2bfe      	cmp	r3, #254	; 0xfe
 800d208:	d901      	bls.n	800d20e <pick_lfn+0x66>
 800d20a:	2300      	movs	r3, #0
 800d20c:	e029      	b.n	800d262 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800d20e:	89bb      	ldrh	r3, [r7, #12]
 800d210:	81fb      	strh	r3, [r7, #14]
 800d212:	697b      	ldr	r3, [r7, #20]
 800d214:	1c5a      	adds	r2, r3, #1
 800d216:	617a      	str	r2, [r7, #20]
 800d218:	005b      	lsls	r3, r3, #1
 800d21a:	687a      	ldr	r2, [r7, #4]
 800d21c:	4413      	add	r3, r2
 800d21e:	89fa      	ldrh	r2, [r7, #14]
 800d220:	801a      	strh	r2, [r3, #0]
 800d222:	e006      	b.n	800d232 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d224:	89bb      	ldrh	r3, [r7, #12]
 800d226:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d22a:	4293      	cmp	r3, r2
 800d22c:	d001      	beq.n	800d232 <pick_lfn+0x8a>
 800d22e:	2300      	movs	r3, #0
 800d230:	e017      	b.n	800d262 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d232:	693b      	ldr	r3, [r7, #16]
 800d234:	3301      	adds	r3, #1
 800d236:	613b      	str	r3, [r7, #16]
 800d238:	693b      	ldr	r3, [r7, #16]
 800d23a:	2b0c      	cmp	r3, #12
 800d23c:	d9d3      	bls.n	800d1e6 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800d23e:	683b      	ldr	r3, [r7, #0]
 800d240:	781b      	ldrb	r3, [r3, #0]
 800d242:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d246:	2b00      	cmp	r3, #0
 800d248:	d00a      	beq.n	800d260 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800d24a:	697b      	ldr	r3, [r7, #20]
 800d24c:	2bfe      	cmp	r3, #254	; 0xfe
 800d24e:	d901      	bls.n	800d254 <pick_lfn+0xac>
 800d250:	2300      	movs	r3, #0
 800d252:	e006      	b.n	800d262 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800d254:	697b      	ldr	r3, [r7, #20]
 800d256:	005b      	lsls	r3, r3, #1
 800d258:	687a      	ldr	r2, [r7, #4]
 800d25a:	4413      	add	r3, r2
 800d25c:	2200      	movs	r2, #0
 800d25e:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800d260:	2301      	movs	r3, #1
}
 800d262:	4618      	mov	r0, r3
 800d264:	3718      	adds	r7, #24
 800d266:	46bd      	mov	sp, r7
 800d268:	bd80      	pop	{r7, pc}
 800d26a:	bf00      	nop
 800d26c:	0801007c 	.word	0x0801007c

0800d270 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800d270:	b580      	push	{r7, lr}
 800d272:	b088      	sub	sp, #32
 800d274:	af00      	add	r7, sp, #0
 800d276:	60f8      	str	r0, [r7, #12]
 800d278:	60b9      	str	r1, [r7, #8]
 800d27a:	4611      	mov	r1, r2
 800d27c:	461a      	mov	r2, r3
 800d27e:	460b      	mov	r3, r1
 800d280:	71fb      	strb	r3, [r7, #7]
 800d282:	4613      	mov	r3, r2
 800d284:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800d286:	68bb      	ldr	r3, [r7, #8]
 800d288:	330d      	adds	r3, #13
 800d28a:	79ba      	ldrb	r2, [r7, #6]
 800d28c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800d28e:	68bb      	ldr	r3, [r7, #8]
 800d290:	330b      	adds	r3, #11
 800d292:	220f      	movs	r2, #15
 800d294:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800d296:	68bb      	ldr	r3, [r7, #8]
 800d298:	330c      	adds	r3, #12
 800d29a:	2200      	movs	r2, #0
 800d29c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800d29e:	68bb      	ldr	r3, [r7, #8]
 800d2a0:	331a      	adds	r3, #26
 800d2a2:	2100      	movs	r1, #0
 800d2a4:	4618      	mov	r0, r3
 800d2a6:	f7fe ff56 	bl	800c156 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800d2aa:	79fb      	ldrb	r3, [r7, #7]
 800d2ac:	1e5a      	subs	r2, r3, #1
 800d2ae:	4613      	mov	r3, r2
 800d2b0:	005b      	lsls	r3, r3, #1
 800d2b2:	4413      	add	r3, r2
 800d2b4:	009b      	lsls	r3, r3, #2
 800d2b6:	4413      	add	r3, r2
 800d2b8:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800d2ba:	2300      	movs	r3, #0
 800d2bc:	82fb      	strh	r3, [r7, #22]
 800d2be:	2300      	movs	r3, #0
 800d2c0:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800d2c2:	8afb      	ldrh	r3, [r7, #22]
 800d2c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d2c8:	4293      	cmp	r3, r2
 800d2ca:	d007      	beq.n	800d2dc <put_lfn+0x6c>
 800d2cc:	69fb      	ldr	r3, [r7, #28]
 800d2ce:	1c5a      	adds	r2, r3, #1
 800d2d0:	61fa      	str	r2, [r7, #28]
 800d2d2:	005b      	lsls	r3, r3, #1
 800d2d4:	68fa      	ldr	r2, [r7, #12]
 800d2d6:	4413      	add	r3, r2
 800d2d8:	881b      	ldrh	r3, [r3, #0]
 800d2da:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800d2dc:	4a17      	ldr	r2, [pc, #92]	; (800d33c <put_lfn+0xcc>)
 800d2de:	69bb      	ldr	r3, [r7, #24]
 800d2e0:	4413      	add	r3, r2
 800d2e2:	781b      	ldrb	r3, [r3, #0]
 800d2e4:	461a      	mov	r2, r3
 800d2e6:	68bb      	ldr	r3, [r7, #8]
 800d2e8:	4413      	add	r3, r2
 800d2ea:	8afa      	ldrh	r2, [r7, #22]
 800d2ec:	4611      	mov	r1, r2
 800d2ee:	4618      	mov	r0, r3
 800d2f0:	f7fe ff31 	bl	800c156 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800d2f4:	8afb      	ldrh	r3, [r7, #22]
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d102      	bne.n	800d300 <put_lfn+0x90>
 800d2fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d2fe:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800d300:	69bb      	ldr	r3, [r7, #24]
 800d302:	3301      	adds	r3, #1
 800d304:	61bb      	str	r3, [r7, #24]
 800d306:	69bb      	ldr	r3, [r7, #24]
 800d308:	2b0c      	cmp	r3, #12
 800d30a:	d9da      	bls.n	800d2c2 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800d30c:	8afb      	ldrh	r3, [r7, #22]
 800d30e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d312:	4293      	cmp	r3, r2
 800d314:	d006      	beq.n	800d324 <put_lfn+0xb4>
 800d316:	69fb      	ldr	r3, [r7, #28]
 800d318:	005b      	lsls	r3, r3, #1
 800d31a:	68fa      	ldr	r2, [r7, #12]
 800d31c:	4413      	add	r3, r2
 800d31e:	881b      	ldrh	r3, [r3, #0]
 800d320:	2b00      	cmp	r3, #0
 800d322:	d103      	bne.n	800d32c <put_lfn+0xbc>
 800d324:	79fb      	ldrb	r3, [r7, #7]
 800d326:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d32a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800d32c:	68bb      	ldr	r3, [r7, #8]
 800d32e:	79fa      	ldrb	r2, [r7, #7]
 800d330:	701a      	strb	r2, [r3, #0]
}
 800d332:	bf00      	nop
 800d334:	3720      	adds	r7, #32
 800d336:	46bd      	mov	sp, r7
 800d338:	bd80      	pop	{r7, pc}
 800d33a:	bf00      	nop
 800d33c:	0801007c 	.word	0x0801007c

0800d340 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800d340:	b580      	push	{r7, lr}
 800d342:	b08c      	sub	sp, #48	; 0x30
 800d344:	af00      	add	r7, sp, #0
 800d346:	60f8      	str	r0, [r7, #12]
 800d348:	60b9      	str	r1, [r7, #8]
 800d34a:	607a      	str	r2, [r7, #4]
 800d34c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800d34e:	220b      	movs	r2, #11
 800d350:	68b9      	ldr	r1, [r7, #8]
 800d352:	68f8      	ldr	r0, [r7, #12]
 800d354:	f7fe ff46 	bl	800c1e4 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800d358:	683b      	ldr	r3, [r7, #0]
 800d35a:	2b05      	cmp	r3, #5
 800d35c:	d92b      	bls.n	800d3b6 <gen_numname+0x76>
		sr = seq;
 800d35e:	683b      	ldr	r3, [r7, #0]
 800d360:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800d362:	e022      	b.n	800d3aa <gen_numname+0x6a>
			wc = *lfn++;
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	1c9a      	adds	r2, r3, #2
 800d368:	607a      	str	r2, [r7, #4]
 800d36a:	881b      	ldrh	r3, [r3, #0]
 800d36c:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800d36e:	2300      	movs	r3, #0
 800d370:	62bb      	str	r3, [r7, #40]	; 0x28
 800d372:	e017      	b.n	800d3a4 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800d374:	69fb      	ldr	r3, [r7, #28]
 800d376:	005a      	lsls	r2, r3, #1
 800d378:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d37a:	f003 0301 	and.w	r3, r3, #1
 800d37e:	4413      	add	r3, r2
 800d380:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800d382:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d384:	085b      	lsrs	r3, r3, #1
 800d386:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800d388:	69fb      	ldr	r3, [r7, #28]
 800d38a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d005      	beq.n	800d39e <gen_numname+0x5e>
 800d392:	69fb      	ldr	r3, [r7, #28]
 800d394:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800d398:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800d39c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800d39e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3a0:	3301      	adds	r3, #1
 800d3a2:	62bb      	str	r3, [r7, #40]	; 0x28
 800d3a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3a6:	2b0f      	cmp	r3, #15
 800d3a8:	d9e4      	bls.n	800d374 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	881b      	ldrh	r3, [r3, #0]
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d1d8      	bne.n	800d364 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800d3b2:	69fb      	ldr	r3, [r7, #28]
 800d3b4:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800d3b6:	2307      	movs	r3, #7
 800d3b8:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800d3ba:	683b      	ldr	r3, [r7, #0]
 800d3bc:	b2db      	uxtb	r3, r3
 800d3be:	f003 030f 	and.w	r3, r3, #15
 800d3c2:	b2db      	uxtb	r3, r3
 800d3c4:	3330      	adds	r3, #48	; 0x30
 800d3c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800d3ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d3ce:	2b39      	cmp	r3, #57	; 0x39
 800d3d0:	d904      	bls.n	800d3dc <gen_numname+0x9c>
 800d3d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d3d6:	3307      	adds	r3, #7
 800d3d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800d3dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3de:	1e5a      	subs	r2, r3, #1
 800d3e0:	62ba      	str	r2, [r7, #40]	; 0x28
 800d3e2:	3330      	adds	r3, #48	; 0x30
 800d3e4:	443b      	add	r3, r7
 800d3e6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800d3ea:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800d3ee:	683b      	ldr	r3, [r7, #0]
 800d3f0:	091b      	lsrs	r3, r3, #4
 800d3f2:	603b      	str	r3, [r7, #0]
	} while (seq);
 800d3f4:	683b      	ldr	r3, [r7, #0]
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d1df      	bne.n	800d3ba <gen_numname+0x7a>
	ns[i] = '~';
 800d3fa:	f107 0214 	add.w	r2, r7, #20
 800d3fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d400:	4413      	add	r3, r2
 800d402:	227e      	movs	r2, #126	; 0x7e
 800d404:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800d406:	2300      	movs	r3, #0
 800d408:	627b      	str	r3, [r7, #36]	; 0x24
 800d40a:	e002      	b.n	800d412 <gen_numname+0xd2>
 800d40c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d40e:	3301      	adds	r3, #1
 800d410:	627b      	str	r3, [r7, #36]	; 0x24
 800d412:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d416:	429a      	cmp	r2, r3
 800d418:	d205      	bcs.n	800d426 <gen_numname+0xe6>
 800d41a:	68fa      	ldr	r2, [r7, #12]
 800d41c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d41e:	4413      	add	r3, r2
 800d420:	781b      	ldrb	r3, [r3, #0]
 800d422:	2b20      	cmp	r3, #32
 800d424:	d1f2      	bne.n	800d40c <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800d426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d428:	2b07      	cmp	r3, #7
 800d42a:	d807      	bhi.n	800d43c <gen_numname+0xfc>
 800d42c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d42e:	1c5a      	adds	r2, r3, #1
 800d430:	62ba      	str	r2, [r7, #40]	; 0x28
 800d432:	3330      	adds	r3, #48	; 0x30
 800d434:	443b      	add	r3, r7
 800d436:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800d43a:	e000      	b.n	800d43e <gen_numname+0xfe>
 800d43c:	2120      	movs	r1, #32
 800d43e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d440:	1c5a      	adds	r2, r3, #1
 800d442:	627a      	str	r2, [r7, #36]	; 0x24
 800d444:	68fa      	ldr	r2, [r7, #12]
 800d446:	4413      	add	r3, r2
 800d448:	460a      	mov	r2, r1
 800d44a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800d44c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d44e:	2b07      	cmp	r3, #7
 800d450:	d9e9      	bls.n	800d426 <gen_numname+0xe6>
}
 800d452:	bf00      	nop
 800d454:	bf00      	nop
 800d456:	3730      	adds	r7, #48	; 0x30
 800d458:	46bd      	mov	sp, r7
 800d45a:	bd80      	pop	{r7, pc}

0800d45c <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800d45c:	b480      	push	{r7}
 800d45e:	b085      	sub	sp, #20
 800d460:	af00      	add	r7, sp, #0
 800d462:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800d464:	2300      	movs	r3, #0
 800d466:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800d468:	230b      	movs	r3, #11
 800d46a:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800d46c:	7bfb      	ldrb	r3, [r7, #15]
 800d46e:	b2da      	uxtb	r2, r3
 800d470:	0852      	lsrs	r2, r2, #1
 800d472:	01db      	lsls	r3, r3, #7
 800d474:	4313      	orrs	r3, r2
 800d476:	b2da      	uxtb	r2, r3
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	1c59      	adds	r1, r3, #1
 800d47c:	6079      	str	r1, [r7, #4]
 800d47e:	781b      	ldrb	r3, [r3, #0]
 800d480:	4413      	add	r3, r2
 800d482:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800d484:	68bb      	ldr	r3, [r7, #8]
 800d486:	3b01      	subs	r3, #1
 800d488:	60bb      	str	r3, [r7, #8]
 800d48a:	68bb      	ldr	r3, [r7, #8]
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d1ed      	bne.n	800d46c <sum_sfn+0x10>
	return sum;
 800d490:	7bfb      	ldrb	r3, [r7, #15]
}
 800d492:	4618      	mov	r0, r3
 800d494:	3714      	adds	r7, #20
 800d496:	46bd      	mov	sp, r7
 800d498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d49c:	4770      	bx	lr

0800d49e <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800d49e:	b580      	push	{r7, lr}
 800d4a0:	b086      	sub	sp, #24
 800d4a2:	af00      	add	r7, sp, #0
 800d4a4:	6078      	str	r0, [r7, #4]
 800d4a6:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800d4a8:	2304      	movs	r3, #4
 800d4aa:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800d4b2:	23ff      	movs	r3, #255	; 0xff
 800d4b4:	757b      	strb	r3, [r7, #21]
 800d4b6:	23ff      	movs	r3, #255	; 0xff
 800d4b8:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800d4ba:	e081      	b.n	800d5c0 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	69db      	ldr	r3, [r3, #28]
 800d4c0:	4619      	mov	r1, r3
 800d4c2:	6938      	ldr	r0, [r7, #16]
 800d4c4:	f7ff f8bc 	bl	800c640 <move_window>
 800d4c8:	4603      	mov	r3, r0
 800d4ca:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d4cc:	7dfb      	ldrb	r3, [r7, #23]
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d17c      	bne.n	800d5cc <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	6a1b      	ldr	r3, [r3, #32]
 800d4d6:	781b      	ldrb	r3, [r3, #0]
 800d4d8:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800d4da:	7dbb      	ldrb	r3, [r7, #22]
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d102      	bne.n	800d4e6 <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800d4e0:	2304      	movs	r3, #4
 800d4e2:	75fb      	strb	r3, [r7, #23]
 800d4e4:	e077      	b.n	800d5d6 <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	6a1b      	ldr	r3, [r3, #32]
 800d4ea:	330b      	adds	r3, #11
 800d4ec:	781b      	ldrb	r3, [r3, #0]
 800d4ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d4f2:	73fb      	strb	r3, [r7, #15]
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	7bfa      	ldrb	r2, [r7, #15]
 800d4f8:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800d4fa:	7dbb      	ldrb	r3, [r7, #22]
 800d4fc:	2be5      	cmp	r3, #229	; 0xe5
 800d4fe:	d00e      	beq.n	800d51e <dir_read+0x80>
 800d500:	7dbb      	ldrb	r3, [r7, #22]
 800d502:	2b2e      	cmp	r3, #46	; 0x2e
 800d504:	d00b      	beq.n	800d51e <dir_read+0x80>
 800d506:	7bfb      	ldrb	r3, [r7, #15]
 800d508:	f023 0320 	bic.w	r3, r3, #32
 800d50c:	2b08      	cmp	r3, #8
 800d50e:	bf0c      	ite	eq
 800d510:	2301      	moveq	r3, #1
 800d512:	2300      	movne	r3, #0
 800d514:	b2db      	uxtb	r3, r3
 800d516:	461a      	mov	r2, r3
 800d518:	683b      	ldr	r3, [r7, #0]
 800d51a:	4293      	cmp	r3, r2
 800d51c:	d002      	beq.n	800d524 <dir_read+0x86>
				ord = 0xFF;
 800d51e:	23ff      	movs	r3, #255	; 0xff
 800d520:	757b      	strb	r3, [r7, #21]
 800d522:	e044      	b.n	800d5ae <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800d524:	7bfb      	ldrb	r3, [r7, #15]
 800d526:	2b0f      	cmp	r3, #15
 800d528:	d12f      	bne.n	800d58a <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800d52a:	7dbb      	ldrb	r3, [r7, #22]
 800d52c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d530:	2b00      	cmp	r3, #0
 800d532:	d00d      	beq.n	800d550 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	6a1b      	ldr	r3, [r3, #32]
 800d538:	7b5b      	ldrb	r3, [r3, #13]
 800d53a:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800d53c:	7dbb      	ldrb	r3, [r7, #22]
 800d53e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d542:	75bb      	strb	r3, [r7, #22]
 800d544:	7dbb      	ldrb	r3, [r7, #22]
 800d546:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	695a      	ldr	r2, [r3, #20]
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800d550:	7dba      	ldrb	r2, [r7, #22]
 800d552:	7d7b      	ldrb	r3, [r7, #21]
 800d554:	429a      	cmp	r2, r3
 800d556:	d115      	bne.n	800d584 <dir_read+0xe6>
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	6a1b      	ldr	r3, [r3, #32]
 800d55c:	330d      	adds	r3, #13
 800d55e:	781b      	ldrb	r3, [r3, #0]
 800d560:	7d3a      	ldrb	r2, [r7, #20]
 800d562:	429a      	cmp	r2, r3
 800d564:	d10e      	bne.n	800d584 <dir_read+0xe6>
 800d566:	693b      	ldr	r3, [r7, #16]
 800d568:	68da      	ldr	r2, [r3, #12]
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	6a1b      	ldr	r3, [r3, #32]
 800d56e:	4619      	mov	r1, r3
 800d570:	4610      	mov	r0, r2
 800d572:	f7ff fe19 	bl	800d1a8 <pick_lfn>
 800d576:	4603      	mov	r3, r0
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d003      	beq.n	800d584 <dir_read+0xe6>
 800d57c:	7d7b      	ldrb	r3, [r7, #21]
 800d57e:	3b01      	subs	r3, #1
 800d580:	b2db      	uxtb	r3, r3
 800d582:	e000      	b.n	800d586 <dir_read+0xe8>
 800d584:	23ff      	movs	r3, #255	; 0xff
 800d586:	757b      	strb	r3, [r7, #21]
 800d588:	e011      	b.n	800d5ae <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800d58a:	7d7b      	ldrb	r3, [r7, #21]
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d109      	bne.n	800d5a4 <dir_read+0x106>
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	6a1b      	ldr	r3, [r3, #32]
 800d594:	4618      	mov	r0, r3
 800d596:	f7ff ff61 	bl	800d45c <sum_sfn>
 800d59a:	4603      	mov	r3, r0
 800d59c:	461a      	mov	r2, r3
 800d59e:	7d3b      	ldrb	r3, [r7, #20]
 800d5a0:	4293      	cmp	r3, r2
 800d5a2:	d015      	beq.n	800d5d0 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	f04f 32ff 	mov.w	r2, #4294967295
 800d5aa:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 800d5ac:	e010      	b.n	800d5d0 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800d5ae:	2100      	movs	r1, #0
 800d5b0:	6878      	ldr	r0, [r7, #4]
 800d5b2:	f7ff fc3e 	bl	800ce32 <dir_next>
 800d5b6:	4603      	mov	r3, r0
 800d5b8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d5ba:	7dfb      	ldrb	r3, [r7, #23]
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d109      	bne.n	800d5d4 <dir_read+0x136>
	while (dp->sect) {
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	69db      	ldr	r3, [r3, #28]
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	f47f af79 	bne.w	800d4bc <dir_read+0x1e>
 800d5ca:	e004      	b.n	800d5d6 <dir_read+0x138>
		if (res != FR_OK) break;
 800d5cc:	bf00      	nop
 800d5ce:	e002      	b.n	800d5d6 <dir_read+0x138>
					break;
 800d5d0:	bf00      	nop
 800d5d2:	e000      	b.n	800d5d6 <dir_read+0x138>
		if (res != FR_OK) break;
 800d5d4:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800d5d6:	7dfb      	ldrb	r3, [r7, #23]
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d002      	beq.n	800d5e2 <dir_read+0x144>
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	2200      	movs	r2, #0
 800d5e0:	61da      	str	r2, [r3, #28]
	return res;
 800d5e2:	7dfb      	ldrb	r3, [r7, #23]
}
 800d5e4:	4618      	mov	r0, r3
 800d5e6:	3718      	adds	r7, #24
 800d5e8:	46bd      	mov	sp, r7
 800d5ea:	bd80      	pop	{r7, pc}

0800d5ec <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800d5ec:	b580      	push	{r7, lr}
 800d5ee:	b086      	sub	sp, #24
 800d5f0:	af00      	add	r7, sp, #0
 800d5f2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800d5fa:	2100      	movs	r1, #0
 800d5fc:	6878      	ldr	r0, [r7, #4]
 800d5fe:	f7ff fb9d 	bl	800cd3c <dir_sdi>
 800d602:	4603      	mov	r3, r0
 800d604:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800d606:	7dfb      	ldrb	r3, [r7, #23]
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d001      	beq.n	800d610 <dir_find+0x24>
 800d60c:	7dfb      	ldrb	r3, [r7, #23]
 800d60e:	e0a9      	b.n	800d764 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d610:	23ff      	movs	r3, #255	; 0xff
 800d612:	753b      	strb	r3, [r7, #20]
 800d614:	7d3b      	ldrb	r3, [r7, #20]
 800d616:	757b      	strb	r3, [r7, #21]
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	f04f 32ff 	mov.w	r2, #4294967295
 800d61e:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	69db      	ldr	r3, [r3, #28]
 800d624:	4619      	mov	r1, r3
 800d626:	6938      	ldr	r0, [r7, #16]
 800d628:	f7ff f80a 	bl	800c640 <move_window>
 800d62c:	4603      	mov	r3, r0
 800d62e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d630:	7dfb      	ldrb	r3, [r7, #23]
 800d632:	2b00      	cmp	r3, #0
 800d634:	f040 8090 	bne.w	800d758 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	6a1b      	ldr	r3, [r3, #32]
 800d63c:	781b      	ldrb	r3, [r3, #0]
 800d63e:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800d640:	7dbb      	ldrb	r3, [r7, #22]
 800d642:	2b00      	cmp	r3, #0
 800d644:	d102      	bne.n	800d64c <dir_find+0x60>
 800d646:	2304      	movs	r3, #4
 800d648:	75fb      	strb	r3, [r7, #23]
 800d64a:	e08a      	b.n	800d762 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	6a1b      	ldr	r3, [r3, #32]
 800d650:	330b      	adds	r3, #11
 800d652:	781b      	ldrb	r3, [r3, #0]
 800d654:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d658:	73fb      	strb	r3, [r7, #15]
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	7bfa      	ldrb	r2, [r7, #15]
 800d65e:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800d660:	7dbb      	ldrb	r3, [r7, #22]
 800d662:	2be5      	cmp	r3, #229	; 0xe5
 800d664:	d007      	beq.n	800d676 <dir_find+0x8a>
 800d666:	7bfb      	ldrb	r3, [r7, #15]
 800d668:	f003 0308 	and.w	r3, r3, #8
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d009      	beq.n	800d684 <dir_find+0x98>
 800d670:	7bfb      	ldrb	r3, [r7, #15]
 800d672:	2b0f      	cmp	r3, #15
 800d674:	d006      	beq.n	800d684 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d676:	23ff      	movs	r3, #255	; 0xff
 800d678:	757b      	strb	r3, [r7, #21]
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	f04f 32ff 	mov.w	r2, #4294967295
 800d680:	631a      	str	r2, [r3, #48]	; 0x30
 800d682:	e05e      	b.n	800d742 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800d684:	7bfb      	ldrb	r3, [r7, #15]
 800d686:	2b0f      	cmp	r3, #15
 800d688:	d136      	bne.n	800d6f8 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d694:	2b00      	cmp	r3, #0
 800d696:	d154      	bne.n	800d742 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800d698:	7dbb      	ldrb	r3, [r7, #22]
 800d69a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d00d      	beq.n	800d6be <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	6a1b      	ldr	r3, [r3, #32]
 800d6a6:	7b5b      	ldrb	r3, [r3, #13]
 800d6a8:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800d6aa:	7dbb      	ldrb	r3, [r7, #22]
 800d6ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d6b0:	75bb      	strb	r3, [r7, #22]
 800d6b2:	7dbb      	ldrb	r3, [r7, #22]
 800d6b4:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	695a      	ldr	r2, [r3, #20]
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800d6be:	7dba      	ldrb	r2, [r7, #22]
 800d6c0:	7d7b      	ldrb	r3, [r7, #21]
 800d6c2:	429a      	cmp	r2, r3
 800d6c4:	d115      	bne.n	800d6f2 <dir_find+0x106>
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	6a1b      	ldr	r3, [r3, #32]
 800d6ca:	330d      	adds	r3, #13
 800d6cc:	781b      	ldrb	r3, [r3, #0]
 800d6ce:	7d3a      	ldrb	r2, [r7, #20]
 800d6d0:	429a      	cmp	r2, r3
 800d6d2:	d10e      	bne.n	800d6f2 <dir_find+0x106>
 800d6d4:	693b      	ldr	r3, [r7, #16]
 800d6d6:	68da      	ldr	r2, [r3, #12]
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	6a1b      	ldr	r3, [r3, #32]
 800d6dc:	4619      	mov	r1, r3
 800d6de:	4610      	mov	r0, r2
 800d6e0:	f7ff fcf2 	bl	800d0c8 <cmp_lfn>
 800d6e4:	4603      	mov	r3, r0
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d003      	beq.n	800d6f2 <dir_find+0x106>
 800d6ea:	7d7b      	ldrb	r3, [r7, #21]
 800d6ec:	3b01      	subs	r3, #1
 800d6ee:	b2db      	uxtb	r3, r3
 800d6f0:	e000      	b.n	800d6f4 <dir_find+0x108>
 800d6f2:	23ff      	movs	r3, #255	; 0xff
 800d6f4:	757b      	strb	r3, [r7, #21]
 800d6f6:	e024      	b.n	800d742 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800d6f8:	7d7b      	ldrb	r3, [r7, #21]
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d109      	bne.n	800d712 <dir_find+0x126>
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	6a1b      	ldr	r3, [r3, #32]
 800d702:	4618      	mov	r0, r3
 800d704:	f7ff feaa 	bl	800d45c <sum_sfn>
 800d708:	4603      	mov	r3, r0
 800d70a:	461a      	mov	r2, r3
 800d70c:	7d3b      	ldrb	r3, [r7, #20]
 800d70e:	4293      	cmp	r3, r2
 800d710:	d024      	beq.n	800d75c <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d718:	f003 0301 	and.w	r3, r3, #1
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d10a      	bne.n	800d736 <dir_find+0x14a>
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	6a18      	ldr	r0, [r3, #32]
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	3324      	adds	r3, #36	; 0x24
 800d728:	220b      	movs	r2, #11
 800d72a:	4619      	mov	r1, r3
 800d72c:	f7fe fd96 	bl	800c25c <mem_cmp>
 800d730:	4603      	mov	r3, r0
 800d732:	2b00      	cmp	r3, #0
 800d734:	d014      	beq.n	800d760 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d736:	23ff      	movs	r3, #255	; 0xff
 800d738:	757b      	strb	r3, [r7, #21]
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	f04f 32ff 	mov.w	r2, #4294967295
 800d740:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800d742:	2100      	movs	r1, #0
 800d744:	6878      	ldr	r0, [r7, #4]
 800d746:	f7ff fb74 	bl	800ce32 <dir_next>
 800d74a:	4603      	mov	r3, r0
 800d74c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800d74e:	7dfb      	ldrb	r3, [r7, #23]
 800d750:	2b00      	cmp	r3, #0
 800d752:	f43f af65 	beq.w	800d620 <dir_find+0x34>
 800d756:	e004      	b.n	800d762 <dir_find+0x176>
		if (res != FR_OK) break;
 800d758:	bf00      	nop
 800d75a:	e002      	b.n	800d762 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800d75c:	bf00      	nop
 800d75e:	e000      	b.n	800d762 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800d760:	bf00      	nop

	return res;
 800d762:	7dfb      	ldrb	r3, [r7, #23]
}
 800d764:	4618      	mov	r0, r3
 800d766:	3718      	adds	r7, #24
 800d768:	46bd      	mov	sp, r7
 800d76a:	bd80      	pop	{r7, pc}

0800d76c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800d76c:	b580      	push	{r7, lr}
 800d76e:	b08c      	sub	sp, #48	; 0x30
 800d770:	af00      	add	r7, sp, #0
 800d772:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d780:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800d784:	2b00      	cmp	r3, #0
 800d786:	d001      	beq.n	800d78c <dir_register+0x20>
 800d788:	2306      	movs	r3, #6
 800d78a:	e0e0      	b.n	800d94e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800d78c:	2300      	movs	r3, #0
 800d78e:	627b      	str	r3, [r7, #36]	; 0x24
 800d790:	e002      	b.n	800d798 <dir_register+0x2c>
 800d792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d794:	3301      	adds	r3, #1
 800d796:	627b      	str	r3, [r7, #36]	; 0x24
 800d798:	69fb      	ldr	r3, [r7, #28]
 800d79a:	68da      	ldr	r2, [r3, #12]
 800d79c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d79e:	005b      	lsls	r3, r3, #1
 800d7a0:	4413      	add	r3, r2
 800d7a2:	881b      	ldrh	r3, [r3, #0]
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d1f4      	bne.n	800d792 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800d7ae:	f107 030c 	add.w	r3, r7, #12
 800d7b2:	220c      	movs	r2, #12
 800d7b4:	4618      	mov	r0, r3
 800d7b6:	f7fe fd15 	bl	800c1e4 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800d7ba:	7dfb      	ldrb	r3, [r7, #23]
 800d7bc:	f003 0301 	and.w	r3, r3, #1
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d032      	beq.n	800d82a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	2240      	movs	r2, #64	; 0x40
 800d7c8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800d7cc:	2301      	movs	r3, #1
 800d7ce:	62bb      	str	r3, [r7, #40]	; 0x28
 800d7d0:	e016      	b.n	800d800 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800d7d8:	69fb      	ldr	r3, [r7, #28]
 800d7da:	68da      	ldr	r2, [r3, #12]
 800d7dc:	f107 010c 	add.w	r1, r7, #12
 800d7e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7e2:	f7ff fdad 	bl	800d340 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800d7e6:	6878      	ldr	r0, [r7, #4]
 800d7e8:	f7ff ff00 	bl	800d5ec <dir_find>
 800d7ec:	4603      	mov	r3, r0
 800d7ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800d7f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d106      	bne.n	800d808 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800d7fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7fc:	3301      	adds	r3, #1
 800d7fe:	62bb      	str	r3, [r7, #40]	; 0x28
 800d800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d802:	2b63      	cmp	r3, #99	; 0x63
 800d804:	d9e5      	bls.n	800d7d2 <dir_register+0x66>
 800d806:	e000      	b.n	800d80a <dir_register+0x9e>
			if (res != FR_OK) break;
 800d808:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800d80a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d80c:	2b64      	cmp	r3, #100	; 0x64
 800d80e:	d101      	bne.n	800d814 <dir_register+0xa8>
 800d810:	2307      	movs	r3, #7
 800d812:	e09c      	b.n	800d94e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800d814:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d818:	2b04      	cmp	r3, #4
 800d81a:	d002      	beq.n	800d822 <dir_register+0xb6>
 800d81c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d820:	e095      	b.n	800d94e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800d822:	7dfa      	ldrb	r2, [r7, #23]
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800d82a:	7dfb      	ldrb	r3, [r7, #23]
 800d82c:	f003 0302 	and.w	r3, r3, #2
 800d830:	2b00      	cmp	r3, #0
 800d832:	d007      	beq.n	800d844 <dir_register+0xd8>
 800d834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d836:	330c      	adds	r3, #12
 800d838:	4a47      	ldr	r2, [pc, #284]	; (800d958 <dir_register+0x1ec>)
 800d83a:	fba2 2303 	umull	r2, r3, r2, r3
 800d83e:	089b      	lsrs	r3, r3, #2
 800d840:	3301      	adds	r3, #1
 800d842:	e000      	b.n	800d846 <dir_register+0xda>
 800d844:	2301      	movs	r3, #1
 800d846:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800d848:	6a39      	ldr	r1, [r7, #32]
 800d84a:	6878      	ldr	r0, [r7, #4]
 800d84c:	f7ff fbb6 	bl	800cfbc <dir_alloc>
 800d850:	4603      	mov	r3, r0
 800d852:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800d856:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d148      	bne.n	800d8f0 <dir_register+0x184>
 800d85e:	6a3b      	ldr	r3, [r7, #32]
 800d860:	3b01      	subs	r3, #1
 800d862:	623b      	str	r3, [r7, #32]
 800d864:	6a3b      	ldr	r3, [r7, #32]
 800d866:	2b00      	cmp	r3, #0
 800d868:	d042      	beq.n	800d8f0 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	695a      	ldr	r2, [r3, #20]
 800d86e:	6a3b      	ldr	r3, [r7, #32]
 800d870:	015b      	lsls	r3, r3, #5
 800d872:	1ad3      	subs	r3, r2, r3
 800d874:	4619      	mov	r1, r3
 800d876:	6878      	ldr	r0, [r7, #4]
 800d878:	f7ff fa60 	bl	800cd3c <dir_sdi>
 800d87c:	4603      	mov	r3, r0
 800d87e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800d882:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d886:	2b00      	cmp	r3, #0
 800d888:	d132      	bne.n	800d8f0 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	3324      	adds	r3, #36	; 0x24
 800d88e:	4618      	mov	r0, r3
 800d890:	f7ff fde4 	bl	800d45c <sum_sfn>
 800d894:	4603      	mov	r3, r0
 800d896:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	69db      	ldr	r3, [r3, #28]
 800d89c:	4619      	mov	r1, r3
 800d89e:	69f8      	ldr	r0, [r7, #28]
 800d8a0:	f7fe fece 	bl	800c640 <move_window>
 800d8a4:	4603      	mov	r3, r0
 800d8a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800d8aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d11d      	bne.n	800d8ee <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800d8b2:	69fb      	ldr	r3, [r7, #28]
 800d8b4:	68d8      	ldr	r0, [r3, #12]
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	6a19      	ldr	r1, [r3, #32]
 800d8ba:	6a3b      	ldr	r3, [r7, #32]
 800d8bc:	b2da      	uxtb	r2, r3
 800d8be:	7efb      	ldrb	r3, [r7, #27]
 800d8c0:	f7ff fcd6 	bl	800d270 <put_lfn>
				fs->wflag = 1;
 800d8c4:	69fb      	ldr	r3, [r7, #28]
 800d8c6:	2201      	movs	r2, #1
 800d8c8:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800d8ca:	2100      	movs	r1, #0
 800d8cc:	6878      	ldr	r0, [r7, #4]
 800d8ce:	f7ff fab0 	bl	800ce32 <dir_next>
 800d8d2:	4603      	mov	r3, r0
 800d8d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800d8d8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d107      	bne.n	800d8f0 <dir_register+0x184>
 800d8e0:	6a3b      	ldr	r3, [r7, #32]
 800d8e2:	3b01      	subs	r3, #1
 800d8e4:	623b      	str	r3, [r7, #32]
 800d8e6:	6a3b      	ldr	r3, [r7, #32]
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d1d5      	bne.n	800d898 <dir_register+0x12c>
 800d8ec:	e000      	b.n	800d8f0 <dir_register+0x184>
				if (res != FR_OK) break;
 800d8ee:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800d8f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d128      	bne.n	800d94a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	69db      	ldr	r3, [r3, #28]
 800d8fc:	4619      	mov	r1, r3
 800d8fe:	69f8      	ldr	r0, [r7, #28]
 800d900:	f7fe fe9e 	bl	800c640 <move_window>
 800d904:	4603      	mov	r3, r0
 800d906:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800d90a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d11b      	bne.n	800d94a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	6a1b      	ldr	r3, [r3, #32]
 800d916:	2220      	movs	r2, #32
 800d918:	2100      	movs	r1, #0
 800d91a:	4618      	mov	r0, r3
 800d91c:	f7fe fc83 	bl	800c226 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	6a18      	ldr	r0, [r3, #32]
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	3324      	adds	r3, #36	; 0x24
 800d928:	220b      	movs	r2, #11
 800d92a:	4619      	mov	r1, r3
 800d92c:	f7fe fc5a 	bl	800c1e4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	6a1b      	ldr	r3, [r3, #32]
 800d93a:	330c      	adds	r3, #12
 800d93c:	f002 0218 	and.w	r2, r2, #24
 800d940:	b2d2      	uxtb	r2, r2
 800d942:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800d944:	69fb      	ldr	r3, [r7, #28]
 800d946:	2201      	movs	r2, #1
 800d948:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800d94a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800d94e:	4618      	mov	r0, r3
 800d950:	3730      	adds	r7, #48	; 0x30
 800d952:	46bd      	mov	sp, r7
 800d954:	bd80      	pop	{r7, pc}
 800d956:	bf00      	nop
 800d958:	4ec4ec4f 	.word	0x4ec4ec4f

0800d95c <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800d95c:	b580      	push	{r7, lr}
 800d95e:	b088      	sub	sp, #32
 800d960:	af00      	add	r7, sp, #0
 800d962:	6078      	str	r0, [r7, #4]
 800d964:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800d96c:	683b      	ldr	r3, [r7, #0]
 800d96e:	2200      	movs	r2, #0
 800d970:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	69db      	ldr	r3, [r3, #28]
 800d976:	2b00      	cmp	r3, #0
 800d978:	f000 80c9 	beq.w	800db0e <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d980:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d984:	d032      	beq.n	800d9ec <get_fileinfo+0x90>
			i = j = 0;
 800d986:	2300      	movs	r3, #0
 800d988:	61bb      	str	r3, [r7, #24]
 800d98a:	69bb      	ldr	r3, [r7, #24]
 800d98c:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800d98e:	e01b      	b.n	800d9c8 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800d990:	89fb      	ldrh	r3, [r7, #14]
 800d992:	2100      	movs	r1, #0
 800d994:	4618      	mov	r0, r3
 800d996:	f001 fd2f 	bl	800f3f8 <ff_convert>
 800d99a:	4603      	mov	r3, r0
 800d99c:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800d99e:	89fb      	ldrh	r3, [r7, #14]
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d102      	bne.n	800d9aa <get_fileinfo+0x4e>
 800d9a4:	2300      	movs	r3, #0
 800d9a6:	61fb      	str	r3, [r7, #28]
 800d9a8:	e01a      	b.n	800d9e0 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800d9aa:	69fb      	ldr	r3, [r7, #28]
 800d9ac:	2bfe      	cmp	r3, #254	; 0xfe
 800d9ae:	d902      	bls.n	800d9b6 <get_fileinfo+0x5a>
 800d9b0:	2300      	movs	r3, #0
 800d9b2:	61fb      	str	r3, [r7, #28]
 800d9b4:	e014      	b.n	800d9e0 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800d9b6:	69fb      	ldr	r3, [r7, #28]
 800d9b8:	1c5a      	adds	r2, r3, #1
 800d9ba:	61fa      	str	r2, [r7, #28]
 800d9bc:	89fa      	ldrh	r2, [r7, #14]
 800d9be:	b2d1      	uxtb	r1, r2
 800d9c0:	683a      	ldr	r2, [r7, #0]
 800d9c2:	4413      	add	r3, r2
 800d9c4:	460a      	mov	r2, r1
 800d9c6:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800d9c8:	693b      	ldr	r3, [r7, #16]
 800d9ca:	68da      	ldr	r2, [r3, #12]
 800d9cc:	69bb      	ldr	r3, [r7, #24]
 800d9ce:	1c59      	adds	r1, r3, #1
 800d9d0:	61b9      	str	r1, [r7, #24]
 800d9d2:	005b      	lsls	r3, r3, #1
 800d9d4:	4413      	add	r3, r2
 800d9d6:	881b      	ldrh	r3, [r3, #0]
 800d9d8:	81fb      	strh	r3, [r7, #14]
 800d9da:	89fb      	ldrh	r3, [r7, #14]
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d1d7      	bne.n	800d990 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800d9e0:	683a      	ldr	r2, [r7, #0]
 800d9e2:	69fb      	ldr	r3, [r7, #28]
 800d9e4:	4413      	add	r3, r2
 800d9e6:	3316      	adds	r3, #22
 800d9e8:	2200      	movs	r2, #0
 800d9ea:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800d9ec:	2300      	movs	r3, #0
 800d9ee:	61bb      	str	r3, [r7, #24]
 800d9f0:	69bb      	ldr	r3, [r7, #24]
 800d9f2:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800d9f4:	683a      	ldr	r2, [r7, #0]
 800d9f6:	69fb      	ldr	r3, [r7, #28]
 800d9f8:	4413      	add	r3, r2
 800d9fa:	3316      	adds	r3, #22
 800d9fc:	781b      	ldrb	r3, [r3, #0]
 800d9fe:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800da00:	e04c      	b.n	800da9c <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	6a1a      	ldr	r2, [r3, #32]
 800da06:	69fb      	ldr	r3, [r7, #28]
 800da08:	1c59      	adds	r1, r3, #1
 800da0a:	61f9      	str	r1, [r7, #28]
 800da0c:	4413      	add	r3, r2
 800da0e:	781b      	ldrb	r3, [r3, #0]
 800da10:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800da12:	7dfb      	ldrb	r3, [r7, #23]
 800da14:	2b20      	cmp	r3, #32
 800da16:	d100      	bne.n	800da1a <get_fileinfo+0xbe>
 800da18:	e040      	b.n	800da9c <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800da1a:	7dfb      	ldrb	r3, [r7, #23]
 800da1c:	2b05      	cmp	r3, #5
 800da1e:	d101      	bne.n	800da24 <get_fileinfo+0xc8>
 800da20:	23e5      	movs	r3, #229	; 0xe5
 800da22:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800da24:	69fb      	ldr	r3, [r7, #28]
 800da26:	2b09      	cmp	r3, #9
 800da28:	d10f      	bne.n	800da4a <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 800da2a:	89bb      	ldrh	r3, [r7, #12]
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d105      	bne.n	800da3c <get_fileinfo+0xe0>
 800da30:	683a      	ldr	r2, [r7, #0]
 800da32:	69bb      	ldr	r3, [r7, #24]
 800da34:	4413      	add	r3, r2
 800da36:	3316      	adds	r3, #22
 800da38:	222e      	movs	r2, #46	; 0x2e
 800da3a:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800da3c:	69bb      	ldr	r3, [r7, #24]
 800da3e:	1c5a      	adds	r2, r3, #1
 800da40:	61ba      	str	r2, [r7, #24]
 800da42:	683a      	ldr	r2, [r7, #0]
 800da44:	4413      	add	r3, r2
 800da46:	222e      	movs	r2, #46	; 0x2e
 800da48:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800da4a:	683a      	ldr	r2, [r7, #0]
 800da4c:	69bb      	ldr	r3, [r7, #24]
 800da4e:	4413      	add	r3, r2
 800da50:	3309      	adds	r3, #9
 800da52:	7dfa      	ldrb	r2, [r7, #23]
 800da54:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800da56:	89bb      	ldrh	r3, [r7, #12]
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d11c      	bne.n	800da96 <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800da5c:	7dfb      	ldrb	r3, [r7, #23]
 800da5e:	2b40      	cmp	r3, #64	; 0x40
 800da60:	d913      	bls.n	800da8a <get_fileinfo+0x12e>
 800da62:	7dfb      	ldrb	r3, [r7, #23]
 800da64:	2b5a      	cmp	r3, #90	; 0x5a
 800da66:	d810      	bhi.n	800da8a <get_fileinfo+0x12e>
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	6a1b      	ldr	r3, [r3, #32]
 800da6c:	330c      	adds	r3, #12
 800da6e:	781b      	ldrb	r3, [r3, #0]
 800da70:	461a      	mov	r2, r3
 800da72:	69fb      	ldr	r3, [r7, #28]
 800da74:	2b08      	cmp	r3, #8
 800da76:	d901      	bls.n	800da7c <get_fileinfo+0x120>
 800da78:	2310      	movs	r3, #16
 800da7a:	e000      	b.n	800da7e <get_fileinfo+0x122>
 800da7c:	2308      	movs	r3, #8
 800da7e:	4013      	ands	r3, r2
 800da80:	2b00      	cmp	r3, #0
 800da82:	d002      	beq.n	800da8a <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 800da84:	7dfb      	ldrb	r3, [r7, #23]
 800da86:	3320      	adds	r3, #32
 800da88:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800da8a:	683a      	ldr	r2, [r7, #0]
 800da8c:	69bb      	ldr	r3, [r7, #24]
 800da8e:	4413      	add	r3, r2
 800da90:	3316      	adds	r3, #22
 800da92:	7dfa      	ldrb	r2, [r7, #23]
 800da94:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800da96:	69bb      	ldr	r3, [r7, #24]
 800da98:	3301      	adds	r3, #1
 800da9a:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 800da9c:	69fb      	ldr	r3, [r7, #28]
 800da9e:	2b0a      	cmp	r3, #10
 800daa0:	d9af      	bls.n	800da02 <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800daa2:	89bb      	ldrh	r3, [r7, #12]
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d10d      	bne.n	800dac4 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 800daa8:	683a      	ldr	r2, [r7, #0]
 800daaa:	69bb      	ldr	r3, [r7, #24]
 800daac:	4413      	add	r3, r2
 800daae:	3316      	adds	r3, #22
 800dab0:	2200      	movs	r2, #0
 800dab2:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	6a1b      	ldr	r3, [r3, #32]
 800dab8:	330c      	adds	r3, #12
 800daba:	781b      	ldrb	r3, [r3, #0]
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d101      	bne.n	800dac4 <get_fileinfo+0x168>
 800dac0:	2300      	movs	r3, #0
 800dac2:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800dac4:	683a      	ldr	r2, [r7, #0]
 800dac6:	69bb      	ldr	r3, [r7, #24]
 800dac8:	4413      	add	r3, r2
 800daca:	3309      	adds	r3, #9
 800dacc:	2200      	movs	r2, #0
 800dace:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	6a1b      	ldr	r3, [r3, #32]
 800dad4:	7ada      	ldrb	r2, [r3, #11]
 800dad6:	683b      	ldr	r3, [r7, #0]
 800dad8:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	6a1b      	ldr	r3, [r3, #32]
 800dade:	331c      	adds	r3, #28
 800dae0:	4618      	mov	r0, r3
 800dae2:	f7fe fb15 	bl	800c110 <ld_dword>
 800dae6:	4602      	mov	r2, r0
 800dae8:	683b      	ldr	r3, [r7, #0]
 800daea:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	6a1b      	ldr	r3, [r3, #32]
 800daf0:	3316      	adds	r3, #22
 800daf2:	4618      	mov	r0, r3
 800daf4:	f7fe fb0c 	bl	800c110 <ld_dword>
 800daf8:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800dafa:	68bb      	ldr	r3, [r7, #8]
 800dafc:	b29a      	uxth	r2, r3
 800dafe:	683b      	ldr	r3, [r7, #0]
 800db00:	80da      	strh	r2, [r3, #6]
 800db02:	68bb      	ldr	r3, [r7, #8]
 800db04:	0c1b      	lsrs	r3, r3, #16
 800db06:	b29a      	uxth	r2, r3
 800db08:	683b      	ldr	r3, [r7, #0]
 800db0a:	809a      	strh	r2, [r3, #4]
 800db0c:	e000      	b.n	800db10 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800db0e:	bf00      	nop
}
 800db10:	3720      	adds	r7, #32
 800db12:	46bd      	mov	sp, r7
 800db14:	bd80      	pop	{r7, pc}
	...

0800db18 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800db18:	b580      	push	{r7, lr}
 800db1a:	b08a      	sub	sp, #40	; 0x28
 800db1c:	af00      	add	r7, sp, #0
 800db1e:	6078      	str	r0, [r7, #4]
 800db20:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800db22:	683b      	ldr	r3, [r7, #0]
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	613b      	str	r3, [r7, #16]
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	68db      	ldr	r3, [r3, #12]
 800db2e:	60fb      	str	r3, [r7, #12]
 800db30:	2300      	movs	r3, #0
 800db32:	617b      	str	r3, [r7, #20]
 800db34:	697b      	ldr	r3, [r7, #20]
 800db36:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800db38:	69bb      	ldr	r3, [r7, #24]
 800db3a:	1c5a      	adds	r2, r3, #1
 800db3c:	61ba      	str	r2, [r7, #24]
 800db3e:	693a      	ldr	r2, [r7, #16]
 800db40:	4413      	add	r3, r2
 800db42:	781b      	ldrb	r3, [r3, #0]
 800db44:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800db46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800db48:	2b1f      	cmp	r3, #31
 800db4a:	d940      	bls.n	800dbce <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800db4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800db4e:	2b2f      	cmp	r3, #47	; 0x2f
 800db50:	d006      	beq.n	800db60 <create_name+0x48>
 800db52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800db54:	2b5c      	cmp	r3, #92	; 0x5c
 800db56:	d110      	bne.n	800db7a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800db58:	e002      	b.n	800db60 <create_name+0x48>
 800db5a:	69bb      	ldr	r3, [r7, #24]
 800db5c:	3301      	adds	r3, #1
 800db5e:	61bb      	str	r3, [r7, #24]
 800db60:	693a      	ldr	r2, [r7, #16]
 800db62:	69bb      	ldr	r3, [r7, #24]
 800db64:	4413      	add	r3, r2
 800db66:	781b      	ldrb	r3, [r3, #0]
 800db68:	2b2f      	cmp	r3, #47	; 0x2f
 800db6a:	d0f6      	beq.n	800db5a <create_name+0x42>
 800db6c:	693a      	ldr	r2, [r7, #16]
 800db6e:	69bb      	ldr	r3, [r7, #24]
 800db70:	4413      	add	r3, r2
 800db72:	781b      	ldrb	r3, [r3, #0]
 800db74:	2b5c      	cmp	r3, #92	; 0x5c
 800db76:	d0f0      	beq.n	800db5a <create_name+0x42>
			break;
 800db78:	e02a      	b.n	800dbd0 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800db7a:	697b      	ldr	r3, [r7, #20]
 800db7c:	2bfe      	cmp	r3, #254	; 0xfe
 800db7e:	d901      	bls.n	800db84 <create_name+0x6c>
 800db80:	2306      	movs	r3, #6
 800db82:	e17d      	b.n	800de80 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800db84:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800db86:	b2db      	uxtb	r3, r3
 800db88:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800db8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800db8c:	2101      	movs	r1, #1
 800db8e:	4618      	mov	r0, r3
 800db90:	f001 fc32 	bl	800f3f8 <ff_convert>
 800db94:	4603      	mov	r3, r0
 800db96:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800db98:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d101      	bne.n	800dba2 <create_name+0x8a>
 800db9e:	2306      	movs	r3, #6
 800dba0:	e16e      	b.n	800de80 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800dba2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dba4:	2b7f      	cmp	r3, #127	; 0x7f
 800dba6:	d809      	bhi.n	800dbbc <create_name+0xa4>
 800dba8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dbaa:	4619      	mov	r1, r3
 800dbac:	488d      	ldr	r0, [pc, #564]	; (800dde4 <create_name+0x2cc>)
 800dbae:	f7fe fb7c 	bl	800c2aa <chk_chr>
 800dbb2:	4603      	mov	r3, r0
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d001      	beq.n	800dbbc <create_name+0xa4>
 800dbb8:	2306      	movs	r3, #6
 800dbba:	e161      	b.n	800de80 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800dbbc:	697b      	ldr	r3, [r7, #20]
 800dbbe:	1c5a      	adds	r2, r3, #1
 800dbc0:	617a      	str	r2, [r7, #20]
 800dbc2:	005b      	lsls	r3, r3, #1
 800dbc4:	68fa      	ldr	r2, [r7, #12]
 800dbc6:	4413      	add	r3, r2
 800dbc8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800dbca:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800dbcc:	e7b4      	b.n	800db38 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800dbce:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800dbd0:	693a      	ldr	r2, [r7, #16]
 800dbd2:	69bb      	ldr	r3, [r7, #24]
 800dbd4:	441a      	add	r2, r3
 800dbd6:	683b      	ldr	r3, [r7, #0]
 800dbd8:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800dbda:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dbdc:	2b1f      	cmp	r3, #31
 800dbde:	d801      	bhi.n	800dbe4 <create_name+0xcc>
 800dbe0:	2304      	movs	r3, #4
 800dbe2:	e000      	b.n	800dbe6 <create_name+0xce>
 800dbe4:	2300      	movs	r3, #0
 800dbe6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800dbea:	e011      	b.n	800dc10 <create_name+0xf8>
		w = lfn[di - 1];
 800dbec:	697b      	ldr	r3, [r7, #20]
 800dbee:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800dbf2:	3b01      	subs	r3, #1
 800dbf4:	005b      	lsls	r3, r3, #1
 800dbf6:	68fa      	ldr	r2, [r7, #12]
 800dbf8:	4413      	add	r3, r2
 800dbfa:	881b      	ldrh	r3, [r3, #0]
 800dbfc:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800dbfe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dc00:	2b20      	cmp	r3, #32
 800dc02:	d002      	beq.n	800dc0a <create_name+0xf2>
 800dc04:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dc06:	2b2e      	cmp	r3, #46	; 0x2e
 800dc08:	d106      	bne.n	800dc18 <create_name+0x100>
		di--;
 800dc0a:	697b      	ldr	r3, [r7, #20]
 800dc0c:	3b01      	subs	r3, #1
 800dc0e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800dc10:	697b      	ldr	r3, [r7, #20]
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d1ea      	bne.n	800dbec <create_name+0xd4>
 800dc16:	e000      	b.n	800dc1a <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800dc18:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800dc1a:	697b      	ldr	r3, [r7, #20]
 800dc1c:	005b      	lsls	r3, r3, #1
 800dc1e:	68fa      	ldr	r2, [r7, #12]
 800dc20:	4413      	add	r3, r2
 800dc22:	2200      	movs	r2, #0
 800dc24:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800dc26:	697b      	ldr	r3, [r7, #20]
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d101      	bne.n	800dc30 <create_name+0x118>
 800dc2c:	2306      	movs	r3, #6
 800dc2e:	e127      	b.n	800de80 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	3324      	adds	r3, #36	; 0x24
 800dc34:	220b      	movs	r2, #11
 800dc36:	2120      	movs	r1, #32
 800dc38:	4618      	mov	r0, r3
 800dc3a:	f7fe faf4 	bl	800c226 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800dc3e:	2300      	movs	r3, #0
 800dc40:	61bb      	str	r3, [r7, #24]
 800dc42:	e002      	b.n	800dc4a <create_name+0x132>
 800dc44:	69bb      	ldr	r3, [r7, #24]
 800dc46:	3301      	adds	r3, #1
 800dc48:	61bb      	str	r3, [r7, #24]
 800dc4a:	69bb      	ldr	r3, [r7, #24]
 800dc4c:	005b      	lsls	r3, r3, #1
 800dc4e:	68fa      	ldr	r2, [r7, #12]
 800dc50:	4413      	add	r3, r2
 800dc52:	881b      	ldrh	r3, [r3, #0]
 800dc54:	2b20      	cmp	r3, #32
 800dc56:	d0f5      	beq.n	800dc44 <create_name+0x12c>
 800dc58:	69bb      	ldr	r3, [r7, #24]
 800dc5a:	005b      	lsls	r3, r3, #1
 800dc5c:	68fa      	ldr	r2, [r7, #12]
 800dc5e:	4413      	add	r3, r2
 800dc60:	881b      	ldrh	r3, [r3, #0]
 800dc62:	2b2e      	cmp	r3, #46	; 0x2e
 800dc64:	d0ee      	beq.n	800dc44 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800dc66:	69bb      	ldr	r3, [r7, #24]
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d009      	beq.n	800dc80 <create_name+0x168>
 800dc6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dc70:	f043 0303 	orr.w	r3, r3, #3
 800dc74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800dc78:	e002      	b.n	800dc80 <create_name+0x168>
 800dc7a:	697b      	ldr	r3, [r7, #20]
 800dc7c:	3b01      	subs	r3, #1
 800dc7e:	617b      	str	r3, [r7, #20]
 800dc80:	697b      	ldr	r3, [r7, #20]
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d009      	beq.n	800dc9a <create_name+0x182>
 800dc86:	697b      	ldr	r3, [r7, #20]
 800dc88:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800dc8c:	3b01      	subs	r3, #1
 800dc8e:	005b      	lsls	r3, r3, #1
 800dc90:	68fa      	ldr	r2, [r7, #12]
 800dc92:	4413      	add	r3, r2
 800dc94:	881b      	ldrh	r3, [r3, #0]
 800dc96:	2b2e      	cmp	r3, #46	; 0x2e
 800dc98:	d1ef      	bne.n	800dc7a <create_name+0x162>

	i = b = 0; ni = 8;
 800dc9a:	2300      	movs	r3, #0
 800dc9c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800dca0:	2300      	movs	r3, #0
 800dca2:	623b      	str	r3, [r7, #32]
 800dca4:	2308      	movs	r3, #8
 800dca6:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800dca8:	69bb      	ldr	r3, [r7, #24]
 800dcaa:	1c5a      	adds	r2, r3, #1
 800dcac:	61ba      	str	r2, [r7, #24]
 800dcae:	005b      	lsls	r3, r3, #1
 800dcb0:	68fa      	ldr	r2, [r7, #12]
 800dcb2:	4413      	add	r3, r2
 800dcb4:	881b      	ldrh	r3, [r3, #0]
 800dcb6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800dcb8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	f000 8090 	beq.w	800dde0 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800dcc0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dcc2:	2b20      	cmp	r3, #32
 800dcc4:	d006      	beq.n	800dcd4 <create_name+0x1bc>
 800dcc6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dcc8:	2b2e      	cmp	r3, #46	; 0x2e
 800dcca:	d10a      	bne.n	800dce2 <create_name+0x1ca>
 800dccc:	69ba      	ldr	r2, [r7, #24]
 800dcce:	697b      	ldr	r3, [r7, #20]
 800dcd0:	429a      	cmp	r2, r3
 800dcd2:	d006      	beq.n	800dce2 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800dcd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dcd8:	f043 0303 	orr.w	r3, r3, #3
 800dcdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dce0:	e07d      	b.n	800ddde <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800dce2:	6a3a      	ldr	r2, [r7, #32]
 800dce4:	69fb      	ldr	r3, [r7, #28]
 800dce6:	429a      	cmp	r2, r3
 800dce8:	d203      	bcs.n	800dcf2 <create_name+0x1da>
 800dcea:	69ba      	ldr	r2, [r7, #24]
 800dcec:	697b      	ldr	r3, [r7, #20]
 800dcee:	429a      	cmp	r2, r3
 800dcf0:	d123      	bne.n	800dd3a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800dcf2:	69fb      	ldr	r3, [r7, #28]
 800dcf4:	2b0b      	cmp	r3, #11
 800dcf6:	d106      	bne.n	800dd06 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800dcf8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dcfc:	f043 0303 	orr.w	r3, r3, #3
 800dd00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dd04:	e075      	b.n	800ddf2 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800dd06:	69ba      	ldr	r2, [r7, #24]
 800dd08:	697b      	ldr	r3, [r7, #20]
 800dd0a:	429a      	cmp	r2, r3
 800dd0c:	d005      	beq.n	800dd1a <create_name+0x202>
 800dd0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dd12:	f043 0303 	orr.w	r3, r3, #3
 800dd16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800dd1a:	69ba      	ldr	r2, [r7, #24]
 800dd1c:	697b      	ldr	r3, [r7, #20]
 800dd1e:	429a      	cmp	r2, r3
 800dd20:	d866      	bhi.n	800ddf0 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800dd22:	697b      	ldr	r3, [r7, #20]
 800dd24:	61bb      	str	r3, [r7, #24]
 800dd26:	2308      	movs	r3, #8
 800dd28:	623b      	str	r3, [r7, #32]
 800dd2a:	230b      	movs	r3, #11
 800dd2c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800dd2e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dd32:	009b      	lsls	r3, r3, #2
 800dd34:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800dd38:	e051      	b.n	800ddde <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800dd3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dd3c:	2b7f      	cmp	r3, #127	; 0x7f
 800dd3e:	d914      	bls.n	800dd6a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800dd40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dd42:	2100      	movs	r1, #0
 800dd44:	4618      	mov	r0, r3
 800dd46:	f001 fb57 	bl	800f3f8 <ff_convert>
 800dd4a:	4603      	mov	r3, r0
 800dd4c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800dd4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d004      	beq.n	800dd5e <create_name+0x246>
 800dd54:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dd56:	3b80      	subs	r3, #128	; 0x80
 800dd58:	4a23      	ldr	r2, [pc, #140]	; (800dde8 <create_name+0x2d0>)
 800dd5a:	5cd3      	ldrb	r3, [r2, r3]
 800dd5c:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800dd5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dd62:	f043 0302 	orr.w	r3, r3, #2
 800dd66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800dd6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d007      	beq.n	800dd80 <create_name+0x268>
 800dd70:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dd72:	4619      	mov	r1, r3
 800dd74:	481d      	ldr	r0, [pc, #116]	; (800ddec <create_name+0x2d4>)
 800dd76:	f7fe fa98 	bl	800c2aa <chk_chr>
 800dd7a:	4603      	mov	r3, r0
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d008      	beq.n	800dd92 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800dd80:	235f      	movs	r3, #95	; 0x5f
 800dd82:	84bb      	strh	r3, [r7, #36]	; 0x24
 800dd84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dd88:	f043 0303 	orr.w	r3, r3, #3
 800dd8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dd90:	e01b      	b.n	800ddca <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800dd92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dd94:	2b40      	cmp	r3, #64	; 0x40
 800dd96:	d909      	bls.n	800ddac <create_name+0x294>
 800dd98:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dd9a:	2b5a      	cmp	r3, #90	; 0x5a
 800dd9c:	d806      	bhi.n	800ddac <create_name+0x294>
					b |= 2;
 800dd9e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dda2:	f043 0302 	orr.w	r3, r3, #2
 800dda6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ddaa:	e00e      	b.n	800ddca <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800ddac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ddae:	2b60      	cmp	r3, #96	; 0x60
 800ddb0:	d90b      	bls.n	800ddca <create_name+0x2b2>
 800ddb2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ddb4:	2b7a      	cmp	r3, #122	; 0x7a
 800ddb6:	d808      	bhi.n	800ddca <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800ddb8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ddbc:	f043 0301 	orr.w	r3, r3, #1
 800ddc0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ddc4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ddc6:	3b20      	subs	r3, #32
 800ddc8:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800ddca:	6a3b      	ldr	r3, [r7, #32]
 800ddcc:	1c5a      	adds	r2, r3, #1
 800ddce:	623a      	str	r2, [r7, #32]
 800ddd0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ddd2:	b2d1      	uxtb	r1, r2
 800ddd4:	687a      	ldr	r2, [r7, #4]
 800ddd6:	4413      	add	r3, r2
 800ddd8:	460a      	mov	r2, r1
 800ddda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800ddde:	e763      	b.n	800dca8 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800dde0:	bf00      	nop
 800dde2:	e006      	b.n	800ddf2 <create_name+0x2da>
 800dde4:	0800ff20 	.word	0x0800ff20
 800dde8:	0800fffc 	.word	0x0800fffc
 800ddec:	0800ff2c 	.word	0x0800ff2c
			if (si > di) break;			/* No extension */
 800ddf0:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ddf8:	2be5      	cmp	r3, #229	; 0xe5
 800ddfa:	d103      	bne.n	800de04 <create_name+0x2ec>
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	2205      	movs	r2, #5
 800de00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800de04:	69fb      	ldr	r3, [r7, #28]
 800de06:	2b08      	cmp	r3, #8
 800de08:	d104      	bne.n	800de14 <create_name+0x2fc>
 800de0a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800de0e:	009b      	lsls	r3, r3, #2
 800de10:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800de14:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800de18:	f003 030c 	and.w	r3, r3, #12
 800de1c:	2b0c      	cmp	r3, #12
 800de1e:	d005      	beq.n	800de2c <create_name+0x314>
 800de20:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800de24:	f003 0303 	and.w	r3, r3, #3
 800de28:	2b03      	cmp	r3, #3
 800de2a:	d105      	bne.n	800de38 <create_name+0x320>
 800de2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800de30:	f043 0302 	orr.w	r3, r3, #2
 800de34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800de38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800de3c:	f003 0302 	and.w	r3, r3, #2
 800de40:	2b00      	cmp	r3, #0
 800de42:	d117      	bne.n	800de74 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800de44:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800de48:	f003 0303 	and.w	r3, r3, #3
 800de4c:	2b01      	cmp	r3, #1
 800de4e:	d105      	bne.n	800de5c <create_name+0x344>
 800de50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800de54:	f043 0310 	orr.w	r3, r3, #16
 800de58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800de5c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800de60:	f003 030c 	and.w	r3, r3, #12
 800de64:	2b04      	cmp	r3, #4
 800de66:	d105      	bne.n	800de74 <create_name+0x35c>
 800de68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800de6c:	f043 0308 	orr.w	r3, r3, #8
 800de70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800de7a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800de7e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800de80:	4618      	mov	r0, r3
 800de82:	3728      	adds	r7, #40	; 0x28
 800de84:	46bd      	mov	sp, r7
 800de86:	bd80      	pop	{r7, pc}

0800de88 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800de88:	b580      	push	{r7, lr}
 800de8a:	b086      	sub	sp, #24
 800de8c:	af00      	add	r7, sp, #0
 800de8e:	6078      	str	r0, [r7, #4]
 800de90:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800de96:	693b      	ldr	r3, [r7, #16]
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800de9c:	e002      	b.n	800dea4 <follow_path+0x1c>
 800de9e:	683b      	ldr	r3, [r7, #0]
 800dea0:	3301      	adds	r3, #1
 800dea2:	603b      	str	r3, [r7, #0]
 800dea4:	683b      	ldr	r3, [r7, #0]
 800dea6:	781b      	ldrb	r3, [r3, #0]
 800dea8:	2b2f      	cmp	r3, #47	; 0x2f
 800deaa:	d0f8      	beq.n	800de9e <follow_path+0x16>
 800deac:	683b      	ldr	r3, [r7, #0]
 800deae:	781b      	ldrb	r3, [r3, #0]
 800deb0:	2b5c      	cmp	r3, #92	; 0x5c
 800deb2:	d0f4      	beq.n	800de9e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800deb4:	693b      	ldr	r3, [r7, #16]
 800deb6:	2200      	movs	r2, #0
 800deb8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800deba:	683b      	ldr	r3, [r7, #0]
 800debc:	781b      	ldrb	r3, [r3, #0]
 800debe:	2b1f      	cmp	r3, #31
 800dec0:	d80a      	bhi.n	800ded8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	2280      	movs	r2, #128	; 0x80
 800dec6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800deca:	2100      	movs	r1, #0
 800decc:	6878      	ldr	r0, [r7, #4]
 800dece:	f7fe ff35 	bl	800cd3c <dir_sdi>
 800ded2:	4603      	mov	r3, r0
 800ded4:	75fb      	strb	r3, [r7, #23]
 800ded6:	e043      	b.n	800df60 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ded8:	463b      	mov	r3, r7
 800deda:	4619      	mov	r1, r3
 800dedc:	6878      	ldr	r0, [r7, #4]
 800dede:	f7ff fe1b 	bl	800db18 <create_name>
 800dee2:	4603      	mov	r3, r0
 800dee4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800dee6:	7dfb      	ldrb	r3, [r7, #23]
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d134      	bne.n	800df56 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800deec:	6878      	ldr	r0, [r7, #4]
 800deee:	f7ff fb7d 	bl	800d5ec <dir_find>
 800def2:	4603      	mov	r3, r0
 800def4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800defc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800defe:	7dfb      	ldrb	r3, [r7, #23]
 800df00:	2b00      	cmp	r3, #0
 800df02:	d00a      	beq.n	800df1a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800df04:	7dfb      	ldrb	r3, [r7, #23]
 800df06:	2b04      	cmp	r3, #4
 800df08:	d127      	bne.n	800df5a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800df0a:	7afb      	ldrb	r3, [r7, #11]
 800df0c:	f003 0304 	and.w	r3, r3, #4
 800df10:	2b00      	cmp	r3, #0
 800df12:	d122      	bne.n	800df5a <follow_path+0xd2>
 800df14:	2305      	movs	r3, #5
 800df16:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800df18:	e01f      	b.n	800df5a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800df1a:	7afb      	ldrb	r3, [r7, #11]
 800df1c:	f003 0304 	and.w	r3, r3, #4
 800df20:	2b00      	cmp	r3, #0
 800df22:	d11c      	bne.n	800df5e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800df24:	693b      	ldr	r3, [r7, #16]
 800df26:	799b      	ldrb	r3, [r3, #6]
 800df28:	f003 0310 	and.w	r3, r3, #16
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d102      	bne.n	800df36 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800df30:	2305      	movs	r3, #5
 800df32:	75fb      	strb	r3, [r7, #23]
 800df34:	e014      	b.n	800df60 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	695b      	ldr	r3, [r3, #20]
 800df40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800df44:	4413      	add	r3, r2
 800df46:	4619      	mov	r1, r3
 800df48:	68f8      	ldr	r0, [r7, #12]
 800df4a:	f7ff f87e 	bl	800d04a <ld_clust>
 800df4e:	4602      	mov	r2, r0
 800df50:	693b      	ldr	r3, [r7, #16]
 800df52:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800df54:	e7c0      	b.n	800ded8 <follow_path+0x50>
			if (res != FR_OK) break;
 800df56:	bf00      	nop
 800df58:	e002      	b.n	800df60 <follow_path+0xd8>
				break;
 800df5a:	bf00      	nop
 800df5c:	e000      	b.n	800df60 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800df5e:	bf00      	nop
			}
		}
	}

	return res;
 800df60:	7dfb      	ldrb	r3, [r7, #23]
}
 800df62:	4618      	mov	r0, r3
 800df64:	3718      	adds	r7, #24
 800df66:	46bd      	mov	sp, r7
 800df68:	bd80      	pop	{r7, pc}

0800df6a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800df6a:	b480      	push	{r7}
 800df6c:	b087      	sub	sp, #28
 800df6e:	af00      	add	r7, sp, #0
 800df70:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800df72:	f04f 33ff 	mov.w	r3, #4294967295
 800df76:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d031      	beq.n	800dfe4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	617b      	str	r3, [r7, #20]
 800df86:	e002      	b.n	800df8e <get_ldnumber+0x24>
 800df88:	697b      	ldr	r3, [r7, #20]
 800df8a:	3301      	adds	r3, #1
 800df8c:	617b      	str	r3, [r7, #20]
 800df8e:	697b      	ldr	r3, [r7, #20]
 800df90:	781b      	ldrb	r3, [r3, #0]
 800df92:	2b1f      	cmp	r3, #31
 800df94:	d903      	bls.n	800df9e <get_ldnumber+0x34>
 800df96:	697b      	ldr	r3, [r7, #20]
 800df98:	781b      	ldrb	r3, [r3, #0]
 800df9a:	2b3a      	cmp	r3, #58	; 0x3a
 800df9c:	d1f4      	bne.n	800df88 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800df9e:	697b      	ldr	r3, [r7, #20]
 800dfa0:	781b      	ldrb	r3, [r3, #0]
 800dfa2:	2b3a      	cmp	r3, #58	; 0x3a
 800dfa4:	d11c      	bne.n	800dfe0 <get_ldnumber+0x76>
			tp = *path;
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	1c5a      	adds	r2, r3, #1
 800dfb0:	60fa      	str	r2, [r7, #12]
 800dfb2:	781b      	ldrb	r3, [r3, #0]
 800dfb4:	3b30      	subs	r3, #48	; 0x30
 800dfb6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800dfb8:	68bb      	ldr	r3, [r7, #8]
 800dfba:	2b09      	cmp	r3, #9
 800dfbc:	d80e      	bhi.n	800dfdc <get_ldnumber+0x72>
 800dfbe:	68fa      	ldr	r2, [r7, #12]
 800dfc0:	697b      	ldr	r3, [r7, #20]
 800dfc2:	429a      	cmp	r2, r3
 800dfc4:	d10a      	bne.n	800dfdc <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800dfc6:	68bb      	ldr	r3, [r7, #8]
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d107      	bne.n	800dfdc <get_ldnumber+0x72>
					vol = (int)i;
 800dfcc:	68bb      	ldr	r3, [r7, #8]
 800dfce:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800dfd0:	697b      	ldr	r3, [r7, #20]
 800dfd2:	3301      	adds	r3, #1
 800dfd4:	617b      	str	r3, [r7, #20]
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	697a      	ldr	r2, [r7, #20]
 800dfda:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800dfdc:	693b      	ldr	r3, [r7, #16]
 800dfde:	e002      	b.n	800dfe6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800dfe0:	2300      	movs	r3, #0
 800dfe2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800dfe4:	693b      	ldr	r3, [r7, #16]
}
 800dfe6:	4618      	mov	r0, r3
 800dfe8:	371c      	adds	r7, #28
 800dfea:	46bd      	mov	sp, r7
 800dfec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff0:	4770      	bx	lr
	...

0800dff4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800dff4:	b580      	push	{r7, lr}
 800dff6:	b082      	sub	sp, #8
 800dff8:	af00      	add	r7, sp, #0
 800dffa:	6078      	str	r0, [r7, #4]
 800dffc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	2200      	movs	r2, #0
 800e002:	70da      	strb	r2, [r3, #3]
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	f04f 32ff 	mov.w	r2, #4294967295
 800e00a:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800e00c:	6839      	ldr	r1, [r7, #0]
 800e00e:	6878      	ldr	r0, [r7, #4]
 800e010:	f7fe fb16 	bl	800c640 <move_window>
 800e014:	4603      	mov	r3, r0
 800e016:	2b00      	cmp	r3, #0
 800e018:	d001      	beq.n	800e01e <check_fs+0x2a>
 800e01a:	2304      	movs	r3, #4
 800e01c:	e038      	b.n	800e090 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	3334      	adds	r3, #52	; 0x34
 800e022:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e026:	4618      	mov	r0, r3
 800e028:	f7fe f85a 	bl	800c0e0 <ld_word>
 800e02c:	4603      	mov	r3, r0
 800e02e:	461a      	mov	r2, r3
 800e030:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800e034:	429a      	cmp	r2, r3
 800e036:	d001      	beq.n	800e03c <check_fs+0x48>
 800e038:	2303      	movs	r3, #3
 800e03a:	e029      	b.n	800e090 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e042:	2be9      	cmp	r3, #233	; 0xe9
 800e044:	d009      	beq.n	800e05a <check_fs+0x66>
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e04c:	2beb      	cmp	r3, #235	; 0xeb
 800e04e:	d11e      	bne.n	800e08e <check_fs+0x9a>
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800e056:	2b90      	cmp	r3, #144	; 0x90
 800e058:	d119      	bne.n	800e08e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	3334      	adds	r3, #52	; 0x34
 800e05e:	3336      	adds	r3, #54	; 0x36
 800e060:	4618      	mov	r0, r3
 800e062:	f7fe f855 	bl	800c110 <ld_dword>
 800e066:	4603      	mov	r3, r0
 800e068:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800e06c:	4a0a      	ldr	r2, [pc, #40]	; (800e098 <check_fs+0xa4>)
 800e06e:	4293      	cmp	r3, r2
 800e070:	d101      	bne.n	800e076 <check_fs+0x82>
 800e072:	2300      	movs	r3, #0
 800e074:	e00c      	b.n	800e090 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	3334      	adds	r3, #52	; 0x34
 800e07a:	3352      	adds	r3, #82	; 0x52
 800e07c:	4618      	mov	r0, r3
 800e07e:	f7fe f847 	bl	800c110 <ld_dword>
 800e082:	4603      	mov	r3, r0
 800e084:	4a05      	ldr	r2, [pc, #20]	; (800e09c <check_fs+0xa8>)
 800e086:	4293      	cmp	r3, r2
 800e088:	d101      	bne.n	800e08e <check_fs+0x9a>
 800e08a:	2300      	movs	r3, #0
 800e08c:	e000      	b.n	800e090 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800e08e:	2302      	movs	r3, #2
}
 800e090:	4618      	mov	r0, r3
 800e092:	3708      	adds	r7, #8
 800e094:	46bd      	mov	sp, r7
 800e096:	bd80      	pop	{r7, pc}
 800e098:	00544146 	.word	0x00544146
 800e09c:	33544146 	.word	0x33544146

0800e0a0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800e0a0:	b580      	push	{r7, lr}
 800e0a2:	b096      	sub	sp, #88	; 0x58
 800e0a4:	af00      	add	r7, sp, #0
 800e0a6:	60f8      	str	r0, [r7, #12]
 800e0a8:	60b9      	str	r1, [r7, #8]
 800e0aa:	4613      	mov	r3, r2
 800e0ac:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800e0ae:	68bb      	ldr	r3, [r7, #8]
 800e0b0:	2200      	movs	r2, #0
 800e0b2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800e0b4:	68f8      	ldr	r0, [r7, #12]
 800e0b6:	f7ff ff58 	bl	800df6a <get_ldnumber>
 800e0ba:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800e0bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	da01      	bge.n	800e0c6 <find_volume+0x26>
 800e0c2:	230b      	movs	r3, #11
 800e0c4:	e230      	b.n	800e528 <find_volume+0x488>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800e0c6:	4aa1      	ldr	r2, [pc, #644]	; (800e34c <find_volume+0x2ac>)
 800e0c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e0ce:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800e0d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d101      	bne.n	800e0da <find_volume+0x3a>
 800e0d6:	230c      	movs	r3, #12
 800e0d8:	e226      	b.n	800e528 <find_volume+0x488>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800e0da:	68bb      	ldr	r3, [r7, #8]
 800e0dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e0de:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800e0e0:	79fb      	ldrb	r3, [r7, #7]
 800e0e2:	f023 0301 	bic.w	r3, r3, #1
 800e0e6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800e0e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0ea:	781b      	ldrb	r3, [r3, #0]
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d01a      	beq.n	800e126 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800e0f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0f2:	785b      	ldrb	r3, [r3, #1]
 800e0f4:	4618      	mov	r0, r3
 800e0f6:	f7fd ff55 	bl	800bfa4 <disk_status>
 800e0fa:	4603      	mov	r3, r0
 800e0fc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800e100:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e104:	f003 0301 	and.w	r3, r3, #1
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d10c      	bne.n	800e126 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800e10c:	79fb      	ldrb	r3, [r7, #7]
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d007      	beq.n	800e122 <find_volume+0x82>
 800e112:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e116:	f003 0304 	and.w	r3, r3, #4
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d001      	beq.n	800e122 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800e11e:	230a      	movs	r3, #10
 800e120:	e202      	b.n	800e528 <find_volume+0x488>
			}
			return FR_OK;				/* The file system object is valid */
 800e122:	2300      	movs	r3, #0
 800e124:	e200      	b.n	800e528 <find_volume+0x488>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800e126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e128:	2200      	movs	r2, #0
 800e12a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800e12c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e12e:	b2da      	uxtb	r2, r3
 800e130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e132:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800e134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e136:	785b      	ldrb	r3, [r3, #1]
 800e138:	4618      	mov	r0, r3
 800e13a:	f7fd ff4d 	bl	800bfd8 <disk_initialize>
 800e13e:	4603      	mov	r3, r0
 800e140:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800e144:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e148:	f003 0301 	and.w	r3, r3, #1
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d001      	beq.n	800e154 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800e150:	2303      	movs	r3, #3
 800e152:	e1e9      	b.n	800e528 <find_volume+0x488>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800e154:	79fb      	ldrb	r3, [r7, #7]
 800e156:	2b00      	cmp	r3, #0
 800e158:	d007      	beq.n	800e16a <find_volume+0xca>
 800e15a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e15e:	f003 0304 	and.w	r3, r3, #4
 800e162:	2b00      	cmp	r3, #0
 800e164:	d001      	beq.n	800e16a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800e166:	230a      	movs	r3, #10
 800e168:	e1de      	b.n	800e528 <find_volume+0x488>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800e16a:	2300      	movs	r3, #0
 800e16c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800e16e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e170:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e172:	f7ff ff3f 	bl	800dff4 <check_fs>
 800e176:	4603      	mov	r3, r0
 800e178:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800e17c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e180:	2b02      	cmp	r3, #2
 800e182:	d149      	bne.n	800e218 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e184:	2300      	movs	r3, #0
 800e186:	643b      	str	r3, [r7, #64]	; 0x40
 800e188:	e01e      	b.n	800e1c8 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800e18a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e18c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e190:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e192:	011b      	lsls	r3, r3, #4
 800e194:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800e198:	4413      	add	r3, r2
 800e19a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800e19c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e19e:	3304      	adds	r3, #4
 800e1a0:	781b      	ldrb	r3, [r3, #0]
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d006      	beq.n	800e1b4 <find_volume+0x114>
 800e1a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1a8:	3308      	adds	r3, #8
 800e1aa:	4618      	mov	r0, r3
 800e1ac:	f7fd ffb0 	bl	800c110 <ld_dword>
 800e1b0:	4602      	mov	r2, r0
 800e1b2:	e000      	b.n	800e1b6 <find_volume+0x116>
 800e1b4:	2200      	movs	r2, #0
 800e1b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e1b8:	009b      	lsls	r3, r3, #2
 800e1ba:	3358      	adds	r3, #88	; 0x58
 800e1bc:	443b      	add	r3, r7
 800e1be:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e1c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e1c4:	3301      	adds	r3, #1
 800e1c6:	643b      	str	r3, [r7, #64]	; 0x40
 800e1c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e1ca:	2b03      	cmp	r3, #3
 800e1cc:	d9dd      	bls.n	800e18a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800e1ce:	2300      	movs	r3, #0
 800e1d0:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800e1d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d002      	beq.n	800e1de <find_volume+0x13e>
 800e1d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e1da:	3b01      	subs	r3, #1
 800e1dc:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800e1de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e1e0:	009b      	lsls	r3, r3, #2
 800e1e2:	3358      	adds	r3, #88	; 0x58
 800e1e4:	443b      	add	r3, r7
 800e1e6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800e1ea:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800e1ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d005      	beq.n	800e1fe <find_volume+0x15e>
 800e1f2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e1f4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e1f6:	f7ff fefd 	bl	800dff4 <check_fs>
 800e1fa:	4603      	mov	r3, r0
 800e1fc:	e000      	b.n	800e200 <find_volume+0x160>
 800e1fe:	2303      	movs	r3, #3
 800e200:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800e204:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e208:	2b01      	cmp	r3, #1
 800e20a:	d905      	bls.n	800e218 <find_volume+0x178>
 800e20c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e20e:	3301      	adds	r3, #1
 800e210:	643b      	str	r3, [r7, #64]	; 0x40
 800e212:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e214:	2b03      	cmp	r3, #3
 800e216:	d9e2      	bls.n	800e1de <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800e218:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e21c:	2b04      	cmp	r3, #4
 800e21e:	d101      	bne.n	800e224 <find_volume+0x184>
 800e220:	2301      	movs	r3, #1
 800e222:	e181      	b.n	800e528 <find_volume+0x488>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800e224:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e228:	2b01      	cmp	r3, #1
 800e22a:	d901      	bls.n	800e230 <find_volume+0x190>
 800e22c:	230d      	movs	r3, #13
 800e22e:	e17b      	b.n	800e528 <find_volume+0x488>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800e230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e232:	3334      	adds	r3, #52	; 0x34
 800e234:	330b      	adds	r3, #11
 800e236:	4618      	mov	r0, r3
 800e238:	f7fd ff52 	bl	800c0e0 <ld_word>
 800e23c:	4603      	mov	r3, r0
 800e23e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e242:	d001      	beq.n	800e248 <find_volume+0x1a8>
 800e244:	230d      	movs	r3, #13
 800e246:	e16f      	b.n	800e528 <find_volume+0x488>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800e248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e24a:	3334      	adds	r3, #52	; 0x34
 800e24c:	3316      	adds	r3, #22
 800e24e:	4618      	mov	r0, r3
 800e250:	f7fd ff46 	bl	800c0e0 <ld_word>
 800e254:	4603      	mov	r3, r0
 800e256:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800e258:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d106      	bne.n	800e26c <find_volume+0x1cc>
 800e25e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e260:	3334      	adds	r3, #52	; 0x34
 800e262:	3324      	adds	r3, #36	; 0x24
 800e264:	4618      	mov	r0, r3
 800e266:	f7fd ff53 	bl	800c110 <ld_dword>
 800e26a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800e26c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e26e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e270:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800e272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e274:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800e278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e27a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800e27c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e27e:	789b      	ldrb	r3, [r3, #2]
 800e280:	2b01      	cmp	r3, #1
 800e282:	d005      	beq.n	800e290 <find_volume+0x1f0>
 800e284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e286:	789b      	ldrb	r3, [r3, #2]
 800e288:	2b02      	cmp	r3, #2
 800e28a:	d001      	beq.n	800e290 <find_volume+0x1f0>
 800e28c:	230d      	movs	r3, #13
 800e28e:	e14b      	b.n	800e528 <find_volume+0x488>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800e290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e292:	789b      	ldrb	r3, [r3, #2]
 800e294:	461a      	mov	r2, r3
 800e296:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e298:	fb02 f303 	mul.w	r3, r2, r3
 800e29c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800e29e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e2a4:	b29a      	uxth	r2, r3
 800e2a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2a8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800e2aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2ac:	895b      	ldrh	r3, [r3, #10]
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d008      	beq.n	800e2c4 <find_volume+0x224>
 800e2b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2b4:	895b      	ldrh	r3, [r3, #10]
 800e2b6:	461a      	mov	r2, r3
 800e2b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2ba:	895b      	ldrh	r3, [r3, #10]
 800e2bc:	3b01      	subs	r3, #1
 800e2be:	4013      	ands	r3, r2
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d001      	beq.n	800e2c8 <find_volume+0x228>
 800e2c4:	230d      	movs	r3, #13
 800e2c6:	e12f      	b.n	800e528 <find_volume+0x488>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800e2c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2ca:	3334      	adds	r3, #52	; 0x34
 800e2cc:	3311      	adds	r3, #17
 800e2ce:	4618      	mov	r0, r3
 800e2d0:	f7fd ff06 	bl	800c0e0 <ld_word>
 800e2d4:	4603      	mov	r3, r0
 800e2d6:	461a      	mov	r2, r3
 800e2d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2da:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800e2dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2de:	891b      	ldrh	r3, [r3, #8]
 800e2e0:	f003 030f 	and.w	r3, r3, #15
 800e2e4:	b29b      	uxth	r3, r3
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d001      	beq.n	800e2ee <find_volume+0x24e>
 800e2ea:	230d      	movs	r3, #13
 800e2ec:	e11c      	b.n	800e528 <find_volume+0x488>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800e2ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2f0:	3334      	adds	r3, #52	; 0x34
 800e2f2:	3313      	adds	r3, #19
 800e2f4:	4618      	mov	r0, r3
 800e2f6:	f7fd fef3 	bl	800c0e0 <ld_word>
 800e2fa:	4603      	mov	r3, r0
 800e2fc:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800e2fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e300:	2b00      	cmp	r3, #0
 800e302:	d106      	bne.n	800e312 <find_volume+0x272>
 800e304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e306:	3334      	adds	r3, #52	; 0x34
 800e308:	3320      	adds	r3, #32
 800e30a:	4618      	mov	r0, r3
 800e30c:	f7fd ff00 	bl	800c110 <ld_dword>
 800e310:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800e312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e314:	3334      	adds	r3, #52	; 0x34
 800e316:	330e      	adds	r3, #14
 800e318:	4618      	mov	r0, r3
 800e31a:	f7fd fee1 	bl	800c0e0 <ld_word>
 800e31e:	4603      	mov	r3, r0
 800e320:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800e322:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e324:	2b00      	cmp	r3, #0
 800e326:	d101      	bne.n	800e32c <find_volume+0x28c>
 800e328:	230d      	movs	r3, #13
 800e32a:	e0fd      	b.n	800e528 <find_volume+0x488>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800e32c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e32e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e330:	4413      	add	r3, r2
 800e332:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e334:	8912      	ldrh	r2, [r2, #8]
 800e336:	0912      	lsrs	r2, r2, #4
 800e338:	b292      	uxth	r2, r2
 800e33a:	4413      	add	r3, r2
 800e33c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800e33e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e342:	429a      	cmp	r2, r3
 800e344:	d204      	bcs.n	800e350 <find_volume+0x2b0>
 800e346:	230d      	movs	r3, #13
 800e348:	e0ee      	b.n	800e528 <find_volume+0x488>
 800e34a:	bf00      	nop
 800e34c:	20001bac 	.word	0x20001bac
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800e350:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e354:	1ad3      	subs	r3, r2, r3
 800e356:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e358:	8952      	ldrh	r2, [r2, #10]
 800e35a:	fbb3 f3f2 	udiv	r3, r3, r2
 800e35e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800e360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e362:	2b00      	cmp	r3, #0
 800e364:	d101      	bne.n	800e36a <find_volume+0x2ca>
 800e366:	230d      	movs	r3, #13
 800e368:	e0de      	b.n	800e528 <find_volume+0x488>
		fmt = FS_FAT32;
 800e36a:	2303      	movs	r3, #3
 800e36c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800e370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e372:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800e376:	4293      	cmp	r3, r2
 800e378:	d802      	bhi.n	800e380 <find_volume+0x2e0>
 800e37a:	2302      	movs	r3, #2
 800e37c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800e380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e382:	f640 72f5 	movw	r2, #4085	; 0xff5
 800e386:	4293      	cmp	r3, r2
 800e388:	d802      	bhi.n	800e390 <find_volume+0x2f0>
 800e38a:	2301      	movs	r3, #1
 800e38c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800e390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e392:	1c9a      	adds	r2, r3, #2
 800e394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e396:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800e398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e39a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e39c:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800e39e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e3a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e3a2:	441a      	add	r2, r3
 800e3a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3a6:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800e3a8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e3aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3ac:	441a      	add	r2, r3
 800e3ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3b0:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800e3b2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e3b6:	2b03      	cmp	r3, #3
 800e3b8:	d11e      	bne.n	800e3f8 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800e3ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3bc:	3334      	adds	r3, #52	; 0x34
 800e3be:	332a      	adds	r3, #42	; 0x2a
 800e3c0:	4618      	mov	r0, r3
 800e3c2:	f7fd fe8d 	bl	800c0e0 <ld_word>
 800e3c6:	4603      	mov	r3, r0
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d001      	beq.n	800e3d0 <find_volume+0x330>
 800e3cc:	230d      	movs	r3, #13
 800e3ce:	e0ab      	b.n	800e528 <find_volume+0x488>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800e3d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3d2:	891b      	ldrh	r3, [r3, #8]
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d001      	beq.n	800e3dc <find_volume+0x33c>
 800e3d8:	230d      	movs	r3, #13
 800e3da:	e0a5      	b.n	800e528 <find_volume+0x488>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800e3dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3de:	3334      	adds	r3, #52	; 0x34
 800e3e0:	332c      	adds	r3, #44	; 0x2c
 800e3e2:	4618      	mov	r0, r3
 800e3e4:	f7fd fe94 	bl	800c110 <ld_dword>
 800e3e8:	4602      	mov	r2, r0
 800e3ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3ec:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800e3ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3f0:	699b      	ldr	r3, [r3, #24]
 800e3f2:	009b      	lsls	r3, r3, #2
 800e3f4:	647b      	str	r3, [r7, #68]	; 0x44
 800e3f6:	e01f      	b.n	800e438 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800e3f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3fa:	891b      	ldrh	r3, [r3, #8]
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d101      	bne.n	800e404 <find_volume+0x364>
 800e400:	230d      	movs	r3, #13
 800e402:	e091      	b.n	800e528 <find_volume+0x488>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800e404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e406:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e408:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e40a:	441a      	add	r2, r3
 800e40c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e40e:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800e410:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e414:	2b02      	cmp	r3, #2
 800e416:	d103      	bne.n	800e420 <find_volume+0x380>
 800e418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e41a:	699b      	ldr	r3, [r3, #24]
 800e41c:	005b      	lsls	r3, r3, #1
 800e41e:	e00a      	b.n	800e436 <find_volume+0x396>
 800e420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e422:	699a      	ldr	r2, [r3, #24]
 800e424:	4613      	mov	r3, r2
 800e426:	005b      	lsls	r3, r3, #1
 800e428:	4413      	add	r3, r2
 800e42a:	085a      	lsrs	r2, r3, #1
 800e42c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e42e:	699b      	ldr	r3, [r3, #24]
 800e430:	f003 0301 	and.w	r3, r3, #1
 800e434:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800e436:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800e438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e43a:	69da      	ldr	r2, [r3, #28]
 800e43c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e43e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800e442:	0a5b      	lsrs	r3, r3, #9
 800e444:	429a      	cmp	r2, r3
 800e446:	d201      	bcs.n	800e44c <find_volume+0x3ac>
 800e448:	230d      	movs	r3, #13
 800e44a:	e06d      	b.n	800e528 <find_volume+0x488>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800e44c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e44e:	f04f 32ff 	mov.w	r2, #4294967295
 800e452:	615a      	str	r2, [r3, #20]
 800e454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e456:	695a      	ldr	r2, [r3, #20]
 800e458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e45a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800e45c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e45e:	2280      	movs	r2, #128	; 0x80
 800e460:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800e462:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e466:	2b03      	cmp	r3, #3
 800e468:	d149      	bne.n	800e4fe <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800e46a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e46c:	3334      	adds	r3, #52	; 0x34
 800e46e:	3330      	adds	r3, #48	; 0x30
 800e470:	4618      	mov	r0, r3
 800e472:	f7fd fe35 	bl	800c0e0 <ld_word>
 800e476:	4603      	mov	r3, r0
 800e478:	2b01      	cmp	r3, #1
 800e47a:	d140      	bne.n	800e4fe <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800e47c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e47e:	3301      	adds	r3, #1
 800e480:	4619      	mov	r1, r3
 800e482:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e484:	f7fe f8dc 	bl	800c640 <move_window>
 800e488:	4603      	mov	r3, r0
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d137      	bne.n	800e4fe <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800e48e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e490:	2200      	movs	r2, #0
 800e492:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800e494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e496:	3334      	adds	r3, #52	; 0x34
 800e498:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e49c:	4618      	mov	r0, r3
 800e49e:	f7fd fe1f 	bl	800c0e0 <ld_word>
 800e4a2:	4603      	mov	r3, r0
 800e4a4:	461a      	mov	r2, r3
 800e4a6:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800e4aa:	429a      	cmp	r2, r3
 800e4ac:	d127      	bne.n	800e4fe <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800e4ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4b0:	3334      	adds	r3, #52	; 0x34
 800e4b2:	4618      	mov	r0, r3
 800e4b4:	f7fd fe2c 	bl	800c110 <ld_dword>
 800e4b8:	4603      	mov	r3, r0
 800e4ba:	4a1d      	ldr	r2, [pc, #116]	; (800e530 <find_volume+0x490>)
 800e4bc:	4293      	cmp	r3, r2
 800e4be:	d11e      	bne.n	800e4fe <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800e4c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4c2:	3334      	adds	r3, #52	; 0x34
 800e4c4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800e4c8:	4618      	mov	r0, r3
 800e4ca:	f7fd fe21 	bl	800c110 <ld_dword>
 800e4ce:	4603      	mov	r3, r0
 800e4d0:	4a18      	ldr	r2, [pc, #96]	; (800e534 <find_volume+0x494>)
 800e4d2:	4293      	cmp	r3, r2
 800e4d4:	d113      	bne.n	800e4fe <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800e4d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4d8:	3334      	adds	r3, #52	; 0x34
 800e4da:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800e4de:	4618      	mov	r0, r3
 800e4e0:	f7fd fe16 	bl	800c110 <ld_dword>
 800e4e4:	4602      	mov	r2, r0
 800e4e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4e8:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800e4ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4ec:	3334      	adds	r3, #52	; 0x34
 800e4ee:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800e4f2:	4618      	mov	r0, r3
 800e4f4:	f7fd fe0c 	bl	800c110 <ld_dword>
 800e4f8:	4602      	mov	r2, r0
 800e4fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4fc:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800e4fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e500:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800e504:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800e506:	4b0c      	ldr	r3, [pc, #48]	; (800e538 <find_volume+0x498>)
 800e508:	881b      	ldrh	r3, [r3, #0]
 800e50a:	3301      	adds	r3, #1
 800e50c:	b29a      	uxth	r2, r3
 800e50e:	4b0a      	ldr	r3, [pc, #40]	; (800e538 <find_volume+0x498>)
 800e510:	801a      	strh	r2, [r3, #0]
 800e512:	4b09      	ldr	r3, [pc, #36]	; (800e538 <find_volume+0x498>)
 800e514:	881a      	ldrh	r2, [r3, #0]
 800e516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e518:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800e51a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e51c:	4a07      	ldr	r2, [pc, #28]	; (800e53c <find_volume+0x49c>)
 800e51e:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800e520:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e522:	f7fe f825 	bl	800c570 <clear_lock>
#endif
	return FR_OK;
 800e526:	2300      	movs	r3, #0
}
 800e528:	4618      	mov	r0, r3
 800e52a:	3758      	adds	r7, #88	; 0x58
 800e52c:	46bd      	mov	sp, r7
 800e52e:	bd80      	pop	{r7, pc}
 800e530:	41615252 	.word	0x41615252
 800e534:	61417272 	.word	0x61417272
 800e538:	20001bb0 	.word	0x20001bb0
 800e53c:	20001bd4 	.word	0x20001bd4

0800e540 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800e540:	b580      	push	{r7, lr}
 800e542:	b084      	sub	sp, #16
 800e544:	af00      	add	r7, sp, #0
 800e546:	6078      	str	r0, [r7, #4]
 800e548:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800e54a:	2309      	movs	r3, #9
 800e54c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	2b00      	cmp	r3, #0
 800e552:	d01c      	beq.n	800e58e <validate+0x4e>
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d018      	beq.n	800e58e <validate+0x4e>
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	781b      	ldrb	r3, [r3, #0]
 800e562:	2b00      	cmp	r3, #0
 800e564:	d013      	beq.n	800e58e <validate+0x4e>
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	889a      	ldrh	r2, [r3, #4]
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	88db      	ldrh	r3, [r3, #6]
 800e570:	429a      	cmp	r2, r3
 800e572:	d10c      	bne.n	800e58e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	785b      	ldrb	r3, [r3, #1]
 800e57a:	4618      	mov	r0, r3
 800e57c:	f7fd fd12 	bl	800bfa4 <disk_status>
 800e580:	4603      	mov	r3, r0
 800e582:	f003 0301 	and.w	r3, r3, #1
 800e586:	2b00      	cmp	r3, #0
 800e588:	d101      	bne.n	800e58e <validate+0x4e>
			res = FR_OK;
 800e58a:	2300      	movs	r3, #0
 800e58c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800e58e:	7bfb      	ldrb	r3, [r7, #15]
 800e590:	2b00      	cmp	r3, #0
 800e592:	d102      	bne.n	800e59a <validate+0x5a>
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	e000      	b.n	800e59c <validate+0x5c>
 800e59a:	2300      	movs	r3, #0
 800e59c:	683a      	ldr	r2, [r7, #0]
 800e59e:	6013      	str	r3, [r2, #0]
	return res;
 800e5a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5a2:	4618      	mov	r0, r3
 800e5a4:	3710      	adds	r7, #16
 800e5a6:	46bd      	mov	sp, r7
 800e5a8:	bd80      	pop	{r7, pc}
	...

0800e5ac <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800e5ac:	b580      	push	{r7, lr}
 800e5ae:	b088      	sub	sp, #32
 800e5b0:	af00      	add	r7, sp, #0
 800e5b2:	60f8      	str	r0, [r7, #12]
 800e5b4:	60b9      	str	r1, [r7, #8]
 800e5b6:	4613      	mov	r3, r2
 800e5b8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800e5ba:	68bb      	ldr	r3, [r7, #8]
 800e5bc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800e5be:	f107 0310 	add.w	r3, r7, #16
 800e5c2:	4618      	mov	r0, r3
 800e5c4:	f7ff fcd1 	bl	800df6a <get_ldnumber>
 800e5c8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800e5ca:	69fb      	ldr	r3, [r7, #28]
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	da01      	bge.n	800e5d4 <f_mount+0x28>
 800e5d0:	230b      	movs	r3, #11
 800e5d2:	e02b      	b.n	800e62c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800e5d4:	4a17      	ldr	r2, [pc, #92]	; (800e634 <f_mount+0x88>)
 800e5d6:	69fb      	ldr	r3, [r7, #28]
 800e5d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e5dc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800e5de:	69bb      	ldr	r3, [r7, #24]
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d005      	beq.n	800e5f0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800e5e4:	69b8      	ldr	r0, [r7, #24]
 800e5e6:	f7fd ffc3 	bl	800c570 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800e5ea:	69bb      	ldr	r3, [r7, #24]
 800e5ec:	2200      	movs	r2, #0
 800e5ee:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d002      	beq.n	800e5fc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800e5f6:	68fb      	ldr	r3, [r7, #12]
 800e5f8:	2200      	movs	r2, #0
 800e5fa:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800e5fc:	68fa      	ldr	r2, [r7, #12]
 800e5fe:	490d      	ldr	r1, [pc, #52]	; (800e634 <f_mount+0x88>)
 800e600:	69fb      	ldr	r3, [r7, #28]
 800e602:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d002      	beq.n	800e612 <f_mount+0x66>
 800e60c:	79fb      	ldrb	r3, [r7, #7]
 800e60e:	2b01      	cmp	r3, #1
 800e610:	d001      	beq.n	800e616 <f_mount+0x6a>
 800e612:	2300      	movs	r3, #0
 800e614:	e00a      	b.n	800e62c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800e616:	f107 010c 	add.w	r1, r7, #12
 800e61a:	f107 0308 	add.w	r3, r7, #8
 800e61e:	2200      	movs	r2, #0
 800e620:	4618      	mov	r0, r3
 800e622:	f7ff fd3d 	bl	800e0a0 <find_volume>
 800e626:	4603      	mov	r3, r0
 800e628:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800e62a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e62c:	4618      	mov	r0, r3
 800e62e:	3720      	adds	r7, #32
 800e630:	46bd      	mov	sp, r7
 800e632:	bd80      	pop	{r7, pc}
 800e634:	20001bac 	.word	0x20001bac

0800e638 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800e638:	b580      	push	{r7, lr}
 800e63a:	b09a      	sub	sp, #104	; 0x68
 800e63c:	af00      	add	r7, sp, #0
 800e63e:	60f8      	str	r0, [r7, #12]
 800e640:	60b9      	str	r1, [r7, #8]
 800e642:	4613      	mov	r3, r2
 800e644:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d101      	bne.n	800e650 <f_open+0x18>
 800e64c:	2309      	movs	r3, #9
 800e64e:	e1ad      	b.n	800e9ac <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800e650:	79fb      	ldrb	r3, [r7, #7]
 800e652:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e656:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800e658:	79fa      	ldrb	r2, [r7, #7]
 800e65a:	f107 0114 	add.w	r1, r7, #20
 800e65e:	f107 0308 	add.w	r3, r7, #8
 800e662:	4618      	mov	r0, r3
 800e664:	f7ff fd1c 	bl	800e0a0 <find_volume>
 800e668:	4603      	mov	r3, r0
 800e66a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800e66e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e672:	2b00      	cmp	r3, #0
 800e674:	f040 8191 	bne.w	800e99a <f_open+0x362>
		dj.obj.fs = fs;
 800e678:	697b      	ldr	r3, [r7, #20]
 800e67a:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800e67c:	68ba      	ldr	r2, [r7, #8]
 800e67e:	f107 0318 	add.w	r3, r7, #24
 800e682:	4611      	mov	r1, r2
 800e684:	4618      	mov	r0, r3
 800e686:	f7ff fbff 	bl	800de88 <follow_path>
 800e68a:	4603      	mov	r3, r0
 800e68c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800e690:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e694:	2b00      	cmp	r3, #0
 800e696:	d11a      	bne.n	800e6ce <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800e698:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800e69c:	b25b      	sxtb	r3, r3
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	da03      	bge.n	800e6aa <f_open+0x72>
				res = FR_INVALID_NAME;
 800e6a2:	2306      	movs	r3, #6
 800e6a4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e6a8:	e011      	b.n	800e6ce <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e6aa:	79fb      	ldrb	r3, [r7, #7]
 800e6ac:	f023 0301 	bic.w	r3, r3, #1
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	bf14      	ite	ne
 800e6b4:	2301      	movne	r3, #1
 800e6b6:	2300      	moveq	r3, #0
 800e6b8:	b2db      	uxtb	r3, r3
 800e6ba:	461a      	mov	r2, r3
 800e6bc:	f107 0318 	add.w	r3, r7, #24
 800e6c0:	4611      	mov	r1, r2
 800e6c2:	4618      	mov	r0, r3
 800e6c4:	f7fd fe0c 	bl	800c2e0 <chk_lock>
 800e6c8:	4603      	mov	r3, r0
 800e6ca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800e6ce:	79fb      	ldrb	r3, [r7, #7]
 800e6d0:	f003 031c 	and.w	r3, r3, #28
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d07f      	beq.n	800e7d8 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800e6d8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d017      	beq.n	800e710 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800e6e0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e6e4:	2b04      	cmp	r3, #4
 800e6e6:	d10e      	bne.n	800e706 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800e6e8:	f7fd fe56 	bl	800c398 <enq_lock>
 800e6ec:	4603      	mov	r3, r0
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d006      	beq.n	800e700 <f_open+0xc8>
 800e6f2:	f107 0318 	add.w	r3, r7, #24
 800e6f6:	4618      	mov	r0, r3
 800e6f8:	f7ff f838 	bl	800d76c <dir_register>
 800e6fc:	4603      	mov	r3, r0
 800e6fe:	e000      	b.n	800e702 <f_open+0xca>
 800e700:	2312      	movs	r3, #18
 800e702:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800e706:	79fb      	ldrb	r3, [r7, #7]
 800e708:	f043 0308 	orr.w	r3, r3, #8
 800e70c:	71fb      	strb	r3, [r7, #7]
 800e70e:	e010      	b.n	800e732 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800e710:	7fbb      	ldrb	r3, [r7, #30]
 800e712:	f003 0311 	and.w	r3, r3, #17
 800e716:	2b00      	cmp	r3, #0
 800e718:	d003      	beq.n	800e722 <f_open+0xea>
					res = FR_DENIED;
 800e71a:	2307      	movs	r3, #7
 800e71c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e720:	e007      	b.n	800e732 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800e722:	79fb      	ldrb	r3, [r7, #7]
 800e724:	f003 0304 	and.w	r3, r3, #4
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d002      	beq.n	800e732 <f_open+0xfa>
 800e72c:	2308      	movs	r3, #8
 800e72e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800e732:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e736:	2b00      	cmp	r3, #0
 800e738:	d168      	bne.n	800e80c <f_open+0x1d4>
 800e73a:	79fb      	ldrb	r3, [r7, #7]
 800e73c:	f003 0308 	and.w	r3, r3, #8
 800e740:	2b00      	cmp	r3, #0
 800e742:	d063      	beq.n	800e80c <f_open+0x1d4>
				dw = GET_FATTIME();
 800e744:	f7fa fb1e 	bl	8008d84 <get_fattime>
 800e748:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800e74a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e74c:	330e      	adds	r3, #14
 800e74e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e750:	4618      	mov	r0, r3
 800e752:	f7fd fd1b 	bl	800c18c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800e756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e758:	3316      	adds	r3, #22
 800e75a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e75c:	4618      	mov	r0, r3
 800e75e:	f7fd fd15 	bl	800c18c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800e762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e764:	330b      	adds	r3, #11
 800e766:	2220      	movs	r2, #32
 800e768:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800e76a:	697b      	ldr	r3, [r7, #20]
 800e76c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e76e:	4611      	mov	r1, r2
 800e770:	4618      	mov	r0, r3
 800e772:	f7fe fc6a 	bl	800d04a <ld_clust>
 800e776:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800e778:	697b      	ldr	r3, [r7, #20]
 800e77a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e77c:	2200      	movs	r2, #0
 800e77e:	4618      	mov	r0, r3
 800e780:	f7fe fc82 	bl	800d088 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800e784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e786:	331c      	adds	r3, #28
 800e788:	2100      	movs	r1, #0
 800e78a:	4618      	mov	r0, r3
 800e78c:	f7fd fcfe 	bl	800c18c <st_dword>
					fs->wflag = 1;
 800e790:	697b      	ldr	r3, [r7, #20]
 800e792:	2201      	movs	r2, #1
 800e794:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800e796:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d037      	beq.n	800e80c <f_open+0x1d4>
						dw = fs->winsect;
 800e79c:	697b      	ldr	r3, [r7, #20]
 800e79e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7a0:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800e7a2:	f107 0318 	add.w	r3, r7, #24
 800e7a6:	2200      	movs	r2, #0
 800e7a8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e7aa:	4618      	mov	r0, r3
 800e7ac:	f7fe f995 	bl	800cada <remove_chain>
 800e7b0:	4603      	mov	r3, r0
 800e7b2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800e7b6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d126      	bne.n	800e80c <f_open+0x1d4>
							res = move_window(fs, dw);
 800e7be:	697b      	ldr	r3, [r7, #20]
 800e7c0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e7c2:	4618      	mov	r0, r3
 800e7c4:	f7fd ff3c 	bl	800c640 <move_window>
 800e7c8:	4603      	mov	r3, r0
 800e7ca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800e7ce:	697b      	ldr	r3, [r7, #20]
 800e7d0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e7d2:	3a01      	subs	r2, #1
 800e7d4:	611a      	str	r2, [r3, #16]
 800e7d6:	e019      	b.n	800e80c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800e7d8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d115      	bne.n	800e80c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800e7e0:	7fbb      	ldrb	r3, [r7, #30]
 800e7e2:	f003 0310 	and.w	r3, r3, #16
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d003      	beq.n	800e7f2 <f_open+0x1ba>
					res = FR_NO_FILE;
 800e7ea:	2304      	movs	r3, #4
 800e7ec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e7f0:	e00c      	b.n	800e80c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800e7f2:	79fb      	ldrb	r3, [r7, #7]
 800e7f4:	f003 0302 	and.w	r3, r3, #2
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d007      	beq.n	800e80c <f_open+0x1d4>
 800e7fc:	7fbb      	ldrb	r3, [r7, #30]
 800e7fe:	f003 0301 	and.w	r3, r3, #1
 800e802:	2b00      	cmp	r3, #0
 800e804:	d002      	beq.n	800e80c <f_open+0x1d4>
						res = FR_DENIED;
 800e806:	2307      	movs	r3, #7
 800e808:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800e80c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e810:	2b00      	cmp	r3, #0
 800e812:	d128      	bne.n	800e866 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800e814:	79fb      	ldrb	r3, [r7, #7]
 800e816:	f003 0308 	and.w	r3, r3, #8
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d003      	beq.n	800e826 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800e81e:	79fb      	ldrb	r3, [r7, #7]
 800e820:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e824:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800e826:	697b      	ldr	r3, [r7, #20]
 800e828:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800e82e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e834:	79fb      	ldrb	r3, [r7, #7]
 800e836:	f023 0301 	bic.w	r3, r3, #1
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	bf14      	ite	ne
 800e83e:	2301      	movne	r3, #1
 800e840:	2300      	moveq	r3, #0
 800e842:	b2db      	uxtb	r3, r3
 800e844:	461a      	mov	r2, r3
 800e846:	f107 0318 	add.w	r3, r7, #24
 800e84a:	4611      	mov	r1, r2
 800e84c:	4618      	mov	r0, r3
 800e84e:	f7fd fdc5 	bl	800c3dc <inc_lock>
 800e852:	4602      	mov	r2, r0
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	691b      	ldr	r3, [r3, #16]
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d102      	bne.n	800e866 <f_open+0x22e>
 800e860:	2302      	movs	r3, #2
 800e862:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800e866:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	f040 8095 	bne.w	800e99a <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800e870:	697b      	ldr	r3, [r7, #20]
 800e872:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e874:	4611      	mov	r1, r2
 800e876:	4618      	mov	r0, r3
 800e878:	f7fe fbe7 	bl	800d04a <ld_clust>
 800e87c:	4602      	mov	r2, r0
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800e882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e884:	331c      	adds	r3, #28
 800e886:	4618      	mov	r0, r3
 800e888:	f7fd fc42 	bl	800c110 <ld_dword>
 800e88c:	4602      	mov	r2, r0
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	2200      	movs	r2, #0
 800e896:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800e898:	697a      	ldr	r2, [r7, #20]
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800e89e:	697b      	ldr	r3, [r7, #20]
 800e8a0:	88da      	ldrh	r2, [r3, #6]
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	79fa      	ldrb	r2, [r7, #7]
 800e8aa:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	2200      	movs	r2, #0
 800e8b0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	2200      	movs	r2, #0
 800e8b6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	2200      	movs	r2, #0
 800e8bc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	3330      	adds	r3, #48	; 0x30
 800e8c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e8c6:	2100      	movs	r1, #0
 800e8c8:	4618      	mov	r0, r3
 800e8ca:	f7fd fcac 	bl	800c226 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800e8ce:	79fb      	ldrb	r3, [r7, #7]
 800e8d0:	f003 0320 	and.w	r3, r3, #32
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d060      	beq.n	800e99a <f_open+0x362>
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	68db      	ldr	r3, [r3, #12]
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d05c      	beq.n	800e99a <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	68da      	ldr	r2, [r3, #12]
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800e8e8:	697b      	ldr	r3, [r7, #20]
 800e8ea:	895b      	ldrh	r3, [r3, #10]
 800e8ec:	025b      	lsls	r3, r3, #9
 800e8ee:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	689b      	ldr	r3, [r3, #8]
 800e8f4:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	68db      	ldr	r3, [r3, #12]
 800e8fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e8fc:	e016      	b.n	800e92c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800e8fe:	68fb      	ldr	r3, [r7, #12]
 800e900:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e902:	4618      	mov	r0, r3
 800e904:	f7fd ff57 	bl	800c7b6 <get_fat>
 800e908:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800e90a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e90c:	2b01      	cmp	r3, #1
 800e90e:	d802      	bhi.n	800e916 <f_open+0x2de>
 800e910:	2302      	movs	r3, #2
 800e912:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800e916:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e91c:	d102      	bne.n	800e924 <f_open+0x2ec>
 800e91e:	2301      	movs	r3, #1
 800e920:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e924:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e926:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e928:	1ad3      	subs	r3, r2, r3
 800e92a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e92c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e930:	2b00      	cmp	r3, #0
 800e932:	d103      	bne.n	800e93c <f_open+0x304>
 800e934:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e936:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e938:	429a      	cmp	r2, r3
 800e93a:	d8e0      	bhi.n	800e8fe <f_open+0x2c6>
				}
				fp->clust = clst;
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e940:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800e942:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e946:	2b00      	cmp	r3, #0
 800e948:	d127      	bne.n	800e99a <f_open+0x362>
 800e94a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e94c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e950:	2b00      	cmp	r3, #0
 800e952:	d022      	beq.n	800e99a <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800e954:	697b      	ldr	r3, [r7, #20]
 800e956:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e958:	4618      	mov	r0, r3
 800e95a:	f7fd ff0d 	bl	800c778 <clust2sect>
 800e95e:	64f8      	str	r0, [r7, #76]	; 0x4c
 800e960:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e962:	2b00      	cmp	r3, #0
 800e964:	d103      	bne.n	800e96e <f_open+0x336>
						res = FR_INT_ERR;
 800e966:	2302      	movs	r3, #2
 800e968:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e96c:	e015      	b.n	800e99a <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800e96e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e970:	0a5a      	lsrs	r2, r3, #9
 800e972:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e974:	441a      	add	r2, r3
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800e97a:	697b      	ldr	r3, [r7, #20]
 800e97c:	7858      	ldrb	r0, [r3, #1]
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	6a1a      	ldr	r2, [r3, #32]
 800e988:	2301      	movs	r3, #1
 800e98a:	f7fd fb4b 	bl	800c024 <disk_read>
 800e98e:	4603      	mov	r3, r0
 800e990:	2b00      	cmp	r3, #0
 800e992:	d002      	beq.n	800e99a <f_open+0x362>
 800e994:	2301      	movs	r3, #1
 800e996:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800e99a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d002      	beq.n	800e9a8 <f_open+0x370>
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	2200      	movs	r2, #0
 800e9a6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800e9a8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800e9ac:	4618      	mov	r0, r3
 800e9ae:	3768      	adds	r7, #104	; 0x68
 800e9b0:	46bd      	mov	sp, r7
 800e9b2:	bd80      	pop	{r7, pc}

0800e9b4 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800e9b4:	b580      	push	{r7, lr}
 800e9b6:	b08e      	sub	sp, #56	; 0x38
 800e9b8:	af00      	add	r7, sp, #0
 800e9ba:	60f8      	str	r0, [r7, #12]
 800e9bc:	60b9      	str	r1, [r7, #8]
 800e9be:	607a      	str	r2, [r7, #4]
 800e9c0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800e9c2:	68bb      	ldr	r3, [r7, #8]
 800e9c4:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800e9c6:	683b      	ldr	r3, [r7, #0]
 800e9c8:	2200      	movs	r2, #0
 800e9ca:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	f107 0214 	add.w	r2, r7, #20
 800e9d2:	4611      	mov	r1, r2
 800e9d4:	4618      	mov	r0, r3
 800e9d6:	f7ff fdb3 	bl	800e540 <validate>
 800e9da:	4603      	mov	r3, r0
 800e9dc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800e9e0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d107      	bne.n	800e9f8 <f_read+0x44>
 800e9e8:	68fb      	ldr	r3, [r7, #12]
 800e9ea:	7d5b      	ldrb	r3, [r3, #21]
 800e9ec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e9f0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d002      	beq.n	800e9fe <f_read+0x4a>
 800e9f8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e9fc:	e115      	b.n	800ec2a <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	7d1b      	ldrb	r3, [r3, #20]
 800ea02:	f003 0301 	and.w	r3, r3, #1
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d101      	bne.n	800ea0e <f_read+0x5a>
 800ea0a:	2307      	movs	r3, #7
 800ea0c:	e10d      	b.n	800ec2a <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	68da      	ldr	r2, [r3, #12]
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	699b      	ldr	r3, [r3, #24]
 800ea16:	1ad3      	subs	r3, r2, r3
 800ea18:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800ea1a:	687a      	ldr	r2, [r7, #4]
 800ea1c:	6a3b      	ldr	r3, [r7, #32]
 800ea1e:	429a      	cmp	r2, r3
 800ea20:	f240 80fe 	bls.w	800ec20 <f_read+0x26c>
 800ea24:	6a3b      	ldr	r3, [r7, #32]
 800ea26:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800ea28:	e0fa      	b.n	800ec20 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	699b      	ldr	r3, [r3, #24]
 800ea2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	f040 80c6 	bne.w	800ebc4 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	699b      	ldr	r3, [r3, #24]
 800ea3c:	0a5b      	lsrs	r3, r3, #9
 800ea3e:	697a      	ldr	r2, [r7, #20]
 800ea40:	8952      	ldrh	r2, [r2, #10]
 800ea42:	3a01      	subs	r2, #1
 800ea44:	4013      	ands	r3, r2
 800ea46:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800ea48:	69fb      	ldr	r3, [r7, #28]
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d12f      	bne.n	800eaae <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	699b      	ldr	r3, [r3, #24]
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d103      	bne.n	800ea5e <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	689b      	ldr	r3, [r3, #8]
 800ea5a:	633b      	str	r3, [r7, #48]	; 0x30
 800ea5c:	e013      	b.n	800ea86 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d007      	beq.n	800ea76 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	699b      	ldr	r3, [r3, #24]
 800ea6a:	4619      	mov	r1, r3
 800ea6c:	68f8      	ldr	r0, [r7, #12]
 800ea6e:	f7fe f931 	bl	800ccd4 <clmt_clust>
 800ea72:	6338      	str	r0, [r7, #48]	; 0x30
 800ea74:	e007      	b.n	800ea86 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800ea76:	68fa      	ldr	r2, [r7, #12]
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	69db      	ldr	r3, [r3, #28]
 800ea7c:	4619      	mov	r1, r3
 800ea7e:	4610      	mov	r0, r2
 800ea80:	f7fd fe99 	bl	800c7b6 <get_fat>
 800ea84:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800ea86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea88:	2b01      	cmp	r3, #1
 800ea8a:	d804      	bhi.n	800ea96 <f_read+0xe2>
 800ea8c:	68fb      	ldr	r3, [r7, #12]
 800ea8e:	2202      	movs	r2, #2
 800ea90:	755a      	strb	r2, [r3, #21]
 800ea92:	2302      	movs	r3, #2
 800ea94:	e0c9      	b.n	800ec2a <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ea96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea9c:	d104      	bne.n	800eaa8 <f_read+0xf4>
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	2201      	movs	r2, #1
 800eaa2:	755a      	strb	r2, [r3, #21]
 800eaa4:	2301      	movs	r3, #1
 800eaa6:	e0c0      	b.n	800ec2a <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eaac:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800eaae:	697a      	ldr	r2, [r7, #20]
 800eab0:	68fb      	ldr	r3, [r7, #12]
 800eab2:	69db      	ldr	r3, [r3, #28]
 800eab4:	4619      	mov	r1, r3
 800eab6:	4610      	mov	r0, r2
 800eab8:	f7fd fe5e 	bl	800c778 <clust2sect>
 800eabc:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800eabe:	69bb      	ldr	r3, [r7, #24]
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d104      	bne.n	800eace <f_read+0x11a>
 800eac4:	68fb      	ldr	r3, [r7, #12]
 800eac6:	2202      	movs	r2, #2
 800eac8:	755a      	strb	r2, [r3, #21]
 800eaca:	2302      	movs	r3, #2
 800eacc:	e0ad      	b.n	800ec2a <f_read+0x276>
			sect += csect;
 800eace:	69ba      	ldr	r2, [r7, #24]
 800ead0:	69fb      	ldr	r3, [r7, #28]
 800ead2:	4413      	add	r3, r2
 800ead4:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	0a5b      	lsrs	r3, r3, #9
 800eada:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800eadc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d039      	beq.n	800eb56 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800eae2:	69fa      	ldr	r2, [r7, #28]
 800eae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eae6:	4413      	add	r3, r2
 800eae8:	697a      	ldr	r2, [r7, #20]
 800eaea:	8952      	ldrh	r2, [r2, #10]
 800eaec:	4293      	cmp	r3, r2
 800eaee:	d905      	bls.n	800eafc <f_read+0x148>
					cc = fs->csize - csect;
 800eaf0:	697b      	ldr	r3, [r7, #20]
 800eaf2:	895b      	ldrh	r3, [r3, #10]
 800eaf4:	461a      	mov	r2, r3
 800eaf6:	69fb      	ldr	r3, [r7, #28]
 800eaf8:	1ad3      	subs	r3, r2, r3
 800eafa:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800eafc:	697b      	ldr	r3, [r7, #20]
 800eafe:	7858      	ldrb	r0, [r3, #1]
 800eb00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb02:	69ba      	ldr	r2, [r7, #24]
 800eb04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800eb06:	f7fd fa8d 	bl	800c024 <disk_read>
 800eb0a:	4603      	mov	r3, r0
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d004      	beq.n	800eb1a <f_read+0x166>
 800eb10:	68fb      	ldr	r3, [r7, #12]
 800eb12:	2201      	movs	r2, #1
 800eb14:	755a      	strb	r2, [r3, #21]
 800eb16:	2301      	movs	r3, #1
 800eb18:	e087      	b.n	800ec2a <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	7d1b      	ldrb	r3, [r3, #20]
 800eb1e:	b25b      	sxtb	r3, r3
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	da14      	bge.n	800eb4e <f_read+0x19a>
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	6a1a      	ldr	r2, [r3, #32]
 800eb28:	69bb      	ldr	r3, [r7, #24]
 800eb2a:	1ad3      	subs	r3, r2, r3
 800eb2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eb2e:	429a      	cmp	r2, r3
 800eb30:	d90d      	bls.n	800eb4e <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	6a1a      	ldr	r2, [r3, #32]
 800eb36:	69bb      	ldr	r3, [r7, #24]
 800eb38:	1ad3      	subs	r3, r2, r3
 800eb3a:	025b      	lsls	r3, r3, #9
 800eb3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eb3e:	18d0      	adds	r0, r2, r3
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	3330      	adds	r3, #48	; 0x30
 800eb44:	f44f 7200 	mov.w	r2, #512	; 0x200
 800eb48:	4619      	mov	r1, r3
 800eb4a:	f7fd fb4b 	bl	800c1e4 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800eb4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb50:	025b      	lsls	r3, r3, #9
 800eb52:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800eb54:	e050      	b.n	800ebf8 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	6a1b      	ldr	r3, [r3, #32]
 800eb5a:	69ba      	ldr	r2, [r7, #24]
 800eb5c:	429a      	cmp	r2, r3
 800eb5e:	d02e      	beq.n	800ebbe <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	7d1b      	ldrb	r3, [r3, #20]
 800eb64:	b25b      	sxtb	r3, r3
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	da18      	bge.n	800eb9c <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800eb6a:	697b      	ldr	r3, [r7, #20]
 800eb6c:	7858      	ldrb	r0, [r3, #1]
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	6a1a      	ldr	r2, [r3, #32]
 800eb78:	2301      	movs	r3, #1
 800eb7a:	f7fd fa73 	bl	800c064 <disk_write>
 800eb7e:	4603      	mov	r3, r0
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d004      	beq.n	800eb8e <f_read+0x1da>
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	2201      	movs	r2, #1
 800eb88:	755a      	strb	r2, [r3, #21]
 800eb8a:	2301      	movs	r3, #1
 800eb8c:	e04d      	b.n	800ec2a <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	7d1b      	ldrb	r3, [r3, #20]
 800eb92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eb96:	b2da      	uxtb	r2, r3
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800eb9c:	697b      	ldr	r3, [r7, #20]
 800eb9e:	7858      	ldrb	r0, [r3, #1]
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800eba6:	2301      	movs	r3, #1
 800eba8:	69ba      	ldr	r2, [r7, #24]
 800ebaa:	f7fd fa3b 	bl	800c024 <disk_read>
 800ebae:	4603      	mov	r3, r0
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d004      	beq.n	800ebbe <f_read+0x20a>
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	2201      	movs	r2, #1
 800ebb8:	755a      	strb	r2, [r3, #21]
 800ebba:	2301      	movs	r3, #1
 800ebbc:	e035      	b.n	800ec2a <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	69ba      	ldr	r2, [r7, #24]
 800ebc2:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	699b      	ldr	r3, [r3, #24]
 800ebc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ebcc:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800ebd0:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800ebd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	429a      	cmp	r2, r3
 800ebd8:	d901      	bls.n	800ebde <f_read+0x22a>
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	699b      	ldr	r3, [r3, #24]
 800ebe8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ebec:	4413      	add	r3, r2
 800ebee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ebf0:	4619      	mov	r1, r3
 800ebf2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ebf4:	f7fd faf6 	bl	800c1e4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800ebf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ebfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebfc:	4413      	add	r3, r2
 800ebfe:	627b      	str	r3, [r7, #36]	; 0x24
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	699a      	ldr	r2, [r3, #24]
 800ec04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec06:	441a      	add	r2, r3
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	619a      	str	r2, [r3, #24]
 800ec0c:	683b      	ldr	r3, [r7, #0]
 800ec0e:	681a      	ldr	r2, [r3, #0]
 800ec10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec12:	441a      	add	r2, r3
 800ec14:	683b      	ldr	r3, [r7, #0]
 800ec16:	601a      	str	r2, [r3, #0]
 800ec18:	687a      	ldr	r2, [r7, #4]
 800ec1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec1c:	1ad3      	subs	r3, r2, r3
 800ec1e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	f47f af01 	bne.w	800ea2a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800ec28:	2300      	movs	r3, #0
}
 800ec2a:	4618      	mov	r0, r3
 800ec2c:	3738      	adds	r7, #56	; 0x38
 800ec2e:	46bd      	mov	sp, r7
 800ec30:	bd80      	pop	{r7, pc}

0800ec32 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800ec32:	b580      	push	{r7, lr}
 800ec34:	b086      	sub	sp, #24
 800ec36:	af00      	add	r7, sp, #0
 800ec38:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	f107 0208 	add.w	r2, r7, #8
 800ec40:	4611      	mov	r1, r2
 800ec42:	4618      	mov	r0, r3
 800ec44:	f7ff fc7c 	bl	800e540 <validate>
 800ec48:	4603      	mov	r3, r0
 800ec4a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ec4c:	7dfb      	ldrb	r3, [r7, #23]
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d168      	bne.n	800ed24 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	7d1b      	ldrb	r3, [r3, #20]
 800ec56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d062      	beq.n	800ed24 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	7d1b      	ldrb	r3, [r3, #20]
 800ec62:	b25b      	sxtb	r3, r3
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	da15      	bge.n	800ec94 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800ec68:	68bb      	ldr	r3, [r7, #8]
 800ec6a:	7858      	ldrb	r0, [r3, #1]
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	6a1a      	ldr	r2, [r3, #32]
 800ec76:	2301      	movs	r3, #1
 800ec78:	f7fd f9f4 	bl	800c064 <disk_write>
 800ec7c:	4603      	mov	r3, r0
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d001      	beq.n	800ec86 <f_sync+0x54>
 800ec82:	2301      	movs	r3, #1
 800ec84:	e04f      	b.n	800ed26 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	7d1b      	ldrb	r3, [r3, #20]
 800ec8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ec8e:	b2da      	uxtb	r2, r3
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800ec94:	f7fa f876 	bl	8008d84 <get_fattime>
 800ec98:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800ec9a:	68ba      	ldr	r2, [r7, #8]
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eca0:	4619      	mov	r1, r3
 800eca2:	4610      	mov	r0, r2
 800eca4:	f7fd fccc 	bl	800c640 <move_window>
 800eca8:	4603      	mov	r3, r0
 800ecaa:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800ecac:	7dfb      	ldrb	r3, [r7, #23]
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d138      	bne.n	800ed24 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ecb6:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	330b      	adds	r3, #11
 800ecbc:	781a      	ldrb	r2, [r3, #0]
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	330b      	adds	r3, #11
 800ecc2:	f042 0220 	orr.w	r2, r2, #32
 800ecc6:	b2d2      	uxtb	r2, r2
 800ecc8:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	6818      	ldr	r0, [r3, #0]
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	689b      	ldr	r3, [r3, #8]
 800ecd2:	461a      	mov	r2, r3
 800ecd4:	68f9      	ldr	r1, [r7, #12]
 800ecd6:	f7fe f9d7 	bl	800d088 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	f103 021c 	add.w	r2, r3, #28
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	68db      	ldr	r3, [r3, #12]
 800ece4:	4619      	mov	r1, r3
 800ece6:	4610      	mov	r0, r2
 800ece8:	f7fd fa50 	bl	800c18c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	3316      	adds	r3, #22
 800ecf0:	6939      	ldr	r1, [r7, #16]
 800ecf2:	4618      	mov	r0, r3
 800ecf4:	f7fd fa4a 	bl	800c18c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	3312      	adds	r3, #18
 800ecfc:	2100      	movs	r1, #0
 800ecfe:	4618      	mov	r0, r3
 800ed00:	f7fd fa29 	bl	800c156 <st_word>
					fs->wflag = 1;
 800ed04:	68bb      	ldr	r3, [r7, #8]
 800ed06:	2201      	movs	r2, #1
 800ed08:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800ed0a:	68bb      	ldr	r3, [r7, #8]
 800ed0c:	4618      	mov	r0, r3
 800ed0e:	f7fd fcc5 	bl	800c69c <sync_fs>
 800ed12:	4603      	mov	r3, r0
 800ed14:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	7d1b      	ldrb	r3, [r3, #20]
 800ed1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ed1e:	b2da      	uxtb	r2, r3
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800ed24:	7dfb      	ldrb	r3, [r7, #23]
}
 800ed26:	4618      	mov	r0, r3
 800ed28:	3718      	adds	r7, #24
 800ed2a:	46bd      	mov	sp, r7
 800ed2c:	bd80      	pop	{r7, pc}

0800ed2e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800ed2e:	b580      	push	{r7, lr}
 800ed30:	b084      	sub	sp, #16
 800ed32:	af00      	add	r7, sp, #0
 800ed34:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800ed36:	6878      	ldr	r0, [r7, #4]
 800ed38:	f7ff ff7b 	bl	800ec32 <f_sync>
 800ed3c:	4603      	mov	r3, r0
 800ed3e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800ed40:	7bfb      	ldrb	r3, [r7, #15]
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d118      	bne.n	800ed78 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	f107 0208 	add.w	r2, r7, #8
 800ed4c:	4611      	mov	r1, r2
 800ed4e:	4618      	mov	r0, r3
 800ed50:	f7ff fbf6 	bl	800e540 <validate>
 800ed54:	4603      	mov	r3, r0
 800ed56:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ed58:	7bfb      	ldrb	r3, [r7, #15]
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d10c      	bne.n	800ed78 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	691b      	ldr	r3, [r3, #16]
 800ed62:	4618      	mov	r0, r3
 800ed64:	f7fd fbc8 	bl	800c4f8 <dec_lock>
 800ed68:	4603      	mov	r3, r0
 800ed6a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800ed6c:	7bfb      	ldrb	r3, [r7, #15]
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d102      	bne.n	800ed78 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	2200      	movs	r2, #0
 800ed76:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800ed78:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed7a:	4618      	mov	r0, r3
 800ed7c:	3710      	adds	r7, #16
 800ed7e:	46bd      	mov	sp, r7
 800ed80:	bd80      	pop	{r7, pc}

0800ed82 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800ed82:	b580      	push	{r7, lr}
 800ed84:	b090      	sub	sp, #64	; 0x40
 800ed86:	af00      	add	r7, sp, #0
 800ed88:	6078      	str	r0, [r7, #4]
 800ed8a:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	f107 0208 	add.w	r2, r7, #8
 800ed92:	4611      	mov	r1, r2
 800ed94:	4618      	mov	r0, r3
 800ed96:	f7ff fbd3 	bl	800e540 <validate>
 800ed9a:	4603      	mov	r3, r0
 800ed9c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800eda0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d103      	bne.n	800edb0 <f_lseek+0x2e>
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	7d5b      	ldrb	r3, [r3, #21]
 800edac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800edb0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d002      	beq.n	800edbe <f_lseek+0x3c>
 800edb8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800edbc:	e1e6      	b.n	800f18c <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	f000 80d1 	beq.w	800ef6a <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800edc8:	683b      	ldr	r3, [r7, #0]
 800edca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800edce:	d15a      	bne.n	800ee86 <f_lseek+0x104>
			tbl = fp->cltbl;
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800edd4:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800edd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edd8:	1d1a      	adds	r2, r3, #4
 800edda:	627a      	str	r2, [r7, #36]	; 0x24
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	617b      	str	r3, [r7, #20]
 800ede0:	2302      	movs	r3, #2
 800ede2:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	689b      	ldr	r3, [r3, #8]
 800ede8:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800edea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edec:	2b00      	cmp	r3, #0
 800edee:	d03a      	beq.n	800ee66 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800edf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edf2:	613b      	str	r3, [r7, #16]
 800edf4:	2300      	movs	r3, #0
 800edf6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800edf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edfa:	3302      	adds	r3, #2
 800edfc:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800edfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee00:	60fb      	str	r3, [r7, #12]
 800ee02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee04:	3301      	adds	r3, #1
 800ee06:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ee0c:	4618      	mov	r0, r3
 800ee0e:	f7fd fcd2 	bl	800c7b6 <get_fat>
 800ee12:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800ee14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee16:	2b01      	cmp	r3, #1
 800ee18:	d804      	bhi.n	800ee24 <f_lseek+0xa2>
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	2202      	movs	r2, #2
 800ee1e:	755a      	strb	r2, [r3, #21]
 800ee20:	2302      	movs	r3, #2
 800ee22:	e1b3      	b.n	800f18c <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ee24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee2a:	d104      	bne.n	800ee36 <f_lseek+0xb4>
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	2201      	movs	r2, #1
 800ee30:	755a      	strb	r2, [r3, #21]
 800ee32:	2301      	movs	r3, #1
 800ee34:	e1aa      	b.n	800f18c <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800ee36:	68fb      	ldr	r3, [r7, #12]
 800ee38:	3301      	adds	r3, #1
 800ee3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ee3c:	429a      	cmp	r2, r3
 800ee3e:	d0de      	beq.n	800edfe <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800ee40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ee42:	697b      	ldr	r3, [r7, #20]
 800ee44:	429a      	cmp	r2, r3
 800ee46:	d809      	bhi.n	800ee5c <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800ee48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee4a:	1d1a      	adds	r2, r3, #4
 800ee4c:	627a      	str	r2, [r7, #36]	; 0x24
 800ee4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ee50:	601a      	str	r2, [r3, #0]
 800ee52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee54:	1d1a      	adds	r2, r3, #4
 800ee56:	627a      	str	r2, [r7, #36]	; 0x24
 800ee58:	693a      	ldr	r2, [r7, #16]
 800ee5a:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800ee5c:	68bb      	ldr	r3, [r7, #8]
 800ee5e:	699b      	ldr	r3, [r3, #24]
 800ee60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ee62:	429a      	cmp	r2, r3
 800ee64:	d3c4      	bcc.n	800edf0 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ee6c:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800ee6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ee70:	697b      	ldr	r3, [r7, #20]
 800ee72:	429a      	cmp	r2, r3
 800ee74:	d803      	bhi.n	800ee7e <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800ee76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee78:	2200      	movs	r2, #0
 800ee7a:	601a      	str	r2, [r3, #0]
 800ee7c:	e184      	b.n	800f188 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800ee7e:	2311      	movs	r3, #17
 800ee80:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800ee84:	e180      	b.n	800f188 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	68db      	ldr	r3, [r3, #12]
 800ee8a:	683a      	ldr	r2, [r7, #0]
 800ee8c:	429a      	cmp	r2, r3
 800ee8e:	d902      	bls.n	800ee96 <f_lseek+0x114>
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	68db      	ldr	r3, [r3, #12]
 800ee94:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	683a      	ldr	r2, [r7, #0]
 800ee9a:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800ee9c:	683b      	ldr	r3, [r7, #0]
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	f000 8172 	beq.w	800f188 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800eea4:	683b      	ldr	r3, [r7, #0]
 800eea6:	3b01      	subs	r3, #1
 800eea8:	4619      	mov	r1, r3
 800eeaa:	6878      	ldr	r0, [r7, #4]
 800eeac:	f7fd ff12 	bl	800ccd4 <clmt_clust>
 800eeb0:	4602      	mov	r2, r0
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800eeb6:	68ba      	ldr	r2, [r7, #8]
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	69db      	ldr	r3, [r3, #28]
 800eebc:	4619      	mov	r1, r3
 800eebe:	4610      	mov	r0, r2
 800eec0:	f7fd fc5a 	bl	800c778 <clust2sect>
 800eec4:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800eec6:	69bb      	ldr	r3, [r7, #24]
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d104      	bne.n	800eed6 <f_lseek+0x154>
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	2202      	movs	r2, #2
 800eed0:	755a      	strb	r2, [r3, #21]
 800eed2:	2302      	movs	r3, #2
 800eed4:	e15a      	b.n	800f18c <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800eed6:	683b      	ldr	r3, [r7, #0]
 800eed8:	3b01      	subs	r3, #1
 800eeda:	0a5b      	lsrs	r3, r3, #9
 800eedc:	68ba      	ldr	r2, [r7, #8]
 800eede:	8952      	ldrh	r2, [r2, #10]
 800eee0:	3a01      	subs	r2, #1
 800eee2:	4013      	ands	r3, r2
 800eee4:	69ba      	ldr	r2, [r7, #24]
 800eee6:	4413      	add	r3, r2
 800eee8:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	699b      	ldr	r3, [r3, #24]
 800eeee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	f000 8148 	beq.w	800f188 <f_lseek+0x406>
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	6a1b      	ldr	r3, [r3, #32]
 800eefc:	69ba      	ldr	r2, [r7, #24]
 800eefe:	429a      	cmp	r2, r3
 800ef00:	f000 8142 	beq.w	800f188 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	7d1b      	ldrb	r3, [r3, #20]
 800ef08:	b25b      	sxtb	r3, r3
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	da18      	bge.n	800ef40 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ef0e:	68bb      	ldr	r3, [r7, #8]
 800ef10:	7858      	ldrb	r0, [r3, #1]
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	6a1a      	ldr	r2, [r3, #32]
 800ef1c:	2301      	movs	r3, #1
 800ef1e:	f7fd f8a1 	bl	800c064 <disk_write>
 800ef22:	4603      	mov	r3, r0
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d004      	beq.n	800ef32 <f_lseek+0x1b0>
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	2201      	movs	r2, #1
 800ef2c:	755a      	strb	r2, [r3, #21]
 800ef2e:	2301      	movs	r3, #1
 800ef30:	e12c      	b.n	800f18c <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	7d1b      	ldrb	r3, [r3, #20]
 800ef36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ef3a:	b2da      	uxtb	r2, r3
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800ef40:	68bb      	ldr	r3, [r7, #8]
 800ef42:	7858      	ldrb	r0, [r3, #1]
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ef4a:	2301      	movs	r3, #1
 800ef4c:	69ba      	ldr	r2, [r7, #24]
 800ef4e:	f7fd f869 	bl	800c024 <disk_read>
 800ef52:	4603      	mov	r3, r0
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d004      	beq.n	800ef62 <f_lseek+0x1e0>
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	2201      	movs	r2, #1
 800ef5c:	755a      	strb	r2, [r3, #21]
 800ef5e:	2301      	movs	r3, #1
 800ef60:	e114      	b.n	800f18c <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	69ba      	ldr	r2, [r7, #24]
 800ef66:	621a      	str	r2, [r3, #32]
 800ef68:	e10e      	b.n	800f188 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	68db      	ldr	r3, [r3, #12]
 800ef6e:	683a      	ldr	r2, [r7, #0]
 800ef70:	429a      	cmp	r2, r3
 800ef72:	d908      	bls.n	800ef86 <f_lseek+0x204>
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	7d1b      	ldrb	r3, [r3, #20]
 800ef78:	f003 0302 	and.w	r3, r3, #2
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d102      	bne.n	800ef86 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	68db      	ldr	r3, [r3, #12]
 800ef84:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	699b      	ldr	r3, [r3, #24]
 800ef8a:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800ef8c:	2300      	movs	r3, #0
 800ef8e:	637b      	str	r3, [r7, #52]	; 0x34
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ef94:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800ef96:	683b      	ldr	r3, [r7, #0]
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	f000 80a7 	beq.w	800f0ec <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800ef9e:	68bb      	ldr	r3, [r7, #8]
 800efa0:	895b      	ldrh	r3, [r3, #10]
 800efa2:	025b      	lsls	r3, r3, #9
 800efa4:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800efa6:	6a3b      	ldr	r3, [r7, #32]
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d01b      	beq.n	800efe4 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800efac:	683b      	ldr	r3, [r7, #0]
 800efae:	1e5a      	subs	r2, r3, #1
 800efb0:	69fb      	ldr	r3, [r7, #28]
 800efb2:	fbb2 f2f3 	udiv	r2, r2, r3
 800efb6:	6a3b      	ldr	r3, [r7, #32]
 800efb8:	1e59      	subs	r1, r3, #1
 800efba:	69fb      	ldr	r3, [r7, #28]
 800efbc:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800efc0:	429a      	cmp	r2, r3
 800efc2:	d30f      	bcc.n	800efe4 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800efc4:	6a3b      	ldr	r3, [r7, #32]
 800efc6:	1e5a      	subs	r2, r3, #1
 800efc8:	69fb      	ldr	r3, [r7, #28]
 800efca:	425b      	negs	r3, r3
 800efcc:	401a      	ands	r2, r3
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	699b      	ldr	r3, [r3, #24]
 800efd6:	683a      	ldr	r2, [r7, #0]
 800efd8:	1ad3      	subs	r3, r2, r3
 800efda:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	69db      	ldr	r3, [r3, #28]
 800efe0:	63bb      	str	r3, [r7, #56]	; 0x38
 800efe2:	e022      	b.n	800f02a <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	689b      	ldr	r3, [r3, #8]
 800efe8:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800efea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efec:	2b00      	cmp	r3, #0
 800efee:	d119      	bne.n	800f024 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	2100      	movs	r1, #0
 800eff4:	4618      	mov	r0, r3
 800eff6:	f7fd fdd5 	bl	800cba4 <create_chain>
 800effa:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800effc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800effe:	2b01      	cmp	r3, #1
 800f000:	d104      	bne.n	800f00c <f_lseek+0x28a>
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	2202      	movs	r2, #2
 800f006:	755a      	strb	r2, [r3, #21]
 800f008:	2302      	movs	r3, #2
 800f00a:	e0bf      	b.n	800f18c <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f00c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f00e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f012:	d104      	bne.n	800f01e <f_lseek+0x29c>
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	2201      	movs	r2, #1
 800f018:	755a      	strb	r2, [r3, #21]
 800f01a:	2301      	movs	r3, #1
 800f01c:	e0b6      	b.n	800f18c <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f022:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f028:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800f02a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d05d      	beq.n	800f0ec <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800f030:	e03a      	b.n	800f0a8 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800f032:	683a      	ldr	r2, [r7, #0]
 800f034:	69fb      	ldr	r3, [r7, #28]
 800f036:	1ad3      	subs	r3, r2, r3
 800f038:	603b      	str	r3, [r7, #0]
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	699a      	ldr	r2, [r3, #24]
 800f03e:	69fb      	ldr	r3, [r7, #28]
 800f040:	441a      	add	r2, r3
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	7d1b      	ldrb	r3, [r3, #20]
 800f04a:	f003 0302 	and.w	r3, r3, #2
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d00b      	beq.n	800f06a <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f056:	4618      	mov	r0, r3
 800f058:	f7fd fda4 	bl	800cba4 <create_chain>
 800f05c:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800f05e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f060:	2b00      	cmp	r3, #0
 800f062:	d108      	bne.n	800f076 <f_lseek+0x2f4>
							ofs = 0; break;
 800f064:	2300      	movs	r3, #0
 800f066:	603b      	str	r3, [r7, #0]
 800f068:	e022      	b.n	800f0b0 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f06e:	4618      	mov	r0, r3
 800f070:	f7fd fba1 	bl	800c7b6 <get_fat>
 800f074:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f07c:	d104      	bne.n	800f088 <f_lseek+0x306>
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	2201      	movs	r2, #1
 800f082:	755a      	strb	r2, [r3, #21]
 800f084:	2301      	movs	r3, #1
 800f086:	e081      	b.n	800f18c <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800f088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f08a:	2b01      	cmp	r3, #1
 800f08c:	d904      	bls.n	800f098 <f_lseek+0x316>
 800f08e:	68bb      	ldr	r3, [r7, #8]
 800f090:	699b      	ldr	r3, [r3, #24]
 800f092:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f094:	429a      	cmp	r2, r3
 800f096:	d304      	bcc.n	800f0a2 <f_lseek+0x320>
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	2202      	movs	r2, #2
 800f09c:	755a      	strb	r2, [r3, #21]
 800f09e:	2302      	movs	r3, #2
 800f0a0:	e074      	b.n	800f18c <f_lseek+0x40a>
					fp->clust = clst;
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f0a6:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800f0a8:	683a      	ldr	r2, [r7, #0]
 800f0aa:	69fb      	ldr	r3, [r7, #28]
 800f0ac:	429a      	cmp	r2, r3
 800f0ae:	d8c0      	bhi.n	800f032 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	699a      	ldr	r2, [r3, #24]
 800f0b4:	683b      	ldr	r3, [r7, #0]
 800f0b6:	441a      	add	r2, r3
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800f0bc:	683b      	ldr	r3, [r7, #0]
 800f0be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d012      	beq.n	800f0ec <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800f0c6:	68bb      	ldr	r3, [r7, #8]
 800f0c8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f0ca:	4618      	mov	r0, r3
 800f0cc:	f7fd fb54 	bl	800c778 <clust2sect>
 800f0d0:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800f0d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d104      	bne.n	800f0e2 <f_lseek+0x360>
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	2202      	movs	r2, #2
 800f0dc:	755a      	strb	r2, [r3, #21]
 800f0de:	2302      	movs	r3, #2
 800f0e0:	e054      	b.n	800f18c <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800f0e2:	683b      	ldr	r3, [r7, #0]
 800f0e4:	0a5b      	lsrs	r3, r3, #9
 800f0e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f0e8:	4413      	add	r3, r2
 800f0ea:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	699a      	ldr	r2, [r3, #24]
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	68db      	ldr	r3, [r3, #12]
 800f0f4:	429a      	cmp	r2, r3
 800f0f6:	d90a      	bls.n	800f10e <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	699a      	ldr	r2, [r3, #24]
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	7d1b      	ldrb	r3, [r3, #20]
 800f104:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f108:	b2da      	uxtb	r2, r3
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	699b      	ldr	r3, [r3, #24]
 800f112:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f116:	2b00      	cmp	r3, #0
 800f118:	d036      	beq.n	800f188 <f_lseek+0x406>
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	6a1b      	ldr	r3, [r3, #32]
 800f11e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f120:	429a      	cmp	r2, r3
 800f122:	d031      	beq.n	800f188 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	7d1b      	ldrb	r3, [r3, #20]
 800f128:	b25b      	sxtb	r3, r3
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	da18      	bge.n	800f160 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f12e:	68bb      	ldr	r3, [r7, #8]
 800f130:	7858      	ldrb	r0, [r3, #1]
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	6a1a      	ldr	r2, [r3, #32]
 800f13c:	2301      	movs	r3, #1
 800f13e:	f7fc ff91 	bl	800c064 <disk_write>
 800f142:	4603      	mov	r3, r0
 800f144:	2b00      	cmp	r3, #0
 800f146:	d004      	beq.n	800f152 <f_lseek+0x3d0>
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	2201      	movs	r2, #1
 800f14c:	755a      	strb	r2, [r3, #21]
 800f14e:	2301      	movs	r3, #1
 800f150:	e01c      	b.n	800f18c <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	7d1b      	ldrb	r3, [r3, #20]
 800f156:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f15a:	b2da      	uxtb	r2, r3
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800f160:	68bb      	ldr	r3, [r7, #8]
 800f162:	7858      	ldrb	r0, [r3, #1]
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f16a:	2301      	movs	r3, #1
 800f16c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f16e:	f7fc ff59 	bl	800c024 <disk_read>
 800f172:	4603      	mov	r3, r0
 800f174:	2b00      	cmp	r3, #0
 800f176:	d004      	beq.n	800f182 <f_lseek+0x400>
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	2201      	movs	r2, #1
 800f17c:	755a      	strb	r2, [r3, #21]
 800f17e:	2301      	movs	r3, #1
 800f180:	e004      	b.n	800f18c <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f186:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800f188:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800f18c:	4618      	mov	r0, r3
 800f18e:	3740      	adds	r7, #64	; 0x40
 800f190:	46bd      	mov	sp, r7
 800f192:	bd80      	pop	{r7, pc}

0800f194 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800f194:	b580      	push	{r7, lr}
 800f196:	b086      	sub	sp, #24
 800f198:	af00      	add	r7, sp, #0
 800f19a:	6078      	str	r0, [r7, #4]
 800f19c:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d101      	bne.n	800f1a8 <f_opendir+0x14>
 800f1a4:	2309      	movs	r3, #9
 800f1a6:	e064      	b.n	800f272 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800f1ac:	f107 010c 	add.w	r1, r7, #12
 800f1b0:	463b      	mov	r3, r7
 800f1b2:	2200      	movs	r2, #0
 800f1b4:	4618      	mov	r0, r3
 800f1b6:	f7fe ff73 	bl	800e0a0 <find_volume>
 800f1ba:	4603      	mov	r3, r0
 800f1bc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f1be:	7dfb      	ldrb	r3, [r7, #23]
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d14f      	bne.n	800f264 <f_opendir+0xd0>
		obj->fs = fs;
 800f1c4:	68fa      	ldr	r2, [r7, #12]
 800f1c6:	693b      	ldr	r3, [r7, #16]
 800f1c8:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800f1ca:	683b      	ldr	r3, [r7, #0]
 800f1cc:	4619      	mov	r1, r3
 800f1ce:	6878      	ldr	r0, [r7, #4]
 800f1d0:	f7fe fe5a 	bl	800de88 <follow_path>
 800f1d4:	4603      	mov	r3, r0
 800f1d6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800f1d8:	7dfb      	ldrb	r3, [r7, #23]
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d13d      	bne.n	800f25a <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f1e4:	b25b      	sxtb	r3, r3
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	db12      	blt.n	800f210 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800f1ea:	693b      	ldr	r3, [r7, #16]
 800f1ec:	799b      	ldrb	r3, [r3, #6]
 800f1ee:	f003 0310 	and.w	r3, r3, #16
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d00a      	beq.n	800f20c <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800f1f6:	68fa      	ldr	r2, [r7, #12]
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	6a1b      	ldr	r3, [r3, #32]
 800f1fc:	4619      	mov	r1, r3
 800f1fe:	4610      	mov	r0, r2
 800f200:	f7fd ff23 	bl	800d04a <ld_clust>
 800f204:	4602      	mov	r2, r0
 800f206:	693b      	ldr	r3, [r7, #16]
 800f208:	609a      	str	r2, [r3, #8]
 800f20a:	e001      	b.n	800f210 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800f20c:	2305      	movs	r3, #5
 800f20e:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800f210:	7dfb      	ldrb	r3, [r7, #23]
 800f212:	2b00      	cmp	r3, #0
 800f214:	d121      	bne.n	800f25a <f_opendir+0xc6>
				obj->id = fs->id;
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	88da      	ldrh	r2, [r3, #6]
 800f21a:	693b      	ldr	r3, [r7, #16]
 800f21c:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800f21e:	2100      	movs	r1, #0
 800f220:	6878      	ldr	r0, [r7, #4]
 800f222:	f7fd fd8b 	bl	800cd3c <dir_sdi>
 800f226:	4603      	mov	r3, r0
 800f228:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800f22a:	7dfb      	ldrb	r3, [r7, #23]
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d114      	bne.n	800f25a <f_opendir+0xc6>
					if (obj->sclust) {
 800f230:	693b      	ldr	r3, [r7, #16]
 800f232:	689b      	ldr	r3, [r3, #8]
 800f234:	2b00      	cmp	r3, #0
 800f236:	d00d      	beq.n	800f254 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800f238:	2100      	movs	r1, #0
 800f23a:	6878      	ldr	r0, [r7, #4]
 800f23c:	f7fd f8ce 	bl	800c3dc <inc_lock>
 800f240:	4602      	mov	r2, r0
 800f242:	693b      	ldr	r3, [r7, #16]
 800f244:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800f246:	693b      	ldr	r3, [r7, #16]
 800f248:	691b      	ldr	r3, [r3, #16]
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d105      	bne.n	800f25a <f_opendir+0xc6>
 800f24e:	2312      	movs	r3, #18
 800f250:	75fb      	strb	r3, [r7, #23]
 800f252:	e002      	b.n	800f25a <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800f254:	693b      	ldr	r3, [r7, #16]
 800f256:	2200      	movs	r2, #0
 800f258:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800f25a:	7dfb      	ldrb	r3, [r7, #23]
 800f25c:	2b04      	cmp	r3, #4
 800f25e:	d101      	bne.n	800f264 <f_opendir+0xd0>
 800f260:	2305      	movs	r3, #5
 800f262:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800f264:	7dfb      	ldrb	r3, [r7, #23]
 800f266:	2b00      	cmp	r3, #0
 800f268:	d002      	beq.n	800f270 <f_opendir+0xdc>
 800f26a:	693b      	ldr	r3, [r7, #16]
 800f26c:	2200      	movs	r2, #0
 800f26e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800f270:	7dfb      	ldrb	r3, [r7, #23]
}
 800f272:	4618      	mov	r0, r3
 800f274:	3718      	adds	r7, #24
 800f276:	46bd      	mov	sp, r7
 800f278:	bd80      	pop	{r7, pc}

0800f27a <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800f27a:	b580      	push	{r7, lr}
 800f27c:	b084      	sub	sp, #16
 800f27e:	af00      	add	r7, sp, #0
 800f280:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	f107 0208 	add.w	r2, r7, #8
 800f288:	4611      	mov	r1, r2
 800f28a:	4618      	mov	r0, r3
 800f28c:	f7ff f958 	bl	800e540 <validate>
 800f290:	4603      	mov	r3, r0
 800f292:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800f294:	7bfb      	ldrb	r3, [r7, #15]
 800f296:	2b00      	cmp	r3, #0
 800f298:	d110      	bne.n	800f2bc <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	691b      	ldr	r3, [r3, #16]
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d006      	beq.n	800f2b0 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	691b      	ldr	r3, [r3, #16]
 800f2a6:	4618      	mov	r0, r3
 800f2a8:	f7fd f926 	bl	800c4f8 <dec_lock>
 800f2ac:	4603      	mov	r3, r0
 800f2ae:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800f2b0:	7bfb      	ldrb	r3, [r7, #15]
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d102      	bne.n	800f2bc <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	2200      	movs	r2, #0
 800f2ba:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800f2bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800f2be:	4618      	mov	r0, r3
 800f2c0:	3710      	adds	r7, #16
 800f2c2:	46bd      	mov	sp, r7
 800f2c4:	bd80      	pop	{r7, pc}

0800f2c6 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800f2c6:	b580      	push	{r7, lr}
 800f2c8:	b084      	sub	sp, #16
 800f2ca:	af00      	add	r7, sp, #0
 800f2cc:	6078      	str	r0, [r7, #4]
 800f2ce:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	f107 0208 	add.w	r2, r7, #8
 800f2d6:	4611      	mov	r1, r2
 800f2d8:	4618      	mov	r0, r3
 800f2da:	f7ff f931 	bl	800e540 <validate>
 800f2de:	4603      	mov	r3, r0
 800f2e0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800f2e2:	7bfb      	ldrb	r3, [r7, #15]
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d126      	bne.n	800f336 <f_readdir+0x70>
		if (!fno) {
 800f2e8:	683b      	ldr	r3, [r7, #0]
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d106      	bne.n	800f2fc <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800f2ee:	2100      	movs	r1, #0
 800f2f0:	6878      	ldr	r0, [r7, #4]
 800f2f2:	f7fd fd23 	bl	800cd3c <dir_sdi>
 800f2f6:	4603      	mov	r3, r0
 800f2f8:	73fb      	strb	r3, [r7, #15]
 800f2fa:	e01c      	b.n	800f336 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800f2fc:	2100      	movs	r1, #0
 800f2fe:	6878      	ldr	r0, [r7, #4]
 800f300:	f7fe f8cd 	bl	800d49e <dir_read>
 800f304:	4603      	mov	r3, r0
 800f306:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800f308:	7bfb      	ldrb	r3, [r7, #15]
 800f30a:	2b04      	cmp	r3, #4
 800f30c:	d101      	bne.n	800f312 <f_readdir+0x4c>
 800f30e:	2300      	movs	r3, #0
 800f310:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800f312:	7bfb      	ldrb	r3, [r7, #15]
 800f314:	2b00      	cmp	r3, #0
 800f316:	d10e      	bne.n	800f336 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800f318:	6839      	ldr	r1, [r7, #0]
 800f31a:	6878      	ldr	r0, [r7, #4]
 800f31c:	f7fe fb1e 	bl	800d95c <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800f320:	2100      	movs	r1, #0
 800f322:	6878      	ldr	r0, [r7, #4]
 800f324:	f7fd fd85 	bl	800ce32 <dir_next>
 800f328:	4603      	mov	r3, r0
 800f32a:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800f32c:	7bfb      	ldrb	r3, [r7, #15]
 800f32e:	2b04      	cmp	r3, #4
 800f330:	d101      	bne.n	800f336 <f_readdir+0x70>
 800f332:	2300      	movs	r3, #0
 800f334:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800f336:	7bfb      	ldrb	r3, [r7, #15]
}
 800f338:	4618      	mov	r0, r3
 800f33a:	3710      	adds	r7, #16
 800f33c:	46bd      	mov	sp, r7
 800f33e:	bd80      	pop	{r7, pc}

0800f340 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800f340:	b480      	push	{r7}
 800f342:	b087      	sub	sp, #28
 800f344:	af00      	add	r7, sp, #0
 800f346:	60f8      	str	r0, [r7, #12]
 800f348:	60b9      	str	r1, [r7, #8]
 800f34a:	4613      	mov	r3, r2
 800f34c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800f34e:	2301      	movs	r3, #1
 800f350:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800f352:	2300      	movs	r3, #0
 800f354:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800f356:	4b1f      	ldr	r3, [pc, #124]	; (800f3d4 <FATFS_LinkDriverEx+0x94>)
 800f358:	7a5b      	ldrb	r3, [r3, #9]
 800f35a:	b2db      	uxtb	r3, r3
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	d131      	bne.n	800f3c4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800f360:	4b1c      	ldr	r3, [pc, #112]	; (800f3d4 <FATFS_LinkDriverEx+0x94>)
 800f362:	7a5b      	ldrb	r3, [r3, #9]
 800f364:	b2db      	uxtb	r3, r3
 800f366:	461a      	mov	r2, r3
 800f368:	4b1a      	ldr	r3, [pc, #104]	; (800f3d4 <FATFS_LinkDriverEx+0x94>)
 800f36a:	2100      	movs	r1, #0
 800f36c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800f36e:	4b19      	ldr	r3, [pc, #100]	; (800f3d4 <FATFS_LinkDriverEx+0x94>)
 800f370:	7a5b      	ldrb	r3, [r3, #9]
 800f372:	b2db      	uxtb	r3, r3
 800f374:	4a17      	ldr	r2, [pc, #92]	; (800f3d4 <FATFS_LinkDriverEx+0x94>)
 800f376:	009b      	lsls	r3, r3, #2
 800f378:	4413      	add	r3, r2
 800f37a:	68fa      	ldr	r2, [r7, #12]
 800f37c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800f37e:	4b15      	ldr	r3, [pc, #84]	; (800f3d4 <FATFS_LinkDriverEx+0x94>)
 800f380:	7a5b      	ldrb	r3, [r3, #9]
 800f382:	b2db      	uxtb	r3, r3
 800f384:	461a      	mov	r2, r3
 800f386:	4b13      	ldr	r3, [pc, #76]	; (800f3d4 <FATFS_LinkDriverEx+0x94>)
 800f388:	4413      	add	r3, r2
 800f38a:	79fa      	ldrb	r2, [r7, #7]
 800f38c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800f38e:	4b11      	ldr	r3, [pc, #68]	; (800f3d4 <FATFS_LinkDriverEx+0x94>)
 800f390:	7a5b      	ldrb	r3, [r3, #9]
 800f392:	b2db      	uxtb	r3, r3
 800f394:	1c5a      	adds	r2, r3, #1
 800f396:	b2d1      	uxtb	r1, r2
 800f398:	4a0e      	ldr	r2, [pc, #56]	; (800f3d4 <FATFS_LinkDriverEx+0x94>)
 800f39a:	7251      	strb	r1, [r2, #9]
 800f39c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800f39e:	7dbb      	ldrb	r3, [r7, #22]
 800f3a0:	3330      	adds	r3, #48	; 0x30
 800f3a2:	b2da      	uxtb	r2, r3
 800f3a4:	68bb      	ldr	r3, [r7, #8]
 800f3a6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800f3a8:	68bb      	ldr	r3, [r7, #8]
 800f3aa:	3301      	adds	r3, #1
 800f3ac:	223a      	movs	r2, #58	; 0x3a
 800f3ae:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800f3b0:	68bb      	ldr	r3, [r7, #8]
 800f3b2:	3302      	adds	r3, #2
 800f3b4:	222f      	movs	r2, #47	; 0x2f
 800f3b6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800f3b8:	68bb      	ldr	r3, [r7, #8]
 800f3ba:	3303      	adds	r3, #3
 800f3bc:	2200      	movs	r2, #0
 800f3be:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800f3c0:	2300      	movs	r3, #0
 800f3c2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800f3c4:	7dfb      	ldrb	r3, [r7, #23]
}
 800f3c6:	4618      	mov	r0, r3
 800f3c8:	371c      	adds	r7, #28
 800f3ca:	46bd      	mov	sp, r7
 800f3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3d0:	4770      	bx	lr
 800f3d2:	bf00      	nop
 800f3d4:	20001dd4 	.word	0x20001dd4

0800f3d8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800f3d8:	b580      	push	{r7, lr}
 800f3da:	b082      	sub	sp, #8
 800f3dc:	af00      	add	r7, sp, #0
 800f3de:	6078      	str	r0, [r7, #4]
 800f3e0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800f3e2:	2200      	movs	r2, #0
 800f3e4:	6839      	ldr	r1, [r7, #0]
 800f3e6:	6878      	ldr	r0, [r7, #4]
 800f3e8:	f7ff ffaa 	bl	800f340 <FATFS_LinkDriverEx>
 800f3ec:	4603      	mov	r3, r0
}
 800f3ee:	4618      	mov	r0, r3
 800f3f0:	3708      	adds	r7, #8
 800f3f2:	46bd      	mov	sp, r7
 800f3f4:	bd80      	pop	{r7, pc}
	...

0800f3f8 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800f3f8:	b480      	push	{r7}
 800f3fa:	b085      	sub	sp, #20
 800f3fc:	af00      	add	r7, sp, #0
 800f3fe:	4603      	mov	r3, r0
 800f400:	6039      	str	r1, [r7, #0]
 800f402:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800f404:	88fb      	ldrh	r3, [r7, #6]
 800f406:	2b7f      	cmp	r3, #127	; 0x7f
 800f408:	d802      	bhi.n	800f410 <ff_convert+0x18>
		c = chr;
 800f40a:	88fb      	ldrh	r3, [r7, #6]
 800f40c:	81fb      	strh	r3, [r7, #14]
 800f40e:	e025      	b.n	800f45c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800f410:	683b      	ldr	r3, [r7, #0]
 800f412:	2b00      	cmp	r3, #0
 800f414:	d00b      	beq.n	800f42e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800f416:	88fb      	ldrh	r3, [r7, #6]
 800f418:	2bff      	cmp	r3, #255	; 0xff
 800f41a:	d805      	bhi.n	800f428 <ff_convert+0x30>
 800f41c:	88fb      	ldrh	r3, [r7, #6]
 800f41e:	3b80      	subs	r3, #128	; 0x80
 800f420:	4a12      	ldr	r2, [pc, #72]	; (800f46c <ff_convert+0x74>)
 800f422:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f426:	e000      	b.n	800f42a <ff_convert+0x32>
 800f428:	2300      	movs	r3, #0
 800f42a:	81fb      	strh	r3, [r7, #14]
 800f42c:	e016      	b.n	800f45c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800f42e:	2300      	movs	r3, #0
 800f430:	81fb      	strh	r3, [r7, #14]
 800f432:	e009      	b.n	800f448 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800f434:	89fb      	ldrh	r3, [r7, #14]
 800f436:	4a0d      	ldr	r2, [pc, #52]	; (800f46c <ff_convert+0x74>)
 800f438:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f43c:	88fa      	ldrh	r2, [r7, #6]
 800f43e:	429a      	cmp	r2, r3
 800f440:	d006      	beq.n	800f450 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800f442:	89fb      	ldrh	r3, [r7, #14]
 800f444:	3301      	adds	r3, #1
 800f446:	81fb      	strh	r3, [r7, #14]
 800f448:	89fb      	ldrh	r3, [r7, #14]
 800f44a:	2b7f      	cmp	r3, #127	; 0x7f
 800f44c:	d9f2      	bls.n	800f434 <ff_convert+0x3c>
 800f44e:	e000      	b.n	800f452 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800f450:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800f452:	89fb      	ldrh	r3, [r7, #14]
 800f454:	3380      	adds	r3, #128	; 0x80
 800f456:	b29b      	uxth	r3, r3
 800f458:	b2db      	uxtb	r3, r3
 800f45a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800f45c:	89fb      	ldrh	r3, [r7, #14]
}
 800f45e:	4618      	mov	r0, r3
 800f460:	3714      	adds	r7, #20
 800f462:	46bd      	mov	sp, r7
 800f464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f468:	4770      	bx	lr
 800f46a:	bf00      	nop
 800f46c:	0801008c 	.word	0x0801008c

0800f470 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800f470:	b480      	push	{r7}
 800f472:	b087      	sub	sp, #28
 800f474:	af00      	add	r7, sp, #0
 800f476:	4603      	mov	r3, r0
 800f478:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800f47a:	88fb      	ldrh	r3, [r7, #6]
 800f47c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f480:	d201      	bcs.n	800f486 <ff_wtoupper+0x16>
 800f482:	4b3e      	ldr	r3, [pc, #248]	; (800f57c <ff_wtoupper+0x10c>)
 800f484:	e000      	b.n	800f488 <ff_wtoupper+0x18>
 800f486:	4b3e      	ldr	r3, [pc, #248]	; (800f580 <ff_wtoupper+0x110>)
 800f488:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800f48a:	697b      	ldr	r3, [r7, #20]
 800f48c:	1c9a      	adds	r2, r3, #2
 800f48e:	617a      	str	r2, [r7, #20]
 800f490:	881b      	ldrh	r3, [r3, #0]
 800f492:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800f494:	8a7b      	ldrh	r3, [r7, #18]
 800f496:	2b00      	cmp	r3, #0
 800f498:	d068      	beq.n	800f56c <ff_wtoupper+0xfc>
 800f49a:	88fa      	ldrh	r2, [r7, #6]
 800f49c:	8a7b      	ldrh	r3, [r7, #18]
 800f49e:	429a      	cmp	r2, r3
 800f4a0:	d364      	bcc.n	800f56c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800f4a2:	697b      	ldr	r3, [r7, #20]
 800f4a4:	1c9a      	adds	r2, r3, #2
 800f4a6:	617a      	str	r2, [r7, #20]
 800f4a8:	881b      	ldrh	r3, [r3, #0]
 800f4aa:	823b      	strh	r3, [r7, #16]
 800f4ac:	8a3b      	ldrh	r3, [r7, #16]
 800f4ae:	0a1b      	lsrs	r3, r3, #8
 800f4b0:	81fb      	strh	r3, [r7, #14]
 800f4b2:	8a3b      	ldrh	r3, [r7, #16]
 800f4b4:	b2db      	uxtb	r3, r3
 800f4b6:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800f4b8:	88fa      	ldrh	r2, [r7, #6]
 800f4ba:	8a79      	ldrh	r1, [r7, #18]
 800f4bc:	8a3b      	ldrh	r3, [r7, #16]
 800f4be:	440b      	add	r3, r1
 800f4c0:	429a      	cmp	r2, r3
 800f4c2:	da49      	bge.n	800f558 <ff_wtoupper+0xe8>
			switch (cmd) {
 800f4c4:	89fb      	ldrh	r3, [r7, #14]
 800f4c6:	2b08      	cmp	r3, #8
 800f4c8:	d84f      	bhi.n	800f56a <ff_wtoupper+0xfa>
 800f4ca:	a201      	add	r2, pc, #4	; (adr r2, 800f4d0 <ff_wtoupper+0x60>)
 800f4cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4d0:	0800f4f5 	.word	0x0800f4f5
 800f4d4:	0800f507 	.word	0x0800f507
 800f4d8:	0800f51d 	.word	0x0800f51d
 800f4dc:	0800f525 	.word	0x0800f525
 800f4e0:	0800f52d 	.word	0x0800f52d
 800f4e4:	0800f535 	.word	0x0800f535
 800f4e8:	0800f53d 	.word	0x0800f53d
 800f4ec:	0800f545 	.word	0x0800f545
 800f4f0:	0800f54d 	.word	0x0800f54d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800f4f4:	88fa      	ldrh	r2, [r7, #6]
 800f4f6:	8a7b      	ldrh	r3, [r7, #18]
 800f4f8:	1ad3      	subs	r3, r2, r3
 800f4fa:	005b      	lsls	r3, r3, #1
 800f4fc:	697a      	ldr	r2, [r7, #20]
 800f4fe:	4413      	add	r3, r2
 800f500:	881b      	ldrh	r3, [r3, #0]
 800f502:	80fb      	strh	r3, [r7, #6]
 800f504:	e027      	b.n	800f556 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800f506:	88fa      	ldrh	r2, [r7, #6]
 800f508:	8a7b      	ldrh	r3, [r7, #18]
 800f50a:	1ad3      	subs	r3, r2, r3
 800f50c:	b29b      	uxth	r3, r3
 800f50e:	f003 0301 	and.w	r3, r3, #1
 800f512:	b29b      	uxth	r3, r3
 800f514:	88fa      	ldrh	r2, [r7, #6]
 800f516:	1ad3      	subs	r3, r2, r3
 800f518:	80fb      	strh	r3, [r7, #6]
 800f51a:	e01c      	b.n	800f556 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800f51c:	88fb      	ldrh	r3, [r7, #6]
 800f51e:	3b10      	subs	r3, #16
 800f520:	80fb      	strh	r3, [r7, #6]
 800f522:	e018      	b.n	800f556 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800f524:	88fb      	ldrh	r3, [r7, #6]
 800f526:	3b20      	subs	r3, #32
 800f528:	80fb      	strh	r3, [r7, #6]
 800f52a:	e014      	b.n	800f556 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800f52c:	88fb      	ldrh	r3, [r7, #6]
 800f52e:	3b30      	subs	r3, #48	; 0x30
 800f530:	80fb      	strh	r3, [r7, #6]
 800f532:	e010      	b.n	800f556 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800f534:	88fb      	ldrh	r3, [r7, #6]
 800f536:	3b1a      	subs	r3, #26
 800f538:	80fb      	strh	r3, [r7, #6]
 800f53a:	e00c      	b.n	800f556 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800f53c:	88fb      	ldrh	r3, [r7, #6]
 800f53e:	3308      	adds	r3, #8
 800f540:	80fb      	strh	r3, [r7, #6]
 800f542:	e008      	b.n	800f556 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800f544:	88fb      	ldrh	r3, [r7, #6]
 800f546:	3b50      	subs	r3, #80	; 0x50
 800f548:	80fb      	strh	r3, [r7, #6]
 800f54a:	e004      	b.n	800f556 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800f54c:	88fb      	ldrh	r3, [r7, #6]
 800f54e:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800f552:	80fb      	strh	r3, [r7, #6]
 800f554:	bf00      	nop
			}
			break;
 800f556:	e008      	b.n	800f56a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800f558:	89fb      	ldrh	r3, [r7, #14]
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d195      	bne.n	800f48a <ff_wtoupper+0x1a>
 800f55e:	8a3b      	ldrh	r3, [r7, #16]
 800f560:	005b      	lsls	r3, r3, #1
 800f562:	697a      	ldr	r2, [r7, #20]
 800f564:	4413      	add	r3, r2
 800f566:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800f568:	e78f      	b.n	800f48a <ff_wtoupper+0x1a>
			break;
 800f56a:	bf00      	nop
	}

	return chr;
 800f56c:	88fb      	ldrh	r3, [r7, #6]
}
 800f56e:	4618      	mov	r0, r3
 800f570:	371c      	adds	r7, #28
 800f572:	46bd      	mov	sp, r7
 800f574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f578:	4770      	bx	lr
 800f57a:	bf00      	nop
 800f57c:	0801018c 	.word	0x0801018c
 800f580:	08010380 	.word	0x08010380

0800f584 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800f584:	b580      	push	{r7, lr}
 800f586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800f588:	2201      	movs	r2, #1
 800f58a:	490e      	ldr	r1, [pc, #56]	; (800f5c4 <MX_USB_HOST_Init+0x40>)
 800f58c:	480e      	ldr	r0, [pc, #56]	; (800f5c8 <MX_USB_HOST_Init+0x44>)
 800f58e:	f7fb f8b5 	bl	800a6fc <USBH_Init>
 800f592:	4603      	mov	r3, r0
 800f594:	2b00      	cmp	r3, #0
 800f596:	d001      	beq.n	800f59c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800f598:	f7f2 f9bc 	bl	8001914 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800f59c:	490b      	ldr	r1, [pc, #44]	; (800f5cc <MX_USB_HOST_Init+0x48>)
 800f59e:	480a      	ldr	r0, [pc, #40]	; (800f5c8 <MX_USB_HOST_Init+0x44>)
 800f5a0:	f7fb f93a 	bl	800a818 <USBH_RegisterClass>
 800f5a4:	4603      	mov	r3, r0
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d001      	beq.n	800f5ae <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800f5aa:	f7f2 f9b3 	bl	8001914 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800f5ae:	4806      	ldr	r0, [pc, #24]	; (800f5c8 <MX_USB_HOST_Init+0x44>)
 800f5b0:	f7fb f9be 	bl	800a930 <USBH_Start>
 800f5b4:	4603      	mov	r3, r0
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d001      	beq.n	800f5be <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800f5ba:	f7f2 f9ab 	bl	8001914 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800f5be:	bf00      	nop
 800f5c0:	bd80      	pop	{r7, pc}
 800f5c2:	bf00      	nop
 800f5c4:	0800f5e5 	.word	0x0800f5e5
 800f5c8:	20001de0 	.word	0x20001de0
 800f5cc:	20000048 	.word	0x20000048

0800f5d0 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800f5d0:	b580      	push	{r7, lr}
 800f5d2:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800f5d4:	4802      	ldr	r0, [pc, #8]	; (800f5e0 <MX_USB_HOST_Process+0x10>)
 800f5d6:	f7fb f9bb 	bl	800a950 <USBH_Process>
}
 800f5da:	bf00      	nop
 800f5dc:	bd80      	pop	{r7, pc}
 800f5de:	bf00      	nop
 800f5e0:	20001de0 	.word	0x20001de0

0800f5e4 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800f5e4:	b480      	push	{r7}
 800f5e6:	b083      	sub	sp, #12
 800f5e8:	af00      	add	r7, sp, #0
 800f5ea:	6078      	str	r0, [r7, #4]
 800f5ec:	460b      	mov	r3, r1
 800f5ee:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800f5f0:	78fb      	ldrb	r3, [r7, #3]
 800f5f2:	3b01      	subs	r3, #1
 800f5f4:	2b04      	cmp	r3, #4
 800f5f6:	d819      	bhi.n	800f62c <USBH_UserProcess+0x48>
 800f5f8:	a201      	add	r2, pc, #4	; (adr r2, 800f600 <USBH_UserProcess+0x1c>)
 800f5fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5fe:	bf00      	nop
 800f600:	0800f62d 	.word	0x0800f62d
 800f604:	0800f61d 	.word	0x0800f61d
 800f608:	0800f62d 	.word	0x0800f62d
 800f60c:	0800f625 	.word	0x0800f625
 800f610:	0800f615 	.word	0x0800f615
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800f614:	4b09      	ldr	r3, [pc, #36]	; (800f63c <USBH_UserProcess+0x58>)
 800f616:	2203      	movs	r2, #3
 800f618:	701a      	strb	r2, [r3, #0]
  break;
 800f61a:	e008      	b.n	800f62e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800f61c:	4b07      	ldr	r3, [pc, #28]	; (800f63c <USBH_UserProcess+0x58>)
 800f61e:	2202      	movs	r2, #2
 800f620:	701a      	strb	r2, [r3, #0]
  break;
 800f622:	e004      	b.n	800f62e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800f624:	4b05      	ldr	r3, [pc, #20]	; (800f63c <USBH_UserProcess+0x58>)
 800f626:	2201      	movs	r2, #1
 800f628:	701a      	strb	r2, [r3, #0]
  break;
 800f62a:	e000      	b.n	800f62e <USBH_UserProcess+0x4a>

  default:
  break;
 800f62c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800f62e:	bf00      	nop
 800f630:	370c      	adds	r7, #12
 800f632:	46bd      	mov	sp, r7
 800f634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f638:	4770      	bx	lr
 800f63a:	bf00      	nop
 800f63c:	200021b8 	.word	0x200021b8

0800f640 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800f640:	b580      	push	{r7, lr}
 800f642:	b08a      	sub	sp, #40	; 0x28
 800f644:	af00      	add	r7, sp, #0
 800f646:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f648:	f107 0314 	add.w	r3, r7, #20
 800f64c:	2200      	movs	r2, #0
 800f64e:	601a      	str	r2, [r3, #0]
 800f650:	605a      	str	r2, [r3, #4]
 800f652:	609a      	str	r2, [r3, #8]
 800f654:	60da      	str	r2, [r3, #12]
 800f656:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f660:	d147      	bne.n	800f6f2 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f662:	2300      	movs	r3, #0
 800f664:	613b      	str	r3, [r7, #16]
 800f666:	4b25      	ldr	r3, [pc, #148]	; (800f6fc <HAL_HCD_MspInit+0xbc>)
 800f668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f66a:	4a24      	ldr	r2, [pc, #144]	; (800f6fc <HAL_HCD_MspInit+0xbc>)
 800f66c:	f043 0301 	orr.w	r3, r3, #1
 800f670:	6313      	str	r3, [r2, #48]	; 0x30
 800f672:	4b22      	ldr	r3, [pc, #136]	; (800f6fc <HAL_HCD_MspInit+0xbc>)
 800f674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f676:	f003 0301 	and.w	r3, r3, #1
 800f67a:	613b      	str	r3, [r7, #16]
 800f67c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800f67e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f682:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800f684:	2300      	movs	r3, #0
 800f686:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f688:	2300      	movs	r3, #0
 800f68a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f68c:	f107 0314 	add.w	r3, r7, #20
 800f690:	4619      	mov	r1, r3
 800f692:	481b      	ldr	r0, [pc, #108]	; (800f700 <HAL_HCD_MspInit+0xc0>)
 800f694:	f7f3 fb28 	bl	8002ce8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800f698:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800f69c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f69e:	2302      	movs	r3, #2
 800f6a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f6a2:	2300      	movs	r3, #0
 800f6a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f6a6:	2303      	movs	r3, #3
 800f6a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f6aa:	230a      	movs	r3, #10
 800f6ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f6ae:	f107 0314 	add.w	r3, r7, #20
 800f6b2:	4619      	mov	r1, r3
 800f6b4:	4812      	ldr	r0, [pc, #72]	; (800f700 <HAL_HCD_MspInit+0xc0>)
 800f6b6:	f7f3 fb17 	bl	8002ce8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f6ba:	4b10      	ldr	r3, [pc, #64]	; (800f6fc <HAL_HCD_MspInit+0xbc>)
 800f6bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f6be:	4a0f      	ldr	r2, [pc, #60]	; (800f6fc <HAL_HCD_MspInit+0xbc>)
 800f6c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f6c4:	6353      	str	r3, [r2, #52]	; 0x34
 800f6c6:	2300      	movs	r3, #0
 800f6c8:	60fb      	str	r3, [r7, #12]
 800f6ca:	4b0c      	ldr	r3, [pc, #48]	; (800f6fc <HAL_HCD_MspInit+0xbc>)
 800f6cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f6ce:	4a0b      	ldr	r2, [pc, #44]	; (800f6fc <HAL_HCD_MspInit+0xbc>)
 800f6d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f6d4:	6453      	str	r3, [r2, #68]	; 0x44
 800f6d6:	4b09      	ldr	r3, [pc, #36]	; (800f6fc <HAL_HCD_MspInit+0xbc>)
 800f6d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f6da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f6de:	60fb      	str	r3, [r7, #12]
 800f6e0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800f6e2:	2200      	movs	r2, #0
 800f6e4:	2100      	movs	r1, #0
 800f6e6:	2043      	movs	r0, #67	; 0x43
 800f6e8:	f7f2 fe96 	bl	8002418 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f6ec:	2043      	movs	r0, #67	; 0x43
 800f6ee:	f7f2 feaf 	bl	8002450 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f6f2:	bf00      	nop
 800f6f4:	3728      	adds	r7, #40	; 0x28
 800f6f6:	46bd      	mov	sp, r7
 800f6f8:	bd80      	pop	{r7, pc}
 800f6fa:	bf00      	nop
 800f6fc:	40023800 	.word	0x40023800
 800f700:	40020000 	.word	0x40020000

0800f704 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800f704:	b580      	push	{r7, lr}
 800f706:	b082      	sub	sp, #8
 800f708:	af00      	add	r7, sp, #0
 800f70a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f712:	4618      	mov	r0, r3
 800f714:	f7fb fcfb 	bl	800b10e <USBH_LL_IncTimer>
}
 800f718:	bf00      	nop
 800f71a:	3708      	adds	r7, #8
 800f71c:	46bd      	mov	sp, r7
 800f71e:	bd80      	pop	{r7, pc}

0800f720 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800f720:	b580      	push	{r7, lr}
 800f722:	b082      	sub	sp, #8
 800f724:	af00      	add	r7, sp, #0
 800f726:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f72e:	4618      	mov	r0, r3
 800f730:	f7fb fd33 	bl	800b19a <USBH_LL_Connect>
}
 800f734:	bf00      	nop
 800f736:	3708      	adds	r7, #8
 800f738:	46bd      	mov	sp, r7
 800f73a:	bd80      	pop	{r7, pc}

0800f73c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800f73c:	b580      	push	{r7, lr}
 800f73e:	b082      	sub	sp, #8
 800f740:	af00      	add	r7, sp, #0
 800f742:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f74a:	4618      	mov	r0, r3
 800f74c:	f7fb fd3c 	bl	800b1c8 <USBH_LL_Disconnect>
}
 800f750:	bf00      	nop
 800f752:	3708      	adds	r7, #8
 800f754:	46bd      	mov	sp, r7
 800f756:	bd80      	pop	{r7, pc}

0800f758 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800f758:	b480      	push	{r7}
 800f75a:	b083      	sub	sp, #12
 800f75c:	af00      	add	r7, sp, #0
 800f75e:	6078      	str	r0, [r7, #4]
 800f760:	460b      	mov	r3, r1
 800f762:	70fb      	strb	r3, [r7, #3]
 800f764:	4613      	mov	r3, r2
 800f766:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800f768:	bf00      	nop
 800f76a:	370c      	adds	r7, #12
 800f76c:	46bd      	mov	sp, r7
 800f76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f772:	4770      	bx	lr

0800f774 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800f774:	b580      	push	{r7, lr}
 800f776:	b082      	sub	sp, #8
 800f778:	af00      	add	r7, sp, #0
 800f77a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f782:	4618      	mov	r0, r3
 800f784:	f7fb fced 	bl	800b162 <USBH_LL_PortEnabled>
}
 800f788:	bf00      	nop
 800f78a:	3708      	adds	r7, #8
 800f78c:	46bd      	mov	sp, r7
 800f78e:	bd80      	pop	{r7, pc}

0800f790 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800f790:	b580      	push	{r7, lr}
 800f792:	b082      	sub	sp, #8
 800f794:	af00      	add	r7, sp, #0
 800f796:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f79e:	4618      	mov	r0, r3
 800f7a0:	f7fb fced 	bl	800b17e <USBH_LL_PortDisabled>
}
 800f7a4:	bf00      	nop
 800f7a6:	3708      	adds	r7, #8
 800f7a8:	46bd      	mov	sp, r7
 800f7aa:	bd80      	pop	{r7, pc}

0800f7ac <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800f7ac:	b580      	push	{r7, lr}
 800f7ae:	b082      	sub	sp, #8
 800f7b0:	af00      	add	r7, sp, #0
 800f7b2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800f7ba:	2b01      	cmp	r3, #1
 800f7bc:	d12a      	bne.n	800f814 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800f7be:	4a18      	ldr	r2, [pc, #96]	; (800f820 <USBH_LL_Init+0x74>)
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	4a15      	ldr	r2, [pc, #84]	; (800f820 <USBH_LL_Init+0x74>)
 800f7ca:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f7ce:	4b14      	ldr	r3, [pc, #80]	; (800f820 <USBH_LL_Init+0x74>)
 800f7d0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800f7d4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800f7d6:	4b12      	ldr	r3, [pc, #72]	; (800f820 <USBH_LL_Init+0x74>)
 800f7d8:	2208      	movs	r2, #8
 800f7da:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800f7dc:	4b10      	ldr	r3, [pc, #64]	; (800f820 <USBH_LL_Init+0x74>)
 800f7de:	2201      	movs	r2, #1
 800f7e0:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800f7e2:	4b0f      	ldr	r3, [pc, #60]	; (800f820 <USBH_LL_Init+0x74>)
 800f7e4:	2200      	movs	r2, #0
 800f7e6:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800f7e8:	4b0d      	ldr	r3, [pc, #52]	; (800f820 <USBH_LL_Init+0x74>)
 800f7ea:	2202      	movs	r2, #2
 800f7ec:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800f7ee:	4b0c      	ldr	r3, [pc, #48]	; (800f820 <USBH_LL_Init+0x74>)
 800f7f0:	2200      	movs	r2, #0
 800f7f2:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800f7f4:	480a      	ldr	r0, [pc, #40]	; (800f820 <USBH_LL_Init+0x74>)
 800f7f6:	f7f3 fd41 	bl	800327c <HAL_HCD_Init>
 800f7fa:	4603      	mov	r3, r0
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d001      	beq.n	800f804 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800f800:	f7f2 f888 	bl	8001914 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800f804:	4806      	ldr	r0, [pc, #24]	; (800f820 <USBH_LL_Init+0x74>)
 800f806:	f7f4 f924 	bl	8003a52 <HAL_HCD_GetCurrentFrame>
 800f80a:	4603      	mov	r3, r0
 800f80c:	4619      	mov	r1, r3
 800f80e:	6878      	ldr	r0, [r7, #4]
 800f810:	f7fb fc6e 	bl	800b0f0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800f814:	2300      	movs	r3, #0
}
 800f816:	4618      	mov	r0, r3
 800f818:	3708      	adds	r7, #8
 800f81a:	46bd      	mov	sp, r7
 800f81c:	bd80      	pop	{r7, pc}
 800f81e:	bf00      	nop
 800f820:	200021bc 	.word	0x200021bc

0800f824 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800f824:	b580      	push	{r7, lr}
 800f826:	b084      	sub	sp, #16
 800f828:	af00      	add	r7, sp, #0
 800f82a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f82c:	2300      	movs	r3, #0
 800f82e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f830:	2300      	movs	r3, #0
 800f832:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f83a:	4618      	mov	r0, r3
 800f83c:	f7f4 f893 	bl	8003966 <HAL_HCD_Start>
 800f840:	4603      	mov	r3, r0
 800f842:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f844:	7bfb      	ldrb	r3, [r7, #15]
 800f846:	4618      	mov	r0, r3
 800f848:	f000 f98c 	bl	800fb64 <USBH_Get_USB_Status>
 800f84c:	4603      	mov	r3, r0
 800f84e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f850:	7bbb      	ldrb	r3, [r7, #14]
}
 800f852:	4618      	mov	r0, r3
 800f854:	3710      	adds	r7, #16
 800f856:	46bd      	mov	sp, r7
 800f858:	bd80      	pop	{r7, pc}

0800f85a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800f85a:	b580      	push	{r7, lr}
 800f85c:	b084      	sub	sp, #16
 800f85e:	af00      	add	r7, sp, #0
 800f860:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f862:	2300      	movs	r3, #0
 800f864:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f866:	2300      	movs	r3, #0
 800f868:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f870:	4618      	mov	r0, r3
 800f872:	f7f4 f89b 	bl	80039ac <HAL_HCD_Stop>
 800f876:	4603      	mov	r3, r0
 800f878:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f87a:	7bfb      	ldrb	r3, [r7, #15]
 800f87c:	4618      	mov	r0, r3
 800f87e:	f000 f971 	bl	800fb64 <USBH_Get_USB_Status>
 800f882:	4603      	mov	r3, r0
 800f884:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f886:	7bbb      	ldrb	r3, [r7, #14]
}
 800f888:	4618      	mov	r0, r3
 800f88a:	3710      	adds	r7, #16
 800f88c:	46bd      	mov	sp, r7
 800f88e:	bd80      	pop	{r7, pc}

0800f890 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800f890:	b580      	push	{r7, lr}
 800f892:	b084      	sub	sp, #16
 800f894:	af00      	add	r7, sp, #0
 800f896:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800f898:	2301      	movs	r3, #1
 800f89a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f8a2:	4618      	mov	r0, r3
 800f8a4:	f7f4 f8e3 	bl	8003a6e <HAL_HCD_GetCurrentSpeed>
 800f8a8:	4603      	mov	r3, r0
 800f8aa:	2b02      	cmp	r3, #2
 800f8ac:	d00c      	beq.n	800f8c8 <USBH_LL_GetSpeed+0x38>
 800f8ae:	2b02      	cmp	r3, #2
 800f8b0:	d80d      	bhi.n	800f8ce <USBH_LL_GetSpeed+0x3e>
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d002      	beq.n	800f8bc <USBH_LL_GetSpeed+0x2c>
 800f8b6:	2b01      	cmp	r3, #1
 800f8b8:	d003      	beq.n	800f8c2 <USBH_LL_GetSpeed+0x32>
 800f8ba:	e008      	b.n	800f8ce <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800f8bc:	2300      	movs	r3, #0
 800f8be:	73fb      	strb	r3, [r7, #15]
    break;
 800f8c0:	e008      	b.n	800f8d4 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800f8c2:	2301      	movs	r3, #1
 800f8c4:	73fb      	strb	r3, [r7, #15]
    break;
 800f8c6:	e005      	b.n	800f8d4 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800f8c8:	2302      	movs	r3, #2
 800f8ca:	73fb      	strb	r3, [r7, #15]
    break;
 800f8cc:	e002      	b.n	800f8d4 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800f8ce:	2301      	movs	r3, #1
 800f8d0:	73fb      	strb	r3, [r7, #15]
    break;
 800f8d2:	bf00      	nop
  }
  return  speed;
 800f8d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f8d6:	4618      	mov	r0, r3
 800f8d8:	3710      	adds	r7, #16
 800f8da:	46bd      	mov	sp, r7
 800f8dc:	bd80      	pop	{r7, pc}

0800f8de <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800f8de:	b580      	push	{r7, lr}
 800f8e0:	b084      	sub	sp, #16
 800f8e2:	af00      	add	r7, sp, #0
 800f8e4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f8e6:	2300      	movs	r3, #0
 800f8e8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f8ea:	2300      	movs	r3, #0
 800f8ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f8f4:	4618      	mov	r0, r3
 800f8f6:	f7f4 f876 	bl	80039e6 <HAL_HCD_ResetPort>
 800f8fa:	4603      	mov	r3, r0
 800f8fc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f8fe:	7bfb      	ldrb	r3, [r7, #15]
 800f900:	4618      	mov	r0, r3
 800f902:	f000 f92f 	bl	800fb64 <USBH_Get_USB_Status>
 800f906:	4603      	mov	r3, r0
 800f908:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f90a:	7bbb      	ldrb	r3, [r7, #14]
}
 800f90c:	4618      	mov	r0, r3
 800f90e:	3710      	adds	r7, #16
 800f910:	46bd      	mov	sp, r7
 800f912:	bd80      	pop	{r7, pc}

0800f914 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f914:	b580      	push	{r7, lr}
 800f916:	b082      	sub	sp, #8
 800f918:	af00      	add	r7, sp, #0
 800f91a:	6078      	str	r0, [r7, #4]
 800f91c:	460b      	mov	r3, r1
 800f91e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f926:	78fa      	ldrb	r2, [r7, #3]
 800f928:	4611      	mov	r1, r2
 800f92a:	4618      	mov	r0, r3
 800f92c:	f7f4 f87d 	bl	8003a2a <HAL_HCD_HC_GetXferCount>
 800f930:	4603      	mov	r3, r0
}
 800f932:	4618      	mov	r0, r3
 800f934:	3708      	adds	r7, #8
 800f936:	46bd      	mov	sp, r7
 800f938:	bd80      	pop	{r7, pc}

0800f93a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800f93a:	b590      	push	{r4, r7, lr}
 800f93c:	b089      	sub	sp, #36	; 0x24
 800f93e:	af04      	add	r7, sp, #16
 800f940:	6078      	str	r0, [r7, #4]
 800f942:	4608      	mov	r0, r1
 800f944:	4611      	mov	r1, r2
 800f946:	461a      	mov	r2, r3
 800f948:	4603      	mov	r3, r0
 800f94a:	70fb      	strb	r3, [r7, #3]
 800f94c:	460b      	mov	r3, r1
 800f94e:	70bb      	strb	r3, [r7, #2]
 800f950:	4613      	mov	r3, r2
 800f952:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f954:	2300      	movs	r3, #0
 800f956:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f958:	2300      	movs	r3, #0
 800f95a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800f962:	787c      	ldrb	r4, [r7, #1]
 800f964:	78ba      	ldrb	r2, [r7, #2]
 800f966:	78f9      	ldrb	r1, [r7, #3]
 800f968:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f96a:	9302      	str	r3, [sp, #8]
 800f96c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f970:	9301      	str	r3, [sp, #4]
 800f972:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f976:	9300      	str	r3, [sp, #0]
 800f978:	4623      	mov	r3, r4
 800f97a:	f7f3 fce1 	bl	8003340 <HAL_HCD_HC_Init>
 800f97e:	4603      	mov	r3, r0
 800f980:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800f982:	7bfb      	ldrb	r3, [r7, #15]
 800f984:	4618      	mov	r0, r3
 800f986:	f000 f8ed 	bl	800fb64 <USBH_Get_USB_Status>
 800f98a:	4603      	mov	r3, r0
 800f98c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f98e:	7bbb      	ldrb	r3, [r7, #14]
}
 800f990:	4618      	mov	r0, r3
 800f992:	3714      	adds	r7, #20
 800f994:	46bd      	mov	sp, r7
 800f996:	bd90      	pop	{r4, r7, pc}

0800f998 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f998:	b580      	push	{r7, lr}
 800f99a:	b084      	sub	sp, #16
 800f99c:	af00      	add	r7, sp, #0
 800f99e:	6078      	str	r0, [r7, #4]
 800f9a0:	460b      	mov	r3, r1
 800f9a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f9a4:	2300      	movs	r3, #0
 800f9a6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f9a8:	2300      	movs	r3, #0
 800f9aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f9b2:	78fa      	ldrb	r2, [r7, #3]
 800f9b4:	4611      	mov	r1, r2
 800f9b6:	4618      	mov	r0, r3
 800f9b8:	f7f3 fd51 	bl	800345e <HAL_HCD_HC_Halt>
 800f9bc:	4603      	mov	r3, r0
 800f9be:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f9c0:	7bfb      	ldrb	r3, [r7, #15]
 800f9c2:	4618      	mov	r0, r3
 800f9c4:	f000 f8ce 	bl	800fb64 <USBH_Get_USB_Status>
 800f9c8:	4603      	mov	r3, r0
 800f9ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f9cc:	7bbb      	ldrb	r3, [r7, #14]
}
 800f9ce:	4618      	mov	r0, r3
 800f9d0:	3710      	adds	r7, #16
 800f9d2:	46bd      	mov	sp, r7
 800f9d4:	bd80      	pop	{r7, pc}

0800f9d6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800f9d6:	b590      	push	{r4, r7, lr}
 800f9d8:	b089      	sub	sp, #36	; 0x24
 800f9da:	af04      	add	r7, sp, #16
 800f9dc:	6078      	str	r0, [r7, #4]
 800f9de:	4608      	mov	r0, r1
 800f9e0:	4611      	mov	r1, r2
 800f9e2:	461a      	mov	r2, r3
 800f9e4:	4603      	mov	r3, r0
 800f9e6:	70fb      	strb	r3, [r7, #3]
 800f9e8:	460b      	mov	r3, r1
 800f9ea:	70bb      	strb	r3, [r7, #2]
 800f9ec:	4613      	mov	r3, r2
 800f9ee:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f9f0:	2300      	movs	r3, #0
 800f9f2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f9f4:	2300      	movs	r3, #0
 800f9f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800f9fe:	787c      	ldrb	r4, [r7, #1]
 800fa00:	78ba      	ldrb	r2, [r7, #2]
 800fa02:	78f9      	ldrb	r1, [r7, #3]
 800fa04:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800fa08:	9303      	str	r3, [sp, #12]
 800fa0a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800fa0c:	9302      	str	r3, [sp, #8]
 800fa0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa10:	9301      	str	r3, [sp, #4]
 800fa12:	f897 3020 	ldrb.w	r3, [r7, #32]
 800fa16:	9300      	str	r3, [sp, #0]
 800fa18:	4623      	mov	r3, r4
 800fa1a:	f7f3 fd43 	bl	80034a4 <HAL_HCD_HC_SubmitRequest>
 800fa1e:	4603      	mov	r3, r0
 800fa20:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800fa22:	7bfb      	ldrb	r3, [r7, #15]
 800fa24:	4618      	mov	r0, r3
 800fa26:	f000 f89d 	bl	800fb64 <USBH_Get_USB_Status>
 800fa2a:	4603      	mov	r3, r0
 800fa2c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fa2e:	7bbb      	ldrb	r3, [r7, #14]
}
 800fa30:	4618      	mov	r0, r3
 800fa32:	3714      	adds	r7, #20
 800fa34:	46bd      	mov	sp, r7
 800fa36:	bd90      	pop	{r4, r7, pc}

0800fa38 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800fa38:	b580      	push	{r7, lr}
 800fa3a:	b082      	sub	sp, #8
 800fa3c:	af00      	add	r7, sp, #0
 800fa3e:	6078      	str	r0, [r7, #4]
 800fa40:	460b      	mov	r3, r1
 800fa42:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800fa4a:	78fa      	ldrb	r2, [r7, #3]
 800fa4c:	4611      	mov	r1, r2
 800fa4e:	4618      	mov	r0, r3
 800fa50:	f7f3 ffd7 	bl	8003a02 <HAL_HCD_HC_GetURBState>
 800fa54:	4603      	mov	r3, r0
}
 800fa56:	4618      	mov	r0, r3
 800fa58:	3708      	adds	r7, #8
 800fa5a:	46bd      	mov	sp, r7
 800fa5c:	bd80      	pop	{r7, pc}

0800fa5e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800fa5e:	b580      	push	{r7, lr}
 800fa60:	b082      	sub	sp, #8
 800fa62:	af00      	add	r7, sp, #0
 800fa64:	6078      	str	r0, [r7, #4]
 800fa66:	460b      	mov	r3, r1
 800fa68:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800fa70:	2b01      	cmp	r3, #1
 800fa72:	d103      	bne.n	800fa7c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800fa74:	78fb      	ldrb	r3, [r7, #3]
 800fa76:	4618      	mov	r0, r3
 800fa78:	f000 f8a0 	bl	800fbbc <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800fa7c:	20c8      	movs	r0, #200	; 0xc8
 800fa7e:	f7f2 fbef 	bl	8002260 <HAL_Delay>
  return USBH_OK;
 800fa82:	2300      	movs	r3, #0
}
 800fa84:	4618      	mov	r0, r3
 800fa86:	3708      	adds	r7, #8
 800fa88:	46bd      	mov	sp, r7
 800fa8a:	bd80      	pop	{r7, pc}

0800fa8c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800fa8c:	b480      	push	{r7}
 800fa8e:	b085      	sub	sp, #20
 800fa90:	af00      	add	r7, sp, #0
 800fa92:	6078      	str	r0, [r7, #4]
 800fa94:	460b      	mov	r3, r1
 800fa96:	70fb      	strb	r3, [r7, #3]
 800fa98:	4613      	mov	r3, r2
 800fa9a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800faa2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800faa4:	78fb      	ldrb	r3, [r7, #3]
 800faa6:	68fa      	ldr	r2, [r7, #12]
 800faa8:	212c      	movs	r1, #44	; 0x2c
 800faaa:	fb01 f303 	mul.w	r3, r1, r3
 800faae:	4413      	add	r3, r2
 800fab0:	333b      	adds	r3, #59	; 0x3b
 800fab2:	781b      	ldrb	r3, [r3, #0]
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d009      	beq.n	800facc <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800fab8:	78fb      	ldrb	r3, [r7, #3]
 800faba:	68fa      	ldr	r2, [r7, #12]
 800fabc:	212c      	movs	r1, #44	; 0x2c
 800fabe:	fb01 f303 	mul.w	r3, r1, r3
 800fac2:	4413      	add	r3, r2
 800fac4:	3354      	adds	r3, #84	; 0x54
 800fac6:	78ba      	ldrb	r2, [r7, #2]
 800fac8:	701a      	strb	r2, [r3, #0]
 800faca:	e008      	b.n	800fade <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800facc:	78fb      	ldrb	r3, [r7, #3]
 800face:	68fa      	ldr	r2, [r7, #12]
 800fad0:	212c      	movs	r1, #44	; 0x2c
 800fad2:	fb01 f303 	mul.w	r3, r1, r3
 800fad6:	4413      	add	r3, r2
 800fad8:	3355      	adds	r3, #85	; 0x55
 800fada:	78ba      	ldrb	r2, [r7, #2]
 800fadc:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800fade:	2300      	movs	r3, #0
}
 800fae0:	4618      	mov	r0, r3
 800fae2:	3714      	adds	r7, #20
 800fae4:	46bd      	mov	sp, r7
 800fae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faea:	4770      	bx	lr

0800faec <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800faec:	b480      	push	{r7}
 800faee:	b085      	sub	sp, #20
 800faf0:	af00      	add	r7, sp, #0
 800faf2:	6078      	str	r0, [r7, #4]
 800faf4:	460b      	mov	r3, r1
 800faf6:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800faf8:	2300      	movs	r3, #0
 800fafa:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800fb02:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800fb04:	78fb      	ldrb	r3, [r7, #3]
 800fb06:	68ba      	ldr	r2, [r7, #8]
 800fb08:	212c      	movs	r1, #44	; 0x2c
 800fb0a:	fb01 f303 	mul.w	r3, r1, r3
 800fb0e:	4413      	add	r3, r2
 800fb10:	333b      	adds	r3, #59	; 0x3b
 800fb12:	781b      	ldrb	r3, [r3, #0]
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	d009      	beq.n	800fb2c <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800fb18:	78fb      	ldrb	r3, [r7, #3]
 800fb1a:	68ba      	ldr	r2, [r7, #8]
 800fb1c:	212c      	movs	r1, #44	; 0x2c
 800fb1e:	fb01 f303 	mul.w	r3, r1, r3
 800fb22:	4413      	add	r3, r2
 800fb24:	3354      	adds	r3, #84	; 0x54
 800fb26:	781b      	ldrb	r3, [r3, #0]
 800fb28:	73fb      	strb	r3, [r7, #15]
 800fb2a:	e008      	b.n	800fb3e <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800fb2c:	78fb      	ldrb	r3, [r7, #3]
 800fb2e:	68ba      	ldr	r2, [r7, #8]
 800fb30:	212c      	movs	r1, #44	; 0x2c
 800fb32:	fb01 f303 	mul.w	r3, r1, r3
 800fb36:	4413      	add	r3, r2
 800fb38:	3355      	adds	r3, #85	; 0x55
 800fb3a:	781b      	ldrb	r3, [r3, #0]
 800fb3c:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800fb3e:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb40:	4618      	mov	r0, r3
 800fb42:	3714      	adds	r7, #20
 800fb44:	46bd      	mov	sp, r7
 800fb46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb4a:	4770      	bx	lr

0800fb4c <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800fb4c:	b580      	push	{r7, lr}
 800fb4e:	b082      	sub	sp, #8
 800fb50:	af00      	add	r7, sp, #0
 800fb52:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800fb54:	6878      	ldr	r0, [r7, #4]
 800fb56:	f7f2 fb83 	bl	8002260 <HAL_Delay>
}
 800fb5a:	bf00      	nop
 800fb5c:	3708      	adds	r7, #8
 800fb5e:	46bd      	mov	sp, r7
 800fb60:	bd80      	pop	{r7, pc}
	...

0800fb64 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800fb64:	b480      	push	{r7}
 800fb66:	b085      	sub	sp, #20
 800fb68:	af00      	add	r7, sp, #0
 800fb6a:	4603      	mov	r3, r0
 800fb6c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fb6e:	2300      	movs	r3, #0
 800fb70:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800fb72:	79fb      	ldrb	r3, [r7, #7]
 800fb74:	2b03      	cmp	r3, #3
 800fb76:	d817      	bhi.n	800fba8 <USBH_Get_USB_Status+0x44>
 800fb78:	a201      	add	r2, pc, #4	; (adr r2, 800fb80 <USBH_Get_USB_Status+0x1c>)
 800fb7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb7e:	bf00      	nop
 800fb80:	0800fb91 	.word	0x0800fb91
 800fb84:	0800fb97 	.word	0x0800fb97
 800fb88:	0800fb9d 	.word	0x0800fb9d
 800fb8c:	0800fba3 	.word	0x0800fba3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800fb90:	2300      	movs	r3, #0
 800fb92:	73fb      	strb	r3, [r7, #15]
    break;
 800fb94:	e00b      	b.n	800fbae <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800fb96:	2302      	movs	r3, #2
 800fb98:	73fb      	strb	r3, [r7, #15]
    break;
 800fb9a:	e008      	b.n	800fbae <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800fb9c:	2301      	movs	r3, #1
 800fb9e:	73fb      	strb	r3, [r7, #15]
    break;
 800fba0:	e005      	b.n	800fbae <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800fba2:	2302      	movs	r3, #2
 800fba4:	73fb      	strb	r3, [r7, #15]
    break;
 800fba6:	e002      	b.n	800fbae <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800fba8:	2302      	movs	r3, #2
 800fbaa:	73fb      	strb	r3, [r7, #15]
    break;
 800fbac:	bf00      	nop
  }
  return usb_status;
 800fbae:	7bfb      	ldrb	r3, [r7, #15]
}
 800fbb0:	4618      	mov	r0, r3
 800fbb2:	3714      	adds	r7, #20
 800fbb4:	46bd      	mov	sp, r7
 800fbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbba:	4770      	bx	lr

0800fbbc <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800fbbc:	b580      	push	{r7, lr}
 800fbbe:	b084      	sub	sp, #16
 800fbc0:	af00      	add	r7, sp, #0
 800fbc2:	4603      	mov	r3, r0
 800fbc4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800fbc6:	79fb      	ldrb	r3, [r7, #7]
 800fbc8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800fbca:	79fb      	ldrb	r3, [r7, #7]
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	d102      	bne.n	800fbd6 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800fbd0:	2300      	movs	r3, #0
 800fbd2:	73fb      	strb	r3, [r7, #15]
 800fbd4:	e001      	b.n	800fbda <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800fbd6:	2301      	movs	r3, #1
 800fbd8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800fbda:	7bfb      	ldrb	r3, [r7, #15]
 800fbdc:	461a      	mov	r2, r3
 800fbde:	2101      	movs	r1, #1
 800fbe0:	4803      	ldr	r0, [pc, #12]	; (800fbf0 <MX_DriverVbusFS+0x34>)
 800fbe2:	f7f3 fb19 	bl	8003218 <HAL_GPIO_WritePin>
}
 800fbe6:	bf00      	nop
 800fbe8:	3710      	adds	r7, #16
 800fbea:	46bd      	mov	sp, r7
 800fbec:	bd80      	pop	{r7, pc}
 800fbee:	bf00      	nop
 800fbf0:	40020800 	.word	0x40020800

0800fbf4 <malloc>:
 800fbf4:	4b02      	ldr	r3, [pc, #8]	; (800fc00 <malloc+0xc>)
 800fbf6:	4601      	mov	r1, r0
 800fbf8:	6818      	ldr	r0, [r3, #0]
 800fbfa:	f000 b82b 	b.w	800fc54 <_malloc_r>
 800fbfe:	bf00      	nop
 800fc00:	200000b4 	.word	0x200000b4

0800fc04 <free>:
 800fc04:	4b02      	ldr	r3, [pc, #8]	; (800fc10 <free+0xc>)
 800fc06:	4601      	mov	r1, r0
 800fc08:	6818      	ldr	r0, [r3, #0]
 800fc0a:	f000 b92b 	b.w	800fe64 <_free_r>
 800fc0e:	bf00      	nop
 800fc10:	200000b4 	.word	0x200000b4

0800fc14 <sbrk_aligned>:
 800fc14:	b570      	push	{r4, r5, r6, lr}
 800fc16:	4e0e      	ldr	r6, [pc, #56]	; (800fc50 <sbrk_aligned+0x3c>)
 800fc18:	460c      	mov	r4, r1
 800fc1a:	6831      	ldr	r1, [r6, #0]
 800fc1c:	4605      	mov	r5, r0
 800fc1e:	b911      	cbnz	r1, 800fc26 <sbrk_aligned+0x12>
 800fc20:	f000 f8d6 	bl	800fdd0 <_sbrk_r>
 800fc24:	6030      	str	r0, [r6, #0]
 800fc26:	4621      	mov	r1, r4
 800fc28:	4628      	mov	r0, r5
 800fc2a:	f000 f8d1 	bl	800fdd0 <_sbrk_r>
 800fc2e:	1c43      	adds	r3, r0, #1
 800fc30:	d00a      	beq.n	800fc48 <sbrk_aligned+0x34>
 800fc32:	1cc4      	adds	r4, r0, #3
 800fc34:	f024 0403 	bic.w	r4, r4, #3
 800fc38:	42a0      	cmp	r0, r4
 800fc3a:	d007      	beq.n	800fc4c <sbrk_aligned+0x38>
 800fc3c:	1a21      	subs	r1, r4, r0
 800fc3e:	4628      	mov	r0, r5
 800fc40:	f000 f8c6 	bl	800fdd0 <_sbrk_r>
 800fc44:	3001      	adds	r0, #1
 800fc46:	d101      	bne.n	800fc4c <sbrk_aligned+0x38>
 800fc48:	f04f 34ff 	mov.w	r4, #4294967295
 800fc4c:	4620      	mov	r0, r4
 800fc4e:	bd70      	pop	{r4, r5, r6, pc}
 800fc50:	200024c4 	.word	0x200024c4

0800fc54 <_malloc_r>:
 800fc54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fc58:	1ccd      	adds	r5, r1, #3
 800fc5a:	f025 0503 	bic.w	r5, r5, #3
 800fc5e:	3508      	adds	r5, #8
 800fc60:	2d0c      	cmp	r5, #12
 800fc62:	bf38      	it	cc
 800fc64:	250c      	movcc	r5, #12
 800fc66:	2d00      	cmp	r5, #0
 800fc68:	4607      	mov	r7, r0
 800fc6a:	db01      	blt.n	800fc70 <_malloc_r+0x1c>
 800fc6c:	42a9      	cmp	r1, r5
 800fc6e:	d905      	bls.n	800fc7c <_malloc_r+0x28>
 800fc70:	230c      	movs	r3, #12
 800fc72:	603b      	str	r3, [r7, #0]
 800fc74:	2600      	movs	r6, #0
 800fc76:	4630      	mov	r0, r6
 800fc78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fc7c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800fd50 <_malloc_r+0xfc>
 800fc80:	f000 f868 	bl	800fd54 <__malloc_lock>
 800fc84:	f8d8 3000 	ldr.w	r3, [r8]
 800fc88:	461c      	mov	r4, r3
 800fc8a:	bb5c      	cbnz	r4, 800fce4 <_malloc_r+0x90>
 800fc8c:	4629      	mov	r1, r5
 800fc8e:	4638      	mov	r0, r7
 800fc90:	f7ff ffc0 	bl	800fc14 <sbrk_aligned>
 800fc94:	1c43      	adds	r3, r0, #1
 800fc96:	4604      	mov	r4, r0
 800fc98:	d155      	bne.n	800fd46 <_malloc_r+0xf2>
 800fc9a:	f8d8 4000 	ldr.w	r4, [r8]
 800fc9e:	4626      	mov	r6, r4
 800fca0:	2e00      	cmp	r6, #0
 800fca2:	d145      	bne.n	800fd30 <_malloc_r+0xdc>
 800fca4:	2c00      	cmp	r4, #0
 800fca6:	d048      	beq.n	800fd3a <_malloc_r+0xe6>
 800fca8:	6823      	ldr	r3, [r4, #0]
 800fcaa:	4631      	mov	r1, r6
 800fcac:	4638      	mov	r0, r7
 800fcae:	eb04 0903 	add.w	r9, r4, r3
 800fcb2:	f000 f88d 	bl	800fdd0 <_sbrk_r>
 800fcb6:	4581      	cmp	r9, r0
 800fcb8:	d13f      	bne.n	800fd3a <_malloc_r+0xe6>
 800fcba:	6821      	ldr	r1, [r4, #0]
 800fcbc:	1a6d      	subs	r5, r5, r1
 800fcbe:	4629      	mov	r1, r5
 800fcc0:	4638      	mov	r0, r7
 800fcc2:	f7ff ffa7 	bl	800fc14 <sbrk_aligned>
 800fcc6:	3001      	adds	r0, #1
 800fcc8:	d037      	beq.n	800fd3a <_malloc_r+0xe6>
 800fcca:	6823      	ldr	r3, [r4, #0]
 800fccc:	442b      	add	r3, r5
 800fcce:	6023      	str	r3, [r4, #0]
 800fcd0:	f8d8 3000 	ldr.w	r3, [r8]
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	d038      	beq.n	800fd4a <_malloc_r+0xf6>
 800fcd8:	685a      	ldr	r2, [r3, #4]
 800fcda:	42a2      	cmp	r2, r4
 800fcdc:	d12b      	bne.n	800fd36 <_malloc_r+0xe2>
 800fcde:	2200      	movs	r2, #0
 800fce0:	605a      	str	r2, [r3, #4]
 800fce2:	e00f      	b.n	800fd04 <_malloc_r+0xb0>
 800fce4:	6822      	ldr	r2, [r4, #0]
 800fce6:	1b52      	subs	r2, r2, r5
 800fce8:	d41f      	bmi.n	800fd2a <_malloc_r+0xd6>
 800fcea:	2a0b      	cmp	r2, #11
 800fcec:	d917      	bls.n	800fd1e <_malloc_r+0xca>
 800fcee:	1961      	adds	r1, r4, r5
 800fcf0:	42a3      	cmp	r3, r4
 800fcf2:	6025      	str	r5, [r4, #0]
 800fcf4:	bf18      	it	ne
 800fcf6:	6059      	strne	r1, [r3, #4]
 800fcf8:	6863      	ldr	r3, [r4, #4]
 800fcfa:	bf08      	it	eq
 800fcfc:	f8c8 1000 	streq.w	r1, [r8]
 800fd00:	5162      	str	r2, [r4, r5]
 800fd02:	604b      	str	r3, [r1, #4]
 800fd04:	4638      	mov	r0, r7
 800fd06:	f104 060b 	add.w	r6, r4, #11
 800fd0a:	f000 f829 	bl	800fd60 <__malloc_unlock>
 800fd0e:	f026 0607 	bic.w	r6, r6, #7
 800fd12:	1d23      	adds	r3, r4, #4
 800fd14:	1af2      	subs	r2, r6, r3
 800fd16:	d0ae      	beq.n	800fc76 <_malloc_r+0x22>
 800fd18:	1b9b      	subs	r3, r3, r6
 800fd1a:	50a3      	str	r3, [r4, r2]
 800fd1c:	e7ab      	b.n	800fc76 <_malloc_r+0x22>
 800fd1e:	42a3      	cmp	r3, r4
 800fd20:	6862      	ldr	r2, [r4, #4]
 800fd22:	d1dd      	bne.n	800fce0 <_malloc_r+0x8c>
 800fd24:	f8c8 2000 	str.w	r2, [r8]
 800fd28:	e7ec      	b.n	800fd04 <_malloc_r+0xb0>
 800fd2a:	4623      	mov	r3, r4
 800fd2c:	6864      	ldr	r4, [r4, #4]
 800fd2e:	e7ac      	b.n	800fc8a <_malloc_r+0x36>
 800fd30:	4634      	mov	r4, r6
 800fd32:	6876      	ldr	r6, [r6, #4]
 800fd34:	e7b4      	b.n	800fca0 <_malloc_r+0x4c>
 800fd36:	4613      	mov	r3, r2
 800fd38:	e7cc      	b.n	800fcd4 <_malloc_r+0x80>
 800fd3a:	230c      	movs	r3, #12
 800fd3c:	603b      	str	r3, [r7, #0]
 800fd3e:	4638      	mov	r0, r7
 800fd40:	f000 f80e 	bl	800fd60 <__malloc_unlock>
 800fd44:	e797      	b.n	800fc76 <_malloc_r+0x22>
 800fd46:	6025      	str	r5, [r4, #0]
 800fd48:	e7dc      	b.n	800fd04 <_malloc_r+0xb0>
 800fd4a:	605b      	str	r3, [r3, #4]
 800fd4c:	deff      	udf	#255	; 0xff
 800fd4e:	bf00      	nop
 800fd50:	200024c0 	.word	0x200024c0

0800fd54 <__malloc_lock>:
 800fd54:	4801      	ldr	r0, [pc, #4]	; (800fd5c <__malloc_lock+0x8>)
 800fd56:	f000 b875 	b.w	800fe44 <__retarget_lock_acquire_recursive>
 800fd5a:	bf00      	nop
 800fd5c:	20002604 	.word	0x20002604

0800fd60 <__malloc_unlock>:
 800fd60:	4801      	ldr	r0, [pc, #4]	; (800fd68 <__malloc_unlock+0x8>)
 800fd62:	f000 b870 	b.w	800fe46 <__retarget_lock_release_recursive>
 800fd66:	bf00      	nop
 800fd68:	20002604 	.word	0x20002604

0800fd6c <memset>:
 800fd6c:	4402      	add	r2, r0
 800fd6e:	4603      	mov	r3, r0
 800fd70:	4293      	cmp	r3, r2
 800fd72:	d100      	bne.n	800fd76 <memset+0xa>
 800fd74:	4770      	bx	lr
 800fd76:	f803 1b01 	strb.w	r1, [r3], #1
 800fd7a:	e7f9      	b.n	800fd70 <memset+0x4>

0800fd7c <strncpy>:
 800fd7c:	b510      	push	{r4, lr}
 800fd7e:	3901      	subs	r1, #1
 800fd80:	4603      	mov	r3, r0
 800fd82:	b132      	cbz	r2, 800fd92 <strncpy+0x16>
 800fd84:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800fd88:	f803 4b01 	strb.w	r4, [r3], #1
 800fd8c:	3a01      	subs	r2, #1
 800fd8e:	2c00      	cmp	r4, #0
 800fd90:	d1f7      	bne.n	800fd82 <strncpy+0x6>
 800fd92:	441a      	add	r2, r3
 800fd94:	2100      	movs	r1, #0
 800fd96:	4293      	cmp	r3, r2
 800fd98:	d100      	bne.n	800fd9c <strncpy+0x20>
 800fd9a:	bd10      	pop	{r4, pc}
 800fd9c:	f803 1b01 	strb.w	r1, [r3], #1
 800fda0:	e7f9      	b.n	800fd96 <strncpy+0x1a>

0800fda2 <strstr>:
 800fda2:	780a      	ldrb	r2, [r1, #0]
 800fda4:	b570      	push	{r4, r5, r6, lr}
 800fda6:	b96a      	cbnz	r2, 800fdc4 <strstr+0x22>
 800fda8:	bd70      	pop	{r4, r5, r6, pc}
 800fdaa:	429a      	cmp	r2, r3
 800fdac:	d109      	bne.n	800fdc2 <strstr+0x20>
 800fdae:	460c      	mov	r4, r1
 800fdb0:	4605      	mov	r5, r0
 800fdb2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	d0f6      	beq.n	800fda8 <strstr+0x6>
 800fdba:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800fdbe:	429e      	cmp	r6, r3
 800fdc0:	d0f7      	beq.n	800fdb2 <strstr+0x10>
 800fdc2:	3001      	adds	r0, #1
 800fdc4:	7803      	ldrb	r3, [r0, #0]
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	d1ef      	bne.n	800fdaa <strstr+0x8>
 800fdca:	4618      	mov	r0, r3
 800fdcc:	e7ec      	b.n	800fda8 <strstr+0x6>
	...

0800fdd0 <_sbrk_r>:
 800fdd0:	b538      	push	{r3, r4, r5, lr}
 800fdd2:	4d06      	ldr	r5, [pc, #24]	; (800fdec <_sbrk_r+0x1c>)
 800fdd4:	2300      	movs	r3, #0
 800fdd6:	4604      	mov	r4, r0
 800fdd8:	4608      	mov	r0, r1
 800fdda:	602b      	str	r3, [r5, #0]
 800fddc:	f7f1 ffd2 	bl	8001d84 <_sbrk>
 800fde0:	1c43      	adds	r3, r0, #1
 800fde2:	d102      	bne.n	800fdea <_sbrk_r+0x1a>
 800fde4:	682b      	ldr	r3, [r5, #0]
 800fde6:	b103      	cbz	r3, 800fdea <_sbrk_r+0x1a>
 800fde8:	6023      	str	r3, [r4, #0]
 800fdea:	bd38      	pop	{r3, r4, r5, pc}
 800fdec:	20002600 	.word	0x20002600

0800fdf0 <__errno>:
 800fdf0:	4b01      	ldr	r3, [pc, #4]	; (800fdf8 <__errno+0x8>)
 800fdf2:	6818      	ldr	r0, [r3, #0]
 800fdf4:	4770      	bx	lr
 800fdf6:	bf00      	nop
 800fdf8:	200000b4 	.word	0x200000b4

0800fdfc <__libc_init_array>:
 800fdfc:	b570      	push	{r4, r5, r6, lr}
 800fdfe:	4d0d      	ldr	r5, [pc, #52]	; (800fe34 <__libc_init_array+0x38>)
 800fe00:	4c0d      	ldr	r4, [pc, #52]	; (800fe38 <__libc_init_array+0x3c>)
 800fe02:	1b64      	subs	r4, r4, r5
 800fe04:	10a4      	asrs	r4, r4, #2
 800fe06:	2600      	movs	r6, #0
 800fe08:	42a6      	cmp	r6, r4
 800fe0a:	d109      	bne.n	800fe20 <__libc_init_array+0x24>
 800fe0c:	4d0b      	ldr	r5, [pc, #44]	; (800fe3c <__libc_init_array+0x40>)
 800fe0e:	4c0c      	ldr	r4, [pc, #48]	; (800fe40 <__libc_init_array+0x44>)
 800fe10:	f000 f874 	bl	800fefc <_init>
 800fe14:	1b64      	subs	r4, r4, r5
 800fe16:	10a4      	asrs	r4, r4, #2
 800fe18:	2600      	movs	r6, #0
 800fe1a:	42a6      	cmp	r6, r4
 800fe1c:	d105      	bne.n	800fe2a <__libc_init_array+0x2e>
 800fe1e:	bd70      	pop	{r4, r5, r6, pc}
 800fe20:	f855 3b04 	ldr.w	r3, [r5], #4
 800fe24:	4798      	blx	r3
 800fe26:	3601      	adds	r6, #1
 800fe28:	e7ee      	b.n	800fe08 <__libc_init_array+0xc>
 800fe2a:	f855 3b04 	ldr.w	r3, [r5], #4
 800fe2e:	4798      	blx	r3
 800fe30:	3601      	adds	r6, #1
 800fe32:	e7f2      	b.n	800fe1a <__libc_init_array+0x1e>
 800fe34:	08010444 	.word	0x08010444
 800fe38:	08010444 	.word	0x08010444
 800fe3c:	08010444 	.word	0x08010444
 800fe40:	08010448 	.word	0x08010448

0800fe44 <__retarget_lock_acquire_recursive>:
 800fe44:	4770      	bx	lr

0800fe46 <__retarget_lock_release_recursive>:
 800fe46:	4770      	bx	lr

0800fe48 <memcpy>:
 800fe48:	440a      	add	r2, r1
 800fe4a:	4291      	cmp	r1, r2
 800fe4c:	f100 33ff 	add.w	r3, r0, #4294967295
 800fe50:	d100      	bne.n	800fe54 <memcpy+0xc>
 800fe52:	4770      	bx	lr
 800fe54:	b510      	push	{r4, lr}
 800fe56:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fe5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fe5e:	4291      	cmp	r1, r2
 800fe60:	d1f9      	bne.n	800fe56 <memcpy+0xe>
 800fe62:	bd10      	pop	{r4, pc}

0800fe64 <_free_r>:
 800fe64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fe66:	2900      	cmp	r1, #0
 800fe68:	d044      	beq.n	800fef4 <_free_r+0x90>
 800fe6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fe6e:	9001      	str	r0, [sp, #4]
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	f1a1 0404 	sub.w	r4, r1, #4
 800fe76:	bfb8      	it	lt
 800fe78:	18e4      	addlt	r4, r4, r3
 800fe7a:	f7ff ff6b 	bl	800fd54 <__malloc_lock>
 800fe7e:	4a1e      	ldr	r2, [pc, #120]	; (800fef8 <_free_r+0x94>)
 800fe80:	9801      	ldr	r0, [sp, #4]
 800fe82:	6813      	ldr	r3, [r2, #0]
 800fe84:	b933      	cbnz	r3, 800fe94 <_free_r+0x30>
 800fe86:	6063      	str	r3, [r4, #4]
 800fe88:	6014      	str	r4, [r2, #0]
 800fe8a:	b003      	add	sp, #12
 800fe8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fe90:	f7ff bf66 	b.w	800fd60 <__malloc_unlock>
 800fe94:	42a3      	cmp	r3, r4
 800fe96:	d908      	bls.n	800feaa <_free_r+0x46>
 800fe98:	6825      	ldr	r5, [r4, #0]
 800fe9a:	1961      	adds	r1, r4, r5
 800fe9c:	428b      	cmp	r3, r1
 800fe9e:	bf01      	itttt	eq
 800fea0:	6819      	ldreq	r1, [r3, #0]
 800fea2:	685b      	ldreq	r3, [r3, #4]
 800fea4:	1949      	addeq	r1, r1, r5
 800fea6:	6021      	streq	r1, [r4, #0]
 800fea8:	e7ed      	b.n	800fe86 <_free_r+0x22>
 800feaa:	461a      	mov	r2, r3
 800feac:	685b      	ldr	r3, [r3, #4]
 800feae:	b10b      	cbz	r3, 800feb4 <_free_r+0x50>
 800feb0:	42a3      	cmp	r3, r4
 800feb2:	d9fa      	bls.n	800feaa <_free_r+0x46>
 800feb4:	6811      	ldr	r1, [r2, #0]
 800feb6:	1855      	adds	r5, r2, r1
 800feb8:	42a5      	cmp	r5, r4
 800feba:	d10b      	bne.n	800fed4 <_free_r+0x70>
 800febc:	6824      	ldr	r4, [r4, #0]
 800febe:	4421      	add	r1, r4
 800fec0:	1854      	adds	r4, r2, r1
 800fec2:	42a3      	cmp	r3, r4
 800fec4:	6011      	str	r1, [r2, #0]
 800fec6:	d1e0      	bne.n	800fe8a <_free_r+0x26>
 800fec8:	681c      	ldr	r4, [r3, #0]
 800feca:	685b      	ldr	r3, [r3, #4]
 800fecc:	6053      	str	r3, [r2, #4]
 800fece:	440c      	add	r4, r1
 800fed0:	6014      	str	r4, [r2, #0]
 800fed2:	e7da      	b.n	800fe8a <_free_r+0x26>
 800fed4:	d902      	bls.n	800fedc <_free_r+0x78>
 800fed6:	230c      	movs	r3, #12
 800fed8:	6003      	str	r3, [r0, #0]
 800feda:	e7d6      	b.n	800fe8a <_free_r+0x26>
 800fedc:	6825      	ldr	r5, [r4, #0]
 800fede:	1961      	adds	r1, r4, r5
 800fee0:	428b      	cmp	r3, r1
 800fee2:	bf04      	itt	eq
 800fee4:	6819      	ldreq	r1, [r3, #0]
 800fee6:	685b      	ldreq	r3, [r3, #4]
 800fee8:	6063      	str	r3, [r4, #4]
 800feea:	bf04      	itt	eq
 800feec:	1949      	addeq	r1, r1, r5
 800feee:	6021      	streq	r1, [r4, #0]
 800fef0:	6054      	str	r4, [r2, #4]
 800fef2:	e7ca      	b.n	800fe8a <_free_r+0x26>
 800fef4:	b003      	add	sp, #12
 800fef6:	bd30      	pop	{r4, r5, pc}
 800fef8:	200024c0 	.word	0x200024c0

0800fefc <_init>:
 800fefc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fefe:	bf00      	nop
 800ff00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ff02:	bc08      	pop	{r3}
 800ff04:	469e      	mov	lr, r3
 800ff06:	4770      	bx	lr

0800ff08 <_fini>:
 800ff08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff0a:	bf00      	nop
 800ff0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ff0e:	bc08      	pop	{r3}
 800ff10:	469e      	mov	lr, r3
 800ff12:	4770      	bx	lr
